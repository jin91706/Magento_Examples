require.config({"config": {
        "jsbuild":{"jquery/ui-modules/effect-slide.js":"/*!\n * jQuery UI Effects Slide - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/slide-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.slide = function (o, done) {\n\n        // Create element\n        var el = $(this),\n            props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\"],\n            mode = $.effects.setMode(el, o.mode || \"show\"),\n            show = mode === \"show\",\n            direction = o.direction || \"left\",\n            ref = (direction === \"up\" || direction === \"down\") ? \"top\" : \"left\",\n            positiveMotion = (direction === \"up\" || direction === \"left\"),\n            distance,\n            animation = {};\n\n        // Adjust\n        $.effects.save(el, props);\n        el.show();\n        distance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true);\n\n        $.effects.createWrapper(el).css({\n            overflow: \"hidden\"\n        });\n\n        if (show) {\n            el.css(ref, positiveMotion ? (isNaN(distance) ? \"-\" + distance : -distance) : distance);\n        }\n\n        // Animation\n        animation[ref] = (show ?\n            (positiveMotion ? \"+=\" : \"-=\") :\n            (positiveMotion ? \"-=\" : \"+=\")) +\n            distance;\n\n        // Animate\n        el.animate(animation, {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: function () {\n                if (mode === \"hide\") {\n                    el.hide();\n                }\n                $.effects.restore(el, props);\n                $.effects.removeWrapper(el);\n                done();\n            }\n        });\n    };\n\n});\n","jquery/ui-modules/spinner.js":"/*!\n * jQuery UI Spinner - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/spinner/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/button'\n], function ($) {\n\n    function modifier(fn) {\n        return function () {\n            var previous = this.element.val();\n            fn.apply(this, arguments);\n            this._refresh();\n            if (previous !== this.element.val()) {\n                this._trigger(\"change\");\n            }\n        };\n    }\n\n    $.widget(\"ui.spinner\", {\n        version: \"1.10.4\",\n        defaultElement: \"<input>\",\n        widgetEventPrefix: \"spin\",\n        options: {\n            culture: null,\n            icons: {\n                down: \"ui-icon-triangle-1-s\",\n                up: \"ui-icon-triangle-1-n\"\n            },\n            incremental: true,\n            max: null,\n            min: null,\n            numberFormat: null,\n            page: 10,\n            step: 1,\n\n            change: null,\n            spin: null,\n            start: null,\n            stop: null\n        },\n\n        _create: function () {\n            // handle string values that need to be parsed\n            this._setOption(\"max\", this.options.max);\n            this._setOption(\"min\", this.options.min);\n            this._setOption(\"step\", this.options.step);\n\n            // Only format if there is a value, prevents the field from being marked\n            // as invalid in Firefox, see #9573.\n            if (this.value() !== \"\") {\n                // Format the value, but don't constrain.\n                this._value(this.element.val(), true);\n            }\n\n            this._draw();\n            this._on(this._events);\n            this._refresh();\n\n            // turning off autocomplete prevents the browser from remembering the\n            // value when navigating through history, so we re-enable autocomplete\n            // if the page is unloaded before the widget is destroyed. #7790\n            this._on(this.window, {\n                beforeunload: function () {\n                    this.element.removeAttr(\"autocomplete\");\n                }\n            });\n        },\n\n        _getCreateOptions: function () {\n            var options = {},\n                element = this.element;\n\n            $.each([\"min\", \"max\", \"step\"], function (i, option) {\n                var value = element.attr(option);\n                if (value !== undefined && value.length) {\n                    options[option] = value;\n                }\n            });\n\n            return options;\n        },\n\n        _events: {\n            keydown: function (event) {\n                if (this._start(event) && this._keydown(event)) {\n                    event.preventDefault();\n                }\n            },\n            keyup: \"_stop\",\n            focus: function () {\n                this.previous = this.element.val();\n            },\n            blur: function (event) {\n                if (this.cancelBlur) {\n                    delete this.cancelBlur;\n                    return;\n                }\n\n                this._stop();\n                this._refresh();\n                if (this.previous !== this.element.val()) {\n                    this._trigger(\"change\", event);\n                }\n            },\n            mousewheel: function (event, delta) {\n                if (!delta) {\n                    return;\n                }\n                if (!this.spinning && !this._start(event)) {\n                    return false;\n                }\n\n                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);\n                clearTimeout(this.mousewheelTimer);\n                this.mousewheelTimer = this._delay(function () {\n                    if (this.spinning) {\n                        this._stop(event);\n                    }\n                }, 100);\n                event.preventDefault();\n            },\n            \"mousedown .ui-spinner-button\": function (event) {\n                var previous;\n\n                // We never want the buttons to have focus; whenever the user is\n                // interacting with the spinner, the focus should be on the input.\n                // If the input is focused then this.previous is properly set from\n                // when the input first received focus. If the input is not focused\n                // then we need to set this.previous based on the value before spinning.\n                previous = this.element[0] === this.document[0].activeElement ?\n                    this.previous : this.element.val();\n\n                function checkFocus() {\n                    var isActive = this.element[0] === this.document[0].activeElement;\n                    if (!isActive) {\n                        this.element.focus();\n                        this.previous = previous;\n                        // support: IE\n                        // IE sets focus asynchronously, so we need to check if focus\n                        // moved off of the input because the user clicked on the button.\n                        this._delay(function () {\n                            this.previous = previous;\n                        });\n                    }\n                }\n\n                // ensure focus is on (or stays on) the text field\n                event.preventDefault();\n                checkFocus.call(this);\n\n                // support: IE\n                // IE doesn't prevent moving focus even with event.preventDefault()\n                // so we set a flag to know when we should ignore the blur event\n                // and check (again) if focus moved off of the input.\n                this.cancelBlur = true;\n                this._delay(function () {\n                    delete this.cancelBlur;\n                    checkFocus.call(this);\n                });\n\n                if (this._start(event) === false) {\n                    return;\n                }\n\n                this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n            },\n            \"mouseup .ui-spinner-button\": \"_stop\",\n            \"mouseenter .ui-spinner-button\": function (event) {\n                // button will add ui-state-active if mouse was down while mouseleave and kept down\n                if (!$(event.currentTarget).hasClass(\"ui-state-active\")) {\n                    return;\n                }\n\n                if (this._start(event) === false) {\n                    return false;\n                }\n                this._repeat(null, $(event.currentTarget).hasClass(\"ui-spinner-up\") ? 1 : -1, event);\n            },\n            // TODO: do we really want to consider this a stop?\n            // shouldn't we just stop the repeater and wait until mouseup before\n            // we trigger the stop event?\n            \"mouseleave .ui-spinner-button\": \"_stop\"\n        },\n\n        _draw: function () {\n            var uiSpinner = this.uiSpinner = this.element\n                .addClass(\"ui-spinner-input\")\n                .attr(\"autocomplete\", \"off\")\n                .wrap(this._uiSpinnerHtml())\n                .parent()\n                // add buttons\n                .append(this._buttonHtml());\n\n            this.element.attr(\"role\", \"spinbutton\");\n\n            // button bindings\n            this.buttons = uiSpinner.find(\".ui-spinner-button\")\n                .attr(\"tabIndex\", -1)\n                .button()\n                .removeClass(\"ui-corner-all\");\n\n            // IE 6 doesn't understand height: 50% for the buttons\n            // unless the wrapper has an explicit height\n            if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) &&\n                uiSpinner.height() > 0) {\n                uiSpinner.height(uiSpinner.height());\n            }\n\n            // disable spinner if element was already disabled\n            if (this.options.disabled) {\n                this.disable();\n            }\n        },\n\n        _keydown: function (event) {\n            var options = this.options,\n                keyCode = $.ui.keyCode;\n\n            switch (event.keyCode) {\n                case keyCode.UP:\n                    this._repeat(null, 1, event);\n                    return true;\n                case keyCode.DOWN:\n                    this._repeat(null, -1, event);\n                    return true;\n                case keyCode.PAGE_UP:\n                    this._repeat(null, options.page, event);\n                    return true;\n                case keyCode.PAGE_DOWN:\n                    this._repeat(null, -options.page, event);\n                    return true;\n            }\n\n            return false;\n        },\n\n        _uiSpinnerHtml: function () {\n            return \"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>\";\n        },\n\n        _buttonHtml: function () {\n            return \"\" +\n                \"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>\" +\n                \"<span class='ui-icon \" + this.options.icons.up + \"'>&#9650;</span>\" +\n                \"</a>\" +\n                \"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>\" +\n                \"<span class='ui-icon \" + this.options.icons.down + \"'>&#9660;</span>\" +\n                \"</a>\";\n        },\n\n        _start: function (event) {\n            if (!this.spinning && this._trigger(\"start\", event) === false) {\n                return false;\n            }\n\n            if (!this.counter) {\n                this.counter = 1;\n            }\n            this.spinning = true;\n            return true;\n        },\n\n        _repeat: function (i, steps, event) {\n            i = i || 500;\n\n            clearTimeout(this.timer);\n            this.timer = this._delay(function () {\n                this._repeat(40, steps, event);\n            }, i);\n\n            this._spin(steps * this.options.step, event);\n        },\n\n        _spin: function (step, event) {\n            var value = this.value() || 0;\n\n            if (!this.counter) {\n                this.counter = 1;\n            }\n\n            value = this._adjustValue(value + step * this._increment(this.counter));\n\n            if (!this.spinning || this._trigger(\"spin\", event, {value: value}) !== false) {\n                this._value(value);\n                this.counter++;\n            }\n        },\n\n        _increment: function (i) {\n            var incremental = this.options.incremental;\n\n            if (incremental) {\n                return $.isFunction(incremental) ?\n                    incremental(i) :\n                    Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);\n            }\n\n            return 1;\n        },\n\n        _precision: function () {\n            var precision = this._precisionOf(this.options.step);\n            if (this.options.min !== null) {\n                precision = Math.max(precision, this._precisionOf(this.options.min));\n            }\n            return precision;\n        },\n\n        _precisionOf: function (num) {\n            var str = num.toString(),\n                decimal = str.indexOf(\".\");\n            return decimal === -1 ? 0 : str.length - decimal - 1;\n        },\n\n        _adjustValue: function (value) {\n            var base, aboveMin,\n                options = this.options;\n\n            // make sure we're at a valid step\n            // - find out where we are relative to the base (min or 0)\n            base = options.min !== null ? options.min : 0;\n            aboveMin = value - base;\n            // - round to the nearest step\n            aboveMin = Math.round(aboveMin / options.step) * options.step;\n            // - rounding is based on 0, so adjust back to our base\n            value = base + aboveMin;\n\n            // fix precision from bad JS floating point math\n            value = parseFloat(value.toFixed(this._precision()));\n\n            // clamp the value\n            if (options.max !== null && value > options.max) {\n                return options.max;\n            }\n            if (options.min !== null && value < options.min) {\n                return options.min;\n            }\n\n            return value;\n        },\n\n        _stop: function (event) {\n            if (!this.spinning) {\n                return;\n            }\n\n            clearTimeout(this.timer);\n            clearTimeout(this.mousewheelTimer);\n            this.counter = 0;\n            this.spinning = false;\n            this._trigger(\"stop\", event);\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"culture\" || key === \"numberFormat\") {\n                var prevValue = this._parse(this.element.val());\n                this.options[key] = value;\n                this.element.val(this._format(prevValue));\n                return;\n            }\n\n            if (key === \"max\" || key === \"min\" || key === \"step\") {\n                if (typeof value === \"string\") {\n                    value = this._parse(value);\n                }\n            }\n            if (key === \"icons\") {\n                this.buttons.first().find(\".ui-icon\")\n                    .removeClass(this.options.icons.up)\n                    .addClass(value.up);\n                this.buttons.last().find(\".ui-icon\")\n                    .removeClass(this.options.icons.down)\n                    .addClass(value.down);\n            }\n\n            this._super(key, value);\n\n            if (key === \"disabled\") {\n                if (value) {\n                    this.element.prop(\"disabled\", true);\n                    this.buttons.button(\"disable\");\n                } else {\n                    this.element.prop(\"disabled\", false);\n                    this.buttons.button(\"enable\");\n                }\n            }\n        },\n\n        _setOptions: modifier(function (options) {\n            this._super(options);\n            this._value(this.element.val());\n        }),\n\n        _parse: function (val) {\n            if (typeof val === \"string\" && val !== \"\") {\n                val = window.Globalize && this.options.numberFormat ?\n                    Globalize.parseFloat(val, 10, this.options.culture) : +val;\n            }\n            return val === \"\" || isNaN(val) ? null : val;\n        },\n\n        _format: function (value) {\n            if (value === \"\") {\n                return \"\";\n            }\n            return window.Globalize && this.options.numberFormat ?\n                Globalize.format(value, this.options.numberFormat, this.options.culture) :\n                value;\n        },\n\n        _refresh: function () {\n            this.element.attr({\n                \"aria-valuemin\": this.options.min,\n                \"aria-valuemax\": this.options.max,\n                // TODO: what should we do with values that can't be parsed?\n                \"aria-valuenow\": this._parse(this.element.val())\n            });\n        },\n\n        // update the value without triggering change\n        _value: function (value, allowAny) {\n            var parsed;\n            if (value !== \"\") {\n                parsed = this._parse(value);\n                if (parsed !== null) {\n                    if (!allowAny) {\n                        parsed = this._adjustValue(parsed);\n                    }\n                    value = this._format(parsed);\n                }\n            }\n            this.element.val(value);\n            this._refresh();\n        },\n\n        _destroy: function () {\n            this.element\n                .removeClass(\"ui-spinner-input\")\n                .prop(\"disabled\", false)\n                .removeAttr(\"autocomplete\")\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-valuemin\")\n                .removeAttr(\"aria-valuemax\")\n                .removeAttr(\"aria-valuenow\");\n            this.uiSpinner.replaceWith(this.element);\n        },\n\n        stepUp: modifier(function (steps) {\n            this._stepUp(steps);\n        }),\n        _stepUp: function (steps) {\n            if (this._start()) {\n                this._spin((steps || 1) * this.options.step);\n                this._stop();\n            }\n        },\n\n        stepDown: modifier(function (steps) {\n            this._stepDown(steps);\n        }),\n        _stepDown: function (steps) {\n            if (this._start()) {\n                this._spin((steps || 1) * -this.options.step);\n                this._stop();\n            }\n        },\n\n        pageUp: modifier(function (pages) {\n            this._stepUp((pages || 1) * this.options.page);\n        }),\n\n        pageDown: modifier(function (pages) {\n            this._stepDown((pages || 1) * this.options.page);\n        }),\n\n        value: function (newVal) {\n            if (!arguments.length) {\n                return this._parse(this.element.val());\n            }\n            modifier(this._value).call(this, newVal);\n        },\n\n        widget: function () {\n            return this.uiSpinner;\n        }\n    });\n\n});\n","jquery/ui-modules/button.js":"/*!\n * jQuery UI Button - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/button/\n */\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget'\n], function ($, undefined) {\n\n    var lastActive,\n        baseClasses = \"ui-button ui-widget ui-state-default ui-corner-all\",\n        typeClasses = \"ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only\",\n        formResetHandler = function () {\n            var form = $(this);\n            setTimeout(function () {\n                form.find(\":ui-button\").button(\"refresh\");\n            }, 1);\n        },\n        radioGroup = function (radio) {\n            var name = radio.name,\n                form = radio.form,\n                radios = $([]);\n            if (name) {\n                name = name.replace(/'/g, \"\\\\'\");\n                if (form) {\n                    radios = $(form).find(\"[name='\" + name + \"']\");\n                } else {\n                    radios = $(\"[name='\" + name + \"']\", radio.ownerDocument)\n                        .filter(function () {\n                            return !this.form;\n                        });\n                }\n            }\n            return radios;\n        };\n\n    $.widget(\"ui.button\", {\n        version: \"1.10.4\",\n        defaultElement: \"<button>\",\n        options: {\n            disabled: null,\n            text: true,\n            label: null,\n            icons: {\n                primary: null,\n                secondary: null\n            }\n        },\n        _create: function () {\n            this.element.closest(\"form\")\n                .unbind(\"reset\" + this.eventNamespace)\n                .bind(\"reset\" + this.eventNamespace, formResetHandler);\n\n            if (typeof this.options.disabled !== \"boolean\") {\n                this.options.disabled = !!this.element.prop(\"disabled\");\n            } else {\n                this.element.prop(\"disabled\", this.options.disabled);\n            }\n\n            this._determineButtonType();\n            this.hasTitle = !!this.buttonElement.attr(\"title\");\n\n            var that = this,\n                options = this.options,\n                toggleButton = this.type === \"checkbox\" || this.type === \"radio\",\n                activeClass = !toggleButton ? \"ui-state-active\" : \"\";\n\n            if (options.label === null) {\n                options.label = (this.type === \"input\" ? this.buttonElement.val() : this.buttonElement.html());\n            }\n\n            this._hoverable(this.buttonElement);\n\n            this.buttonElement\n                .addClass(baseClasses)\n                .attr(\"role\", \"button\")\n                .bind(\"mouseenter\" + this.eventNamespace, function () {\n                    if (options.disabled) {\n                        return;\n                    }\n                    if (this === lastActive) {\n                        $(this).addClass(\"ui-state-active\");\n                    }\n                })\n                .bind(\"mouseleave\" + this.eventNamespace, function () {\n                    if (options.disabled) {\n                        return;\n                    }\n                    $(this).removeClass(activeClass);\n                })\n                .bind(\"click\" + this.eventNamespace, function (event) {\n                    if (options.disabled) {\n                        event.preventDefault();\n                        event.stopImmediatePropagation();\n                    }\n                });\n\n            // Can't use _focusable() because the element that receives focus\n            // and the element that gets the ui-state-focus class are different\n            this._on({\n                focus: function () {\n                    this.buttonElement.addClass(\"ui-state-focus\");\n                },\n                blur: function () {\n                    this.buttonElement.removeClass(\"ui-state-focus\");\n                }\n            });\n\n            if (toggleButton) {\n                this.element.bind(\"change\" + this.eventNamespace, function () {\n                    that.refresh();\n                });\n            }\n\n            if (this.type === \"checkbox\") {\n                this.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n                    if (options.disabled) {\n                        return false;\n                    }\n                });\n            } else if (this.type === \"radio\") {\n                this.buttonElement.bind(\"click\" + this.eventNamespace, function () {\n                    if (options.disabled) {\n                        return false;\n                    }\n                    $(this).addClass(\"ui-state-active\");\n                    that.buttonElement.attr(\"aria-pressed\", \"true\");\n\n                    var radio = that.element[0];\n                    radioGroup(radio)\n                        .not(radio)\n                        .map(function () {\n                            return $(this).button(\"widget\")[0];\n                        })\n                        .removeClass(\"ui-state-active\")\n                        .attr(\"aria-pressed\", \"false\");\n                });\n            } else {\n                this.buttonElement\n                    .bind(\"mousedown\" + this.eventNamespace, function () {\n                        if (options.disabled) {\n                            return false;\n                        }\n                        $(this).addClass(\"ui-state-active\");\n                        lastActive = this;\n                        that.document.one(\"mouseup\", function () {\n                            lastActive = null;\n                        });\n                    })\n                    .bind(\"mouseup\" + this.eventNamespace, function () {\n                        if (options.disabled) {\n                            return false;\n                        }\n                        $(this).removeClass(\"ui-state-active\");\n                    })\n                    .bind(\"keydown\" + this.eventNamespace, function (event) {\n                        if (options.disabled) {\n                            return false;\n                        }\n                        if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {\n                            $(this).addClass(\"ui-state-active\");\n                        }\n                    })\n                    // see #8559, we bind to blur here in case the button element loses\n                    // focus between keydown and keyup, it would be left in an \"active\" state\n                    .bind(\"keyup\" + this.eventNamespace + \" blur\" + this.eventNamespace, function () {\n                        $(this).removeClass(\"ui-state-active\");\n                    });\n\n                if (this.buttonElement.is(\"a\")) {\n                    this.buttonElement.keyup(function (event) {\n                        if (event.keyCode === $.ui.keyCode.SPACE) {\n                            // TODO pass through original event correctly (just as 2nd argument doesn't work)\n                            $(this).click();\n                        }\n                    });\n                }\n            }\n\n            // TODO: pull out $.Widget's handling for the disabled option into\n            // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can\n            // be overridden by individual plugins\n            this._setOption(\"disabled\", options.disabled);\n            this._resetButton();\n        },\n\n        _determineButtonType: function () {\n            var ancestor, labelSelector, checked;\n\n            if (this.element.is(\"[type=checkbox]\")) {\n                this.type = \"checkbox\";\n            } else if (this.element.is(\"[type=radio]\")) {\n                this.type = \"radio\";\n            } else if (this.element.is(\"input\")) {\n                this.type = \"input\";\n            } else {\n                this.type = \"button\";\n            }\n\n            if (this.type === \"checkbox\" || this.type === \"radio\") {\n                // we don't search against the document in case the element\n                // is disconnected from the DOM\n                ancestor = this.element.parents().last();\n                labelSelector = \"label[for='\" + this.element.attr(\"id\") + \"']\";\n                this.buttonElement = ancestor.find(labelSelector);\n                if (!this.buttonElement.length) {\n                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();\n                    this.buttonElement = ancestor.filter(labelSelector);\n                    if (!this.buttonElement.length) {\n                        this.buttonElement = ancestor.find(labelSelector);\n                    }\n                }\n                this.element.addClass(\"ui-helper-hidden-accessible\");\n\n                checked = this.element.is(\":checked\");\n                if (checked) {\n                    this.buttonElement.addClass(\"ui-state-active\");\n                }\n                this.buttonElement.prop(\"aria-pressed\", checked);\n            } else {\n                this.buttonElement = this.element;\n            }\n        },\n\n        widget: function () {\n            return this.buttonElement;\n        },\n\n        _destroy: function () {\n            this.element\n                .removeClass(\"ui-helper-hidden-accessible\");\n            this.buttonElement\n                .removeClass(baseClasses + \" ui-state-active \" + typeClasses)\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-pressed\")\n                .html(this.buttonElement.find(\".ui-button-text\").html());\n\n            if (!this.hasTitle) {\n                this.buttonElement.removeAttr(\"title\");\n            }\n        },\n\n        _setOption: function (key, value) {\n            this._super(key, value);\n            if (key === \"disabled\") {\n                this.element.prop(\"disabled\", !!value);\n                if (value) {\n                    this.buttonElement.removeClass(\"ui-state-focus\");\n                }\n                return;\n            }\n            this._resetButton();\n        },\n\n        refresh: function () {\n            //See #8237 & #8828\n            var isDisabled = this.element.is(\"input, button\") ? this.element.is(\":disabled\") : this.element.hasClass(\"ui-button-disabled\");\n\n            if (isDisabled !== this.options.disabled) {\n                this._setOption(\"disabled\", isDisabled);\n            }\n            if (this.type === \"radio\") {\n                radioGroup(this.element[0]).each(function () {\n                    if ($(this).is(\":checked\")) {\n                        $(this).button(\"widget\")\n                            .addClass(\"ui-state-active\")\n                            .attr(\"aria-pressed\", \"true\");\n                    } else {\n                        $(this).button(\"widget\")\n                            .removeClass(\"ui-state-active\")\n                            .attr(\"aria-pressed\", \"false\");\n                    }\n                });\n            } else if (this.type === \"checkbox\") {\n                if (this.element.is(\":checked\")) {\n                    this.buttonElement\n                        .addClass(\"ui-state-active\")\n                        .attr(\"aria-pressed\", \"true\");\n                } else {\n                    this.buttonElement\n                        .removeClass(\"ui-state-active\")\n                        .attr(\"aria-pressed\", \"false\");\n                }\n            }\n        },\n\n        _resetButton: function () {\n            if (this.type === \"input\") {\n                if (this.options.label) {\n                    this.element.val(this.options.label);\n                }\n                return;\n            }\n            var buttonElement = this.buttonElement.removeClass(typeClasses),\n                buttonText = $(\"<span></span>\", this.document[0])\n                    .addClass(\"ui-button-text\")\n                    .html(this.options.label)\n                    .appendTo(buttonElement.empty())\n                    .text(),\n                icons = this.options.icons,\n                multipleIcons = icons.primary && icons.secondary,\n                buttonClasses = [];\n\n            if (icons.primary || icons.secondary) {\n                if (this.options.text) {\n                    buttonClasses.push(\"ui-button-text-icon\" + (multipleIcons ? \"s\" : (icons.primary ? \"-primary\" : \"-secondary\")));\n                }\n\n                if (icons.primary) {\n                    buttonElement.prepend(\"<span class='ui-button-icon-primary ui-icon \" + icons.primary + \"'></span>\");\n                }\n\n                if (icons.secondary) {\n                    buttonElement.append(\"<span class='ui-button-icon-secondary ui-icon \" + icons.secondary + \"'></span>\");\n                }\n\n                if (!this.options.text) {\n                    buttonClasses.push(multipleIcons ? \"ui-button-icons-only\" : \"ui-button-icon-only\");\n\n                    if (!this.hasTitle) {\n                        buttonElement.attr(\"title\", $.trim(buttonText));\n                    }\n                }\n            } else {\n                buttonClasses.push(\"ui-button-text-only\");\n            }\n            buttonElement.addClass(buttonClasses.join(\" \"));\n        }\n    });\n\n    $.widget(\"ui.buttonset\", {\n        version: \"1.10.4\",\n        options: {\n            items: \"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)\"\n        },\n\n        _create: function () {\n            this.element.addClass(\"ui-buttonset\");\n        },\n\n        _init: function () {\n            this.refresh();\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"disabled\") {\n                this.buttons.button(\"option\", key, value);\n            }\n\n            this._super(key, value);\n        },\n\n        refresh: function () {\n            var rtl = this.element.css(\"direction\") === \"rtl\";\n\n            this.buttons = this.element.find(this.options.items)\n                .filter(\":ui-button\")\n                .button(\"refresh\")\n                .end()\n                .not(\":ui-button\")\n                .button()\n                .end()\n                .map(function () {\n                    return $(this).button(\"widget\")[0];\n                })\n                .removeClass(\"ui-corner-all ui-corner-left ui-corner-right\")\n                .filter(\":first\")\n                .addClass(rtl ? \"ui-corner-right\" : \"ui-corner-left\")\n                .end()\n                .filter(\":last\")\n                .addClass(rtl ? \"ui-corner-left\" : \"ui-corner-right\")\n                .end()\n                .end();\n        },\n\n        _destroy: function () {\n            this.element.removeClass(\"ui-buttonset\");\n            this.buttons\n                .map(function () {\n                    return $(this).button(\"widget\")[0];\n                })\n                .removeClass(\"ui-corner-left ui-corner-right\")\n                .end()\n                .button(\"destroy\");\n        }\n    });\n\n});\n","jquery/ui-modules/effect-transfer.js":"/*!\n * jQuery UI Effects Transfer - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/transfer-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.transfer = function (o, done) {\n        var elem = $(this),\n            target = $(o.to),\n            targetFixed = target.css(\"position\") === \"fixed\",\n            body = $(\"body\"),\n            fixTop = targetFixed ? body.scrollTop() : 0,\n            fixLeft = targetFixed ? body.scrollLeft() : 0,\n            endPosition = target.offset(),\n            animation = {\n                top: endPosition.top - fixTop,\n                left: endPosition.left - fixLeft,\n                height: target.innerHeight(),\n                width: target.innerWidth()\n            },\n            startPosition = elem.offset(),\n            transfer = $(\"<div class='ui-effects-transfer'></div>\")\n                .appendTo(document.body)\n                .addClass(o.className)\n                .css({\n                    top: startPosition.top - fixTop,\n                    left: startPosition.left - fixLeft,\n                    height: elem.innerHeight(),\n                    width: elem.innerWidth(),\n                    position: targetFixed ? \"fixed\" : \"absolute\"\n                })\n                .animate(animation, o.duration, o.easing, function () {\n                    transfer.remove();\n                    done();\n                });\n    };\n\n});\n","jquery/ui-modules/progressbar.js":"/*!\n * jQuery UI Progressbar - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/progressbar/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget'\n], function ($, undefined) {\n\n    $.widget(\"ui.progressbar\", {\n        version: \"1.10.4\",\n        options: {\n            max: 100,\n            value: 0,\n\n            change: null,\n            complete: null\n        },\n\n        min: 0,\n\n        _create: function () {\n            // Constrain initial value\n            this.oldValue = this.options.value = this._constrainedValue();\n\n            this.element\n                .addClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\")\n                .attr({\n                    // Only set static values, aria-valuenow and aria-valuemax are\n                    // set inside _refreshValue()\n                    role: \"progressbar\",\n                    \"aria-valuemin\": this.min\n                });\n\n            this.valueDiv = $(\"<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>\")\n                .appendTo(this.element);\n\n            this._refreshValue();\n        },\n\n        _destroy: function () {\n            this.element\n                .removeClass(\"ui-progressbar ui-widget ui-widget-content ui-corner-all\")\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-valuemin\")\n                .removeAttr(\"aria-valuemax\")\n                .removeAttr(\"aria-valuenow\");\n\n            this.valueDiv.remove();\n        },\n\n        value: function (newValue) {\n            if (newValue === undefined) {\n                return this.options.value;\n            }\n\n            this.options.value = this._constrainedValue(newValue);\n            this._refreshValue();\n        },\n\n        _constrainedValue: function (newValue) {\n            if (newValue === undefined) {\n                newValue = this.options.value;\n            }\n\n            this.indeterminate = newValue === false;\n\n            // sanitize value\n            if (typeof newValue !== \"number\") {\n                newValue = 0;\n            }\n\n            return this.indeterminate ? false :\n                Math.min(this.options.max, Math.max(this.min, newValue));\n        },\n\n        _setOptions: function (options) {\n            // Ensure \"value\" option is set after other values (like max)\n            var value = options.value;\n            delete options.value;\n\n            this._super(options);\n\n            this.options.value = this._constrainedValue(value);\n            this._refreshValue();\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"max\") {\n                // Don't allow a max less than min\n                value = Math.max(this.min, value);\n            }\n\n            this._super(key, value);\n        },\n\n        _percentage: function () {\n            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);\n        },\n\n        _refreshValue: function () {\n            var value = this.options.value,\n                percentage = this._percentage();\n\n            this.valueDiv\n                .toggle(this.indeterminate || value > this.min)\n                .toggleClass(\"ui-corner-right\", value === this.options.max)\n                .width(percentage.toFixed(0) + \"%\");\n\n            this.element.toggleClass(\"ui-progressbar-indeterminate\", this.indeterminate);\n\n            if (this.indeterminate) {\n                this.element.removeAttr(\"aria-valuenow\");\n                if (!this.overlayDiv) {\n                    this.overlayDiv = $(\"<div class='ui-progressbar-overlay'></div>\").appendTo(this.valueDiv);\n                }\n            } else {\n                this.element.attr({\n                    \"aria-valuemax\": this.options.max,\n                    \"aria-valuenow\": value\n                });\n                if (this.overlayDiv) {\n                    this.overlayDiv.remove();\n                    this.overlayDiv = null;\n                }\n            }\n\n            if (this.oldValue !== value) {\n                this.oldValue = value;\n                this._trigger(\"change\");\n            }\n            if (value === this.options.max) {\n                this._trigger(\"complete\");\n            }\n        }\n    });\n\n});\n","jquery/ui-modules/draggable.js":"/*!\n * jQuery UI Draggable - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/draggable/\n *\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/mouse'\n], function ($, undefined) {\n\n    $.widget(\"ui.draggable\", $.ui.mouse, {\n        version: \"1.10.4\",\n        widgetEventPrefix: \"drag\",\n        options: {\n            addClasses: true,\n            appendTo: \"parent\",\n            axis: false,\n            connectToSortable: false,\n            containment: false,\n            cursor: \"auto\",\n            cursorAt: false,\n            grid: false,\n            handle: false,\n            helper: \"original\",\n            iframeFix: false,\n            opacity: false,\n            refreshPositions: false,\n            revert: false,\n            revertDuration: 500,\n            scope: \"default\",\n            scroll: true,\n            scrollSensitivity: 20,\n            scrollSpeed: 20,\n            snap: false,\n            snapMode: \"both\",\n            snapTolerance: 20,\n            stack: false,\n            zIndex: false,\n\n            // callbacks\n            drag: null,\n            start: null,\n            stop: null\n        },\n        _create: function () {\n\n            if (this.options.helper === \"original\" && !(/^(?:r|a|f)/).test(this.element.css(\"position\"))) {\n                this.element[0].style.position = \"relative\";\n            }\n            if (this.options.addClasses) {\n                this.element.addClass(\"ui-draggable\");\n            }\n            if (this.options.disabled) {\n                this.element.addClass(\"ui-draggable-disabled\");\n            }\n\n            this._mouseInit();\n\n        },\n\n        _destroy: function () {\n            this.element.removeClass(\"ui-draggable ui-draggable-dragging ui-draggable-disabled\");\n            this._mouseDestroy();\n        },\n\n        _mouseCapture: function (event) {\n\n            var o = this.options;\n\n            // among others, prevent a drag on a resizable-handle\n            if (this.helper || o.disabled || $(event.target).closest(\".ui-resizable-handle\").length > 0) {\n                return false;\n            }\n\n            //Quit if we're not on a valid handle\n            this.handle = this._getHandle(event);\n            if (!this.handle) {\n                return false;\n            }\n\n            $(o.iframeFix === true ? \"iframe\" : o.iframeFix).each(function () {\n                $(\"<div class='ui-draggable-iframeFix' style='background: #fff;'></div>\")\n                    .css({\n                        width: this.offsetWidth + \"px\", height: this.offsetHeight + \"px\",\n                        position: \"absolute\", opacity: \"0.001\", zIndex: 1000\n                    })\n                    .css($(this).offset())\n                    .appendTo(\"body\");\n            });\n\n            return true;\n\n        },\n\n        _mouseStart: function (event) {\n\n            var o = this.options;\n\n            //Create and append the visible helper\n            this.helper = this._createHelper(event);\n\n            this.helper.addClass(\"ui-draggable-dragging\");\n\n            //Cache the helper size\n            this._cacheHelperProportions();\n\n            //If ddmanager is used for droppables, set the global draggable\n            if ($.ui.ddmanager) {\n                $.ui.ddmanager.current = this;\n            }\n\n            /*\n             * - Position generation -\n             * This block generates everything position related - it's the core of draggables.\n             */\n\n            //Cache the margins of the original element\n            this._cacheMargins();\n\n            //Store the helper's css position\n            this.cssPosition = this.helper.css(\"position\");\n            this.scrollParent = this.helper.scrollParent();\n            this.offsetParent = this.helper.offsetParent();\n            this.offsetParentCssPosition = this.offsetParent.css(\"position\");\n\n            //The element's absolute position on the page minus margins\n            this.offset = this.positionAbs = this.element.offset();\n            this.offset = {\n                top: this.offset.top - this.margins.top,\n                left: this.offset.left - this.margins.left\n            };\n\n            //Reset scroll cache\n            this.offset.scroll = false;\n\n            $.extend(this.offset, {\n                click: { //Where the click happened, relative to the element\n                    left: event.pageX - this.offset.left,\n                    top: event.pageY - this.offset.top\n                },\n                parent: this._getParentOffset(),\n                relative: this._getRelativeOffset() //This is a relative to absolute position minus the actual position calculation - only used for relative positioned helper\n            });\n\n            //Generate the original position\n            this.originalPosition = this.position = this._generatePosition(event);\n            this.originalPageX = event.pageX;\n            this.originalPageY = event.pageY;\n\n            //Adjust the mouse offset relative to the helper if \"cursorAt\" is supplied\n            (o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt));\n\n            //Set a containment if given in the options\n            this._setContainment();\n\n            //Trigger event + callbacks\n            if (this._trigger(\"start\", event) === false) {\n                this._clear();\n                return false;\n            }\n\n            //Recache the helper size\n            this._cacheHelperProportions();\n\n            //Prepare the droppable offsets\n            if ($.ui.ddmanager && !o.dropBehaviour) {\n                $.ui.ddmanager.prepareOffsets(this, event);\n            }\n\n\n            this._mouseDrag(event, true); //Execute the drag once - this causes the helper not to be visible before getting its correct position\n\n            //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)\n            if ($.ui.ddmanager) {\n                $.ui.ddmanager.dragStart(this, event);\n            }\n\n            return true;\n        },\n\n        _mouseDrag: function (event, noPropagation) {\n            // reset any necessary cached properties (see #5009)\n            if (this.offsetParentCssPosition === \"fixed\") {\n                this.offset.parent = this._getParentOffset();\n            }\n\n            //Compute the helpers position\n            this.position = this._generatePosition(event);\n            this.positionAbs = this._convertPositionTo(\"absolute\");\n\n            //Call plugins and callbacks and use the resulting position if something is returned\n            if (!noPropagation) {\n                var ui = this._uiHash();\n                if (this._trigger(\"drag\", event, ui) === false) {\n                    this._mouseUp({});\n                    return false;\n                }\n                this.position = ui.position;\n            }\n\n            if (!this.options.axis || this.options.axis !== \"y\") {\n                this.helper[0].style.left = this.position.left + \"px\";\n            }\n            if (!this.options.axis || this.options.axis !== \"x\") {\n                this.helper[0].style.top = this.position.top + \"px\";\n            }\n            if ($.ui.ddmanager) {\n                $.ui.ddmanager.drag(this, event);\n            }\n\n            return false;\n        },\n\n        _mouseStop: function (event) {\n\n            //If we are using droppables, inform the manager about the drop\n            var that = this,\n                dropped = false;\n            if ($.ui.ddmanager && !this.options.dropBehaviour) {\n                dropped = $.ui.ddmanager.drop(this, event);\n            }\n\n            //if a drop comes from outside (a sortable)\n            if (this.dropped) {\n                dropped = this.dropped;\n                this.dropped = false;\n            }\n\n            //if the original element is no longer in the DOM don't bother to continue (see #8269)\n            if (this.options.helper === \"original\" && !$.contains(this.element[0].ownerDocument, this.element[0])) {\n                return false;\n            }\n\n            if ((this.options.revert === \"invalid\" && !dropped) || (this.options.revert === \"valid\" && dropped) || this.options.revert === true || ($.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped))) {\n                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {\n                    if (that._trigger(\"stop\", event) !== false) {\n                        that._clear();\n                    }\n                });\n            } else {\n                if (this._trigger(\"stop\", event) !== false) {\n                    this._clear();\n                }\n            }\n\n            return false;\n        },\n\n        _mouseUp: function (event) {\n            //Remove frame helpers\n            $(\"div.ui-draggable-iframeFix\").each(function () {\n                this.parentNode.removeChild(this);\n            });\n\n            //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)\n            if ($.ui.ddmanager) {\n                $.ui.ddmanager.dragStop(this, event);\n            }\n\n            return $.ui.mouse.prototype._mouseUp.call(this, event);\n        },\n\n        cancel: function () {\n\n            if (this.helper.is(\".ui-draggable-dragging\")) {\n                this._mouseUp({});\n            } else {\n                this._clear();\n            }\n\n            return this;\n\n        },\n\n        _getHandle: function (event) {\n            return this.options.handle ?\n                !!$(event.target).closest(this.element.find(this.options.handle)).length :\n                true;\n        },\n\n        _createHelper: function (event) {\n\n            var o = this.options,\n                helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [event])) : (o.helper === \"clone\" ? this.element.clone().removeAttr(\"id\") : this.element);\n\n            if (!helper.parents(\"body\").length) {\n                helper.appendTo((o.appendTo === \"parent\" ? this.element[0].parentNode : o.appendTo));\n            }\n\n            if (helper[0] !== this.element[0] && !(/(fixed|absolute)/).test(helper.css(\"position\"))) {\n                helper.css(\"position\", \"absolute\");\n            }\n\n            return helper;\n\n        },\n\n        _adjustOffsetFromHelper: function (obj) {\n            if (typeof obj === \"string\") {\n                obj = obj.split(\" \");\n            }\n            if ($.isArray(obj)) {\n                obj = {left: +obj[0], top: +obj[1] || 0};\n            }\n            if (\"left\" in obj) {\n                this.offset.click.left = obj.left + this.margins.left;\n            }\n            if (\"right\" in obj) {\n                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;\n            }\n            if (\"top\" in obj) {\n                this.offset.click.top = obj.top + this.margins.top;\n            }\n            if (\"bottom\" in obj) {\n                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;\n            }\n        },\n\n        _getParentOffset: function () {\n\n            //Get the offsetParent and cache its position\n            var po = this.offsetParent.offset();\n\n            // This is a special case where we need to modify a offset calculated on start, since the following happened:\n            // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent\n            // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that\n            //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag\n            if (this.cssPosition === \"absolute\" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {\n                po.left += this.scrollParent.scrollLeft();\n                po.top += this.scrollParent.scrollTop();\n            }\n\n            //This needs to be actually done for all browsers, since pageX/pageY includes this information\n            //Ugly IE fix\n            if ((this.offsetParent[0] === document.body) ||\n                (this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === \"html\" && $.ui.ie)) {\n                po = {top: 0, left: 0};\n            }\n\n            return {\n                top: po.top + (parseInt(this.offsetParent.css(\"borderTopWidth\"), 10) || 0),\n                left: po.left + (parseInt(this.offsetParent.css(\"borderLeftWidth\"), 10) || 0)\n            };\n\n        },\n\n        _getRelativeOffset: function () {\n\n            if (this.cssPosition === \"relative\") {\n                var p = this.element.position();\n                return {\n                    top: p.top - (parseInt(this.helper.css(\"top\"), 10) || 0) + this.scrollParent.scrollTop(),\n                    left: p.left - (parseInt(this.helper.css(\"left\"), 10) || 0) + this.scrollParent.scrollLeft()\n                };\n            } else {\n                return {top: 0, left: 0};\n            }\n\n        },\n\n        _cacheMargins: function () {\n            this.margins = {\n                left: (parseInt(this.element.css(\"marginLeft\"), 10) || 0),\n                top: (parseInt(this.element.css(\"marginTop\"), 10) || 0),\n                right: (parseInt(this.element.css(\"marginRight\"), 10) || 0),\n                bottom: (parseInt(this.element.css(\"marginBottom\"), 10) || 0)\n            };\n        },\n\n        _cacheHelperProportions: function () {\n            this.helperProportions = {\n                width: this.helper.outerWidth(),\n                height: this.helper.outerHeight()\n            };\n        },\n\n        _setContainment: function () {\n\n            var over, c, ce,\n                o = this.options;\n\n            if (!o.containment) {\n                this.containment = null;\n                return;\n            }\n\n            if (o.containment === \"window\") {\n                this.containment = [\n                    $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,\n                    $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,\n                    $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left,\n                    $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top\n                ];\n                return;\n            }\n\n            if (o.containment === \"document\") {\n                this.containment = [\n                    0,\n                    0,\n                    $(document).width() - this.helperProportions.width - this.margins.left,\n                    ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top\n                ];\n                return;\n            }\n\n            if (o.containment.constructor === Array) {\n                this.containment = o.containment;\n                return;\n            }\n\n            if (o.containment === \"parent\") {\n                o.containment = this.helper[0].parentNode;\n            }\n\n            c = $(o.containment);\n            ce = c[0];\n\n            if (!ce) {\n                return;\n            }\n\n            over = c.css(\"overflow\") !== \"hidden\";\n\n            this.containment = [\n                (parseInt(c.css(\"borderLeftWidth\"), 10) || 0) + (parseInt(c.css(\"paddingLeft\"), 10) || 0),\n                (parseInt(c.css(\"borderTopWidth\"), 10) || 0) + (parseInt(c.css(\"paddingTop\"), 10) || 0),\n                (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css(\"borderRightWidth\"), 10) || 0) - (parseInt(c.css(\"paddingRight\"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,\n                (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css(\"borderBottomWidth\"), 10) || 0) - (parseInt(c.css(\"paddingBottom\"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom\n            ];\n            this.relative_container = c;\n        },\n\n        _convertPositionTo: function (d, pos) {\n\n            if (!pos) {\n                pos = this.position;\n            }\n\n            var mod = d === \"absolute\" ? 1 : -1,\n                scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent;\n\n            //Cache the scroll\n            if (!this.offset.scroll) {\n                this.offset.scroll = {top: scroll.scrollTop(), left: scroll.scrollLeft()};\n            }\n\n            return {\n                top: (\n                    pos.top +\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\n                    this.offset.relative.top * mod +\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.parent.top * mod -\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\n                    ((this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : this.offset.scroll.top) * mod)\n                ),\n                left: (\n                    pos.left +\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\n                    this.offset.relative.left * mod +\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.parent.left * mod -\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\n                    ((this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left) * mod)\n                )\n            };\n\n        },\n\n        _generatePosition: function (event) {\n\n            var containment, co, top, left,\n                o = this.options,\n                scroll = this.cssPosition === \"absolute\" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent,\n                pageX = event.pageX,\n                pageY = event.pageY;\n\n            //Cache the scroll\n            if (!this.offset.scroll) {\n                this.offset.scroll = {top: scroll.scrollTop(), left: scroll.scrollLeft()};\n            }\n\n            /*\n             * - Position constraining -\n             * Constrain the position to a mix of grid, containment.\n             */\n\n            // If we are not dragging yet, we won't check for options\n            if (this.originalPosition) {\n                if (this.containment) {\n                    if (this.relative_container) {\n                        co = this.relative_container.offset();\n                        containment = [\n                            this.containment[0] + co.left,\n                            this.containment[1] + co.top,\n                            this.containment[2] + co.left,\n                            this.containment[3] + co.top\n                        ];\n                    } else {\n                        containment = this.containment;\n                    }\n\n                    if (event.pageX - this.offset.click.left < containment[0]) {\n                        pageX = containment[0] + this.offset.click.left;\n                    }\n                    if (event.pageY - this.offset.click.top < containment[1]) {\n                        pageY = containment[1] + this.offset.click.top;\n                    }\n                    if (event.pageX - this.offset.click.left > containment[2]) {\n                        pageX = containment[2] + this.offset.click.left;\n                    }\n                    if (event.pageY - this.offset.click.top > containment[3]) {\n                        pageY = containment[3] + this.offset.click.top;\n                    }\n                }\n\n                if (o.grid) {\n                    //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)\n                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;\n                    pageY = containment ? ((top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3]) ? top : ((top - this.offset.click.top >= containment[1]) ? top - o.grid[1] : top + o.grid[1])) : top;\n\n                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;\n                    pageX = containment ? ((left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2]) ? left : ((left - this.offset.click.left >= containment[0]) ? left - o.grid[0] : left + o.grid[0])) : left;\n                }\n\n            }\n\n            return {\n                top: (\n                    pageY -\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\n                    this.offset.click.top -\t\t\t\t\t\t\t\t\t\t\t\t// Click offset (relative to the element)\n                    this.offset.relative.top -\t\t\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.parent.top +\t\t\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\n                    (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollTop() : this.offset.scroll.top)\n                ),\n                left: (\n                    pageX -\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The absolute mouse position\n                    this.offset.click.left -\t\t\t\t\t\t\t\t\t\t\t\t// Click offset (relative to the element)\n                    this.offset.relative.left -\t\t\t\t\t\t\t\t\t\t\t\t// Only for relative positioned nodes: Relative offset from element to offset parent\n                    this.offset.parent.left +\t\t\t\t\t\t\t\t\t\t\t\t// The offsetParent's offset without borders (offset + border)\n                    (this.cssPosition === \"fixed\" ? -this.scrollParent.scrollLeft() : this.offset.scroll.left)\n                )\n            };\n\n        },\n\n        _clear: function () {\n            this.helper.removeClass(\"ui-draggable-dragging\");\n            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {\n                this.helper.remove();\n            }\n            this.helper = null;\n            this.cancelHelperRemoval = false;\n        },\n\n        // From now on bulk stuff - mainly helpers\n\n        _trigger: function (type, event, ui) {\n            ui = ui || this._uiHash();\n            $.ui.plugin.call(this, type, [event, ui]);\n            //The absolute position has to be recalculated after plugins\n            if (type === \"drag\") {\n                this.positionAbs = this._convertPositionTo(\"absolute\");\n            }\n            return $.Widget.prototype._trigger.call(this, type, event, ui);\n        },\n\n        plugins: {},\n\n        _uiHash: function () {\n            return {\n                helper: this.helper,\n                position: this.position,\n                originalPosition: this.originalPosition,\n                offset: this.positionAbs\n            };\n        }\n\n    });\n\n    $.ui.plugin.add(\"draggable\", \"connectToSortable\", {\n        start: function (event, ui) {\n\n            var inst = $(this).data(\"ui-draggable\"), o = inst.options,\n                uiSortable = $.extend({}, ui, {item: inst.element});\n            inst.sortables = [];\n            $(o.connectToSortable).each(function () {\n                var sortable = $.data(this, \"ui-sortable\");\n                if (sortable && !sortable.options.disabled) {\n                    inst.sortables.push({\n                        instance: sortable,\n                        shouldRevert: sortable.options.revert\n                    });\n                    sortable.refreshPositions();\t// Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).\n                    sortable._trigger(\"activate\", event, uiSortable);\n                }\n            });\n\n        },\n        stop: function (event, ui) {\n\n            //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper\n            var inst = $(this).data(\"ui-draggable\"),\n                uiSortable = $.extend({}, ui, {item: inst.element});\n\n            $.each(inst.sortables, function () {\n                if (this.instance.isOver) {\n\n                    this.instance.isOver = 0;\n\n                    inst.cancelHelperRemoval = true; //Don't remove the helper in the draggable instance\n                    this.instance.cancelHelperRemoval = false; //Remove it in the sortable instance (so sortable plugins like revert still work)\n\n                    //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: \"valid/invalid\"\n                    if (this.shouldRevert) {\n                        this.instance.options.revert = this.shouldRevert;\n                    }\n\n                    //Trigger the stop of the sortable\n                    this.instance._mouseStop(event);\n\n                    this.instance.options.helper = this.instance.options._helper;\n\n                    //If the helper has been the original item, restore properties in the sortable\n                    if (inst.options.helper === \"original\") {\n                        this.instance.currentItem.css({top: \"auto\", left: \"auto\"});\n                    }\n\n                } else {\n                    this.instance.cancelHelperRemoval = false; //Remove the helper in the sortable instance\n                    this.instance._trigger(\"deactivate\", event, uiSortable);\n                }\n\n            });\n\n        },\n        drag: function (event, ui) {\n\n            var inst = $(this).data(\"ui-draggable\"), that = this;\n\n            $.each(inst.sortables, function () {\n\n                var innermostIntersecting = false,\n                    thisSortable = this;\n\n                //Copy over some variables to allow calling the sortable's native _intersectsWith\n                this.instance.positionAbs = inst.positionAbs;\n                this.instance.helperProportions = inst.helperProportions;\n                this.instance.offset.click = inst.offset.click;\n\n                if (this.instance._intersectsWith(this.instance.containerCache)) {\n                    innermostIntersecting = true;\n                    $.each(inst.sortables, function () {\n                        this.instance.positionAbs = inst.positionAbs;\n                        this.instance.helperProportions = inst.helperProportions;\n                        this.instance.offset.click = inst.offset.click;\n                        if (this !== thisSortable &&\n                            this.instance._intersectsWith(this.instance.containerCache) &&\n                            $.contains(thisSortable.instance.element[0], this.instance.element[0])\n                        ) {\n                            innermostIntersecting = false;\n                        }\n                        return innermostIntersecting;\n                    });\n                }\n\n\n                if (innermostIntersecting) {\n                    //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once\n                    if (!this.instance.isOver) {\n\n                        this.instance.isOver = 1;\n                        //Now we fake the start of dragging for the sortable instance,\n                        //by cloning the list group item, appending it to the sortable and using it as inst.currentItem\n                        //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)\n                        this.instance.currentItem = $(that).clone().removeAttr(\"id\").appendTo(this.instance.element).data(\"ui-sortable-item\", true);\n                        this.instance.options._helper = this.instance.options.helper; //Store helper option to later restore it\n                        this.instance.options.helper = function () {\n                            return ui.helper[0];\n                        };\n\n                        event.target = this.instance.currentItem[0];\n                        this.instance._mouseCapture(event, true);\n                        this.instance._mouseStart(event, true, true);\n\n                        //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes\n                        this.instance.offset.click.top = inst.offset.click.top;\n                        this.instance.offset.click.left = inst.offset.click.left;\n                        this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;\n                        this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;\n\n                        inst._trigger(\"toSortable\", event);\n                        inst.dropped = this.instance.element; //draggable revert needs that\n                        //hack so receive/update callbacks work (mostly)\n                        inst.currentItem = inst.element;\n                        this.instance.fromOutside = inst;\n\n                    }\n\n                    //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable\n                    if (this.instance.currentItem) {\n                        this.instance._mouseDrag(event);\n                    }\n\n                } else {\n\n                    //If it doesn't intersect with the sortable, and it intersected before,\n                    //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval\n                    if (this.instance.isOver) {\n\n                        this.instance.isOver = 0;\n                        this.instance.cancelHelperRemoval = true;\n\n                        //Prevent reverting on this forced stop\n                        this.instance.options.revert = false;\n\n                        // The out event needs to be triggered independently\n                        this.instance._trigger(\"out\", event, this.instance._uiHash(this.instance));\n\n                        this.instance._mouseStop(event, true);\n                        this.instance.options.helper = this.instance.options._helper;\n\n                        //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size\n                        this.instance.currentItem.remove();\n                        if (this.instance.placeholder) {\n                            this.instance.placeholder.remove();\n                        }\n\n                        inst._trigger(\"fromSortable\", event);\n                        inst.dropped = false; //draggable revert needs that\n                    }\n\n                }\n\n            });\n\n        }\n    });\n\n    $.ui.plugin.add(\"draggable\", \"cursor\", {\n        start: function () {\n            var t = $(\"body\"), o = $(this).data(\"ui-draggable\").options;\n            if (t.css(\"cursor\")) {\n                o._cursor = t.css(\"cursor\");\n            }\n            t.css(\"cursor\", o.cursor);\n        },\n        stop: function () {\n            var o = $(this).data(\"ui-draggable\").options;\n            if (o._cursor) {\n                $(\"body\").css(\"cursor\", o._cursor);\n            }\n        }\n    });\n\n    $.ui.plugin.add(\"draggable\", \"opacity\", {\n        start: function (event, ui) {\n            var t = $(ui.helper), o = $(this).data(\"ui-draggable\").options;\n            if (t.css(\"opacity\")) {\n                o._opacity = t.css(\"opacity\");\n            }\n            t.css(\"opacity\", o.opacity);\n        },\n        stop: function (event, ui) {\n            var o = $(this).data(\"ui-draggable\").options;\n            if (o._opacity) {\n                $(ui.helper).css(\"opacity\", o._opacity);\n            }\n        }\n    });\n\n    $.ui.plugin.add(\"draggable\", \"scroll\", {\n        start: function () {\n            var i = $(this).data(\"ui-draggable\");\n            if (i.scrollParent[0] !== document && i.scrollParent[0].tagName !== \"HTML\") {\n                i.overflowOffset = i.scrollParent.offset();\n            }\n        },\n        drag: function (event) {\n\n            var i = $(this).data(\"ui-draggable\"), o = i.options, scrolled = false;\n\n            if (i.scrollParent[0] !== document && i.scrollParent[0].tagName !== \"HTML\") {\n\n                if (!o.axis || o.axis !== \"x\") {\n                    if ((i.overflowOffset.top + i.scrollParent[0].offsetHeight) - event.pageY < o.scrollSensitivity) {\n                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;\n                    } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {\n                        i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;\n                    }\n                }\n\n                if (!o.axis || o.axis !== \"y\") {\n                    if ((i.overflowOffset.left + i.scrollParent[0].offsetWidth) - event.pageX < o.scrollSensitivity) {\n                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;\n                    } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {\n                        i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;\n                    }\n                }\n\n            } else {\n\n                if (!o.axis || o.axis !== \"x\") {\n                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {\n                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);\n                    } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {\n                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);\n                    }\n                }\n\n                if (!o.axis || o.axis !== \"y\") {\n                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {\n                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);\n                    } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {\n                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);\n                    }\n                }\n\n            }\n\n            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {\n                $.ui.ddmanager.prepareOffsets(i, event);\n            }\n\n        }\n    });\n\n    $.ui.plugin.add(\"draggable\", \"snap\", {\n        start: function () {\n\n            var i = $(this).data(\"ui-draggable\"),\n                o = i.options;\n\n            i.snapElements = [];\n\n            $(o.snap.constructor !== String ? (o.snap.items || \":data(ui-draggable)\") : o.snap).each(function () {\n                var $t = $(this),\n                    $o = $t.offset();\n                if (this !== i.element[0]) {\n                    i.snapElements.push({\n                        item: this,\n                        width: $t.outerWidth(), height: $t.outerHeight(),\n                        top: $o.top, left: $o.left\n                    });\n                }\n            });\n\n        },\n        drag: function (event, ui) {\n\n            var ts, bs, ls, rs, l, r, t, b, i, first,\n                inst = $(this).data(\"ui-draggable\"),\n                o = inst.options,\n                d = o.snapTolerance,\n                x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width,\n                y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;\n\n            for (i = inst.snapElements.length - 1; i >= 0; i--) {\n\n                l = inst.snapElements[i].left;\n                r = l + inst.snapElements[i].width;\n                t = inst.snapElements[i].top;\n                b = t + inst.snapElements[i].height;\n\n                if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {\n                    if (inst.snapElements[i].snapping) {\n                        (inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {snapItem: inst.snapElements[i].item})));\n                    }\n                    inst.snapElements[i].snapping = false;\n                    continue;\n                }\n\n                if (o.snapMode !== \"inner\") {\n                    ts = Math.abs(t - y2) <= d;\n                    bs = Math.abs(b - y1) <= d;\n                    ls = Math.abs(l - x2) <= d;\n                    rs = Math.abs(r - x1) <= d;\n                    if (ts) {\n                        ui.position.top = inst._convertPositionTo(\"relative\", {\n                            top: t - inst.helperProportions.height,\n                            left: 0\n                        }).top - inst.margins.top;\n                    }\n                    if (bs) {\n                        ui.position.top = inst._convertPositionTo(\"relative\", {top: b, left: 0}).top - inst.margins.top;\n                    }\n                    if (ls) {\n                        ui.position.left = inst._convertPositionTo(\"relative\", {\n                            top: 0,\n                            left: l - inst.helperProportions.width\n                        }).left - inst.margins.left;\n                    }\n                    if (rs) {\n                        ui.position.left = inst._convertPositionTo(\"relative\", {\n                            top: 0,\n                            left: r\n                        }).left - inst.margins.left;\n                    }\n                }\n\n                first = (ts || bs || ls || rs);\n\n                if (o.snapMode !== \"outer\") {\n                    ts = Math.abs(t - y1) <= d;\n                    bs = Math.abs(b - y2) <= d;\n                    ls = Math.abs(l - x1) <= d;\n                    rs = Math.abs(r - x2) <= d;\n                    if (ts) {\n                        ui.position.top = inst._convertPositionTo(\"relative\", {top: t, left: 0}).top - inst.margins.top;\n                    }\n                    if (bs) {\n                        ui.position.top = inst._convertPositionTo(\"relative\", {\n                            top: b - inst.helperProportions.height,\n                            left: 0\n                        }).top - inst.margins.top;\n                    }\n                    if (ls) {\n                        ui.position.left = inst._convertPositionTo(\"relative\", {\n                            top: 0,\n                            left: l\n                        }).left - inst.margins.left;\n                    }\n                    if (rs) {\n                        ui.position.left = inst._convertPositionTo(\"relative\", {\n                            top: 0,\n                            left: r - inst.helperProportions.width\n                        }).left - inst.margins.left;\n                    }\n                }\n\n                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {\n                    (inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {snapItem: inst.snapElements[i].item})));\n                }\n                inst.snapElements[i].snapping = (ts || bs || ls || rs || first);\n\n            }\n\n        }\n    });\n\n    $.ui.plugin.add(\"draggable\", \"stack\", {\n        start: function () {\n            var min,\n                o = this.data(\"ui-draggable\").options,\n                group = $.makeArray($(o.stack)).sort(function (a, b) {\n                    return (parseInt($(a).css(\"zIndex\"), 10) || 0) - (parseInt($(b).css(\"zIndex\"), 10) || 0);\n                });\n\n            if (!group.length) {\n                return;\n            }\n\n            min = parseInt($(group[0]).css(\"zIndex\"), 10) || 0;\n            $(group).each(function (i) {\n                $(this).css(\"zIndex\", min + i);\n            });\n            this.css(\"zIndex\", (min + group.length));\n        }\n    });\n\n    $.ui.plugin.add(\"draggable\", \"zIndex\", {\n        start: function (event, ui) {\n            var t = $(ui.helper), o = $(this).data(\"ui-draggable\").options;\n            if (t.css(\"zIndex\")) {\n                o._zIndex = t.css(\"zIndex\");\n            }\n            t.css(\"zIndex\", o.zIndex);\n        },\n        stop: function (event, ui) {\n            var o = $(this).data(\"ui-draggable\").options;\n            if (o._zIndex) {\n                $(ui.helper).css(\"zIndex\", o._zIndex);\n            }\n        }\n    });\n\n});\n","jquery/ui-modules/datepicker.js":"/*!\n * jQuery UI Datepicker - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/datepicker/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n], function ($, undefined) {\n\n    $.extend($.ui, {datepicker: {version: \"1.10.4\"}});\n\n    var PROP_NAME = \"datepicker\",\n        instActive;\n\n    /* Date picker manager.\n       Use the singleton instance of this class, $.datepicker, to interact with the date picker.\n       Settings for (groups of) date pickers are maintained in an instance object,\n       allowing multiple different settings on the same page. */\n\n    function Datepicker() {\n        this._curInst = null; // The current instance in use\n        this._keyEvent = false; // If the last event was a key event\n        this._disabledInputs = []; // List of date picker inputs that have been disabled\n        this._datepickerShowing = false; // True if the popup picker is showing , false if not\n        this._inDialog = false; // True if showing within a \"dialog\", false if not\n        this._mainDivId = \"ui-datepicker-div\"; // The ID of the main datepicker division\n        this._inlineClass = \"ui-datepicker-inline\"; // The name of the inline marker class\n        this._appendClass = \"ui-datepicker-append\"; // The name of the append marker class\n        this._triggerClass = \"ui-datepicker-trigger\"; // The name of the trigger marker class\n        this._dialogClass = \"ui-datepicker-dialog\"; // The name of the dialog marker class\n        this._disableClass = \"ui-datepicker-disabled\"; // The name of the disabled covering marker class\n        this._unselectableClass = \"ui-datepicker-unselectable\"; // The name of the unselectable cell marker class\n        this._currentClass = \"ui-datepicker-current-day\"; // The name of the current day marker class\n        this._dayOverClass = \"ui-datepicker-days-cell-over\"; // The name of the day hover marker class\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[\"\"] = { // Default regional settings\n            closeText: \"Done\", // Display text for close link\n            prevText: \"Prev\", // Display text for previous month link\n            nextText: \"Next\", // Display text for next month link\n            currentText: \"Today\", // Display text for current month link\n            monthNames: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n                \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"], // Names of months for drop-down and formatting\n            monthNamesShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"], // For formatting\n            dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"], // For formatting\n            dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"], // For formatting\n            dayNamesMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"], // Column headings for days starting at Sunday\n            weekHeader: \"Wk\", // Column header for week of the year\n            dateFormat: \"mm/dd/yy\", // See format options on parseDate\n            firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...\n            isRTL: false, // True if right-to-left language, false if left-to-right\n            showMonthAfterYear: false, // True if the year select precedes month, false for month then year\n            yearSuffix: \"\" // Additional text to append to the year in the month headers\n        };\n        this._defaults = { // Global defaults for all the date picker instances\n            showOn: \"focus\", // \"focus\" for popup on focus,\n            // \"button\" for trigger button, or \"both\" for either\n            showAnim: \"fadeIn\", // Name of jQuery animation for popup\n            showOptions: {}, // Options for enhanced animations\n            defaultDate: null, // Used when field is blank: actual date,\n            // +/-number for offset from today, null for today\n            appendText: \"\", // Display text following the input box, e.g. showing the format\n            buttonText: \"...\", // Text for trigger button\n            buttonImage: \"\", // URL for trigger button image\n            buttonImageOnly: false, // True if the image appears alone, false if it appears on a button\n            hideIfNoPrevNext: false, // True to hide next/previous month links\n            // if not applicable, false to just disable them\n            navigationAsDateFormat: false, // True if date formatting applied to prev/today/next links\n            gotoCurrent: false, // True if today link goes back to current selection instead\n            changeMonth: false, // True if month can be selected directly, false if only prev/next\n            changeYear: false, // True if year can be selected directly, false if only prev/next\n            yearRange: \"c-10:c+10\", // Range of years to display in drop-down,\n            // either relative to today's year (-nn:+nn), relative to currently displayed year\n            // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)\n            showOtherMonths: false, // True to show dates in other months, false to leave blank\n            selectOtherMonths: false, // True to allow selection of dates in other months, false for unselectable\n            showWeek: false, // True to show week of the year, false to not show it\n            calculateWeek: this.iso8601Week, // How to calculate the week of the year,\n            // takes a Date and returns the number of the week for it\n            shortYearCutoff: \"+10\", // Short year values < this are in the current century,\n            // > this are in the previous century,\n            // string value starting with \"+\" for current year + value\n            minDate: null, // The earliest selectable date, or null for no limit\n            maxDate: null, // The latest selectable date, or null for no limit\n            duration: \"fast\", // Duration of display/closure\n            beforeShowDay: null, // Function that takes a date and returns an array with\n            // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or \"\",\n            // [2] = cell title (optional), e.g. $.datepicker.noWeekends\n            beforeShow: null, // Function that takes an input field and\n            // returns a set of custom settings for the date picker\n            onSelect: null, // Define a callback function when a date is selected\n            onChangeMonthYear: null, // Define a callback function when the month or year is changed\n            onClose: null, // Define a callback function when the datepicker is closed\n            numberOfMonths: 1, // Number of months to show at a time\n            showCurrentAtPos: 0, // The position in multipe months at which to show the current month (starting at 0)\n            stepMonths: 1, // Number of months to step back/forward\n            stepBigMonths: 12, // Number of months to step back/forward for the big links\n            altField: \"\", // Selector for an alternate field to store selected dates into\n            altFormat: \"\", // The date format to use for the alternate field\n            constrainInput: true, // The input is constrained by the current date format\n            showButtonPanel: false, // True to show button panel, false to not show it\n            autoSize: false, // True to size the input for the date format, false to leave as is\n            disabled: false // The initial disabled state\n        };\n        $.extend(this._defaults, this.regional[\"\"]);\n        this.dpDiv = bindHover($(\"<div id='\" + this._mainDivId + \"' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\"));\n    }\n\n    $.extend(Datepicker.prototype, {\n        /* Class name added to elements to indicate already configured with a date picker. */\n        markerClassName: \"hasDatepicker\",\n\n        //Keep track of the maximum number of rows displayed (see #7043)\n        maxRows: 4,\n\n        // TODO rename to \"widget\" when switching to widget factory\n        _widgetDatepicker: function () {\n            return this.dpDiv;\n        },\n\n        /* Override the default settings for all instances of the date picker.\n         * @param  settings  object - the new settings to use as defaults (anonymous object)\n         * @return the manager object\n         */\n        setDefaults: function (settings) {\n            extendRemove(this._defaults, settings || {});\n            return this;\n        },\n\n        /* Attach the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         * @param  settings  object - the new settings to use for this date picker instance (anonymous)\n         */\n        _attachDatepicker: function (target, settings) {\n            var nodeName, inline, inst;\n            nodeName = target.nodeName.toLowerCase();\n            inline = (nodeName === \"div\" || nodeName === \"span\");\n            if (!target.id) {\n                this.uuid += 1;\n                target.id = \"dp\" + this.uuid;\n            }\n            inst = this._newInst($(target), inline);\n            inst.settings = $.extend({}, settings || {});\n            if (nodeName === \"input\") {\n                this._connectDatepicker(target, inst);\n            } else if (inline) {\n                this._inlineDatepicker(target, inst);\n            }\n        },\n\n        /* Create a new instance object. */\n        _newInst: function (target, inline) {\n            var id = target[0].id.replace(/([^A-Za-z0-9_\\-])/g, \"\\\\\\\\$1\"); // escape jQuery meta chars\n            return {\n                id: id, input: target, // associated target\n                selectedDay: 0, selectedMonth: 0, selectedYear: 0, // current selection\n                drawMonth: 0, drawYear: 0, // month being drawn\n                inline: inline, // is datepicker inline or not\n                dpDiv: (!inline ? this.dpDiv : // presentation div\n                    bindHover($(\"<div class='\" + this._inlineClass + \" ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>\")))\n            };\n        },\n\n        /* Attach the date picker to an input field. */\n        _connectDatepicker: function (target, inst) {\n            var input = $(target);\n            inst.append = $([]);\n            inst.trigger = $([]);\n            if (input.hasClass(this.markerClassName)) {\n                return;\n            }\n            this._attachments(input, inst);\n            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);\n            this._autoSize(inst);\n            $.data(target, PROP_NAME, inst);\n            //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)\n            if (inst.settings.disabled) {\n                this._disableDatepicker(target);\n            }\n        },\n\n        /* Make attachments based on settings. */\n        _attachments: function (input, inst) {\n            var showOn, buttonText, buttonImage,\n                appendText = this._get(inst, \"appendText\"),\n                isRTL = this._get(inst, \"isRTL\");\n\n            if (inst.append) {\n                inst.append.remove();\n            }\n            if (appendText) {\n                inst.append = $(\"<span class='\" + this._appendClass + \"'>\" + appendText + \"</span>\");\n                input[isRTL ? \"before\" : \"after\"](inst.append);\n            }\n\n            input.unbind(\"focus\", this._showDatepicker);\n\n            if (inst.trigger) {\n                inst.trigger.remove();\n            }\n\n            showOn = this._get(inst, \"showOn\");\n            if (showOn === \"focus\" || showOn === \"both\") { // pop-up date picker when in the marked field\n                input.focus(this._showDatepicker);\n            }\n            if (showOn === \"button\" || showOn === \"both\") { // pop-up date picker when button clicked\n                buttonText = this._get(inst, \"buttonText\");\n                buttonImage = this._get(inst, \"buttonImage\");\n                inst.trigger = $(this._get(inst, \"buttonImageOnly\") ?\n                    $(\"<img/>\").addClass(this._triggerClass).attr({\n                        src: buttonImage,\n                        alt: buttonText,\n                        title: buttonText\n                    }) :\n                    $(\"<button type='button'></button>\").addClass(this._triggerClass).html(!buttonImage ? buttonText : $(\"<img/>\").attr(\n                        {src: buttonImage, alt: buttonText, title: buttonText})));\n                input[isRTL ? \"before\" : \"after\"](inst.trigger);\n                inst.trigger.click(function () {\n                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {\n                        $.datepicker._hideDatepicker();\n                    } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {\n                        $.datepicker._hideDatepicker();\n                        $.datepicker._showDatepicker(input[0]);\n                    } else {\n                        $.datepicker._showDatepicker(input[0]);\n                    }\n                    return false;\n                });\n            }\n        },\n\n        /* Apply the maximum length for the date format. */\n        _autoSize: function (inst) {\n            if (this._get(inst, \"autoSize\") && !inst.inline) {\n                var findMax, max, maxI, i,\n                    date = new Date(2009, 12 - 1, 20), // Ensure double digits\n                    dateFormat = this._get(inst, \"dateFormat\");\n\n                if (dateFormat.match(/[DM]/)) {\n                    findMax = function (names) {\n                        max = 0;\n                        maxI = 0;\n                        for (i = 0; i < names.length; i++) {\n                            if (names[i].length > max) {\n                                max = names[i].length;\n                                maxI = i;\n                            }\n                        }\n                        return maxI;\n                    };\n                    date.setMonth(findMax(this._get(inst, (dateFormat.match(/MM/) ?\n                        \"monthNames\" : \"monthNamesShort\"))));\n                    date.setDate(findMax(this._get(inst, (dateFormat.match(/DD/) ?\n                        \"dayNames\" : \"dayNamesShort\"))) + 20 - date.getDay());\n                }\n                inst.input.attr(\"size\", this._formatDate(inst, date).length);\n            }\n        },\n\n        /* Attach an inline date picker to a div. */\n        _inlineDatepicker: function (target, inst) {\n            var divSpan = $(target);\n            if (divSpan.hasClass(this.markerClassName)) {\n                return;\n            }\n            divSpan.addClass(this.markerClassName).append(inst.dpDiv);\n            $.data(target, PROP_NAME, inst);\n            this._setDate(inst, this._getDefaultDate(inst), true);\n            this._updateDatepicker(inst);\n            this._updateAlternate(inst);\n            //If disabled option is true, disable the datepicker before showing it (see ticket #5665)\n            if (inst.settings.disabled) {\n                this._disableDatepicker(target);\n            }\n            // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements\n            // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height\n            inst.dpDiv.css(\"display\", \"block\");\n        },\n\n        /* Pop-up the date picker in a \"dialog\" box.\n         * @param  input element - ignored\n         * @param  date\tstring or Date - the initial date to display\n         * @param  onSelect  function - the function to call when a date is selected\n         * @param  settings  object - update the dialog date picker instance's settings (anonymous object)\n         * @param  pos int[2] - coordinates for the dialog's position within the screen or\n         *\t\t\t\t\tevent - with x/y coordinates or\n         *\t\t\t\t\tleave empty for default (screen centre)\n         * @return the manager object\n         */\n        _dialogDatepicker: function (input, date, onSelect, settings, pos) {\n            var id, browserWidth, browserHeight, scrollX, scrollY,\n                inst = this._dialogInst; // internal instance\n\n            if (!inst) {\n                this.uuid += 1;\n                id = \"dp\" + this.uuid;\n                this._dialogInput = $(\"<input type='text' id='\" + id +\n                    \"' style='position: absolute; top: -100px; width: 0px;'/>\");\n                this._dialogInput.keydown(this._doKeyDown);\n                $(\"body\").append(this._dialogInput);\n                inst = this._dialogInst = this._newInst(this._dialogInput, false);\n                inst.settings = {};\n                $.data(this._dialogInput[0], PROP_NAME, inst);\n            }\n            extendRemove(inst.settings, settings || {});\n            date = (date && date.constructor === Date ? this._formatDate(inst, date) : date);\n            this._dialogInput.val(date);\n\n            this._pos = (pos ? (pos.length ? pos : [pos.pageX, pos.pageY]) : null);\n            if (!this._pos) {\n                browserWidth = document.documentElement.clientWidth;\n                browserHeight = document.documentElement.clientHeight;\n                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;\n                scrollY = document.documentElement.scrollTop || document.body.scrollTop;\n                this._pos = // should use actual width/height below\n                    [(browserWidth / 2) - 100 + scrollX, (browserHeight / 2) - 150 + scrollY];\n            }\n\n            // move input on screen for focus, but hidden behind dialog\n            this._dialogInput.css(\"left\", (this._pos[0] + 20) + \"px\").css(\"top\", this._pos[1] + \"px\");\n            inst.settings.onSelect = onSelect;\n            this._inDialog = true;\n            this.dpDiv.addClass(this._dialogClass);\n            this._showDatepicker(this._dialogInput[0]);\n            if ($.blockUI) {\n                $.blockUI(this.dpDiv);\n            }\n            $.data(this._dialogInput[0], PROP_NAME, inst);\n            return this;\n        },\n\n        /* Detach a datepicker from its control.\n         * @param  target\telement - the target input field or division or span\n         */\n        _destroyDatepicker: function (target) {\n            var nodeName,\n                $target = $(target),\n                inst = $.data(target, PROP_NAME);\n\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            $.removeData(target, PROP_NAME);\n            if (nodeName === \"input\") {\n                inst.append.remove();\n                inst.trigger.remove();\n                $target.removeClass(this.markerClassName).unbind(\"focus\", this._showDatepicker).unbind(\"keydown\", this._doKeyDown).unbind(\"keypress\", this._doKeyPress).unbind(\"keyup\", this._doKeyUp);\n            } else if (nodeName === \"div\" || nodeName === \"span\") {\n                $target.removeClass(this.markerClassName).empty();\n            }\n        },\n\n        /* Enable the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         */\n        _enableDatepicker: function (target) {\n            var nodeName, inline,\n                $target = $(target),\n                inst = $.data(target, PROP_NAME);\n\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            if (nodeName === \"input\") {\n                target.disabled = false;\n                inst.trigger.filter(\"button\").each(function () {\n                    this.disabled = false;\n                }).end().filter(\"img\").css({opacity: \"1.0\", cursor: \"\"});\n            } else if (nodeName === \"div\" || nodeName === \"span\") {\n                inline = $target.children(\".\" + this._inlineClass);\n                inline.children().removeClass(\"ui-state-disabled\");\n                inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", false);\n            }\n            this._disabledInputs = $.map(this._disabledInputs,\n                function (value) {\n                    return (value === target ? null : value);\n                }); // delete entry\n        },\n\n        /* Disable the date picker to a jQuery selection.\n         * @param  target\telement - the target input field or division or span\n         */\n        _disableDatepicker: function (target) {\n            var nodeName, inline,\n                $target = $(target),\n                inst = $.data(target, PROP_NAME);\n\n            if (!$target.hasClass(this.markerClassName)) {\n                return;\n            }\n\n            nodeName = target.nodeName.toLowerCase();\n            if (nodeName === \"input\") {\n                target.disabled = true;\n                inst.trigger.filter(\"button\").each(function () {\n                    this.disabled = true;\n                }).end().filter(\"img\").css({opacity: \"0.5\", cursor: \"default\"});\n            } else if (nodeName === \"div\" || nodeName === \"span\") {\n                inline = $target.children(\".\" + this._inlineClass);\n                inline.children().addClass(\"ui-state-disabled\");\n                inline.find(\"select.ui-datepicker-month, select.ui-datepicker-year\").prop(\"disabled\", true);\n            }\n            this._disabledInputs = $.map(this._disabledInputs,\n                function (value) {\n                    return (value === target ? null : value);\n                }); // delete entry\n            this._disabledInputs[this._disabledInputs.length] = target;\n        },\n\n        /* Is the first field in a jQuery collection disabled as a datepicker?\n         * @param  target\telement - the target input field or division or span\n         * @return boolean - true if disabled, false if enabled\n         */\n        _isDisabledDatepicker: function (target) {\n            if (!target) {\n                return false;\n            }\n            for (var i = 0; i < this._disabledInputs.length; i++) {\n                if (this._disabledInputs[i] === target) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /* Retrieve the instance data for the target control.\n         * @param  target  element - the target input field or division or span\n         * @return  object - the associated instance data\n         * @throws  error if a jQuery problem getting data\n         */\n        _getInst: function (target) {\n            try {\n                return $.data(target, PROP_NAME);\n            } catch (err) {\n                throw \"Missing instance data for this datepicker\";\n            }\n        },\n\n        /* Update or retrieve the settings for a date picker attached to an input field or division.\n         * @param  target  element - the target input field or division or span\n         * @param  name\tobject - the new settings to update or\n         *\t\t\t\tstring - the name of the setting to change or retrieve,\n         *\t\t\t\twhen retrieving also \"all\" for all instance settings or\n         *\t\t\t\t\"defaults\" for all global defaults\n         * @param  value   any - the new value for the setting\n         *\t\t\t\t(omit if above is an object or to retrieve a value)\n         */\n        _optionDatepicker: function (target, name, value) {\n            var settings, date, minDate, maxDate,\n                inst = this._getInst(target);\n\n            if (arguments.length === 2 && typeof name === \"string\") {\n                return (name === \"defaults\" ? $.extend({}, $.datepicker._defaults) :\n                    (inst ? (name === \"all\" ? $.extend({}, inst.settings) :\n                        this._get(inst, name)) : null));\n            }\n\n            settings = name || {};\n            if (typeof name === \"string\") {\n                settings = {};\n                settings[name] = value;\n            }\n\n            if (inst) {\n                if (this._curInst === inst) {\n                    this._hideDatepicker();\n                }\n\n                date = this._getDateDatepicker(target, true);\n                minDate = this._getMinMaxDate(inst, \"min\");\n                maxDate = this._getMinMaxDate(inst, \"max\");\n                extendRemove(inst.settings, settings);\n                // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided\n                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {\n                    inst.settings.minDate = this._formatDate(inst, minDate);\n                }\n                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {\n                    inst.settings.maxDate = this._formatDate(inst, maxDate);\n                }\n                if (\"disabled\" in settings) {\n                    if (settings.disabled) {\n                        this._disableDatepicker(target);\n                    } else {\n                        this._enableDatepicker(target);\n                    }\n                }\n                this._attachments($(target), inst);\n                this._autoSize(inst);\n                this._setDate(inst, date);\n                this._updateAlternate(inst);\n                this._updateDatepicker(inst);\n            }\n        },\n\n        // change method deprecated\n        _changeDatepicker: function (target, name, value) {\n            this._optionDatepicker(target, name, value);\n        },\n\n        /* Redraw the date picker attached to an input field or division.\n         * @param  target  element - the target input field or division or span\n         */\n        _refreshDatepicker: function (target) {\n            var inst = this._getInst(target);\n            if (inst) {\n                this._updateDatepicker(inst);\n            }\n        },\n\n        /* Set the dates for a jQuery selection.\n         * @param  target element - the target input field or division or span\n         * @param  date\tDate - the new date\n         */\n        _setDateDatepicker: function (target, date) {\n            var inst = this._getInst(target);\n            if (inst) {\n                this._setDate(inst, date);\n                this._updateDatepicker(inst);\n                this._updateAlternate(inst);\n            }\n        },\n\n        /* Get the date(s) for the first entry in a jQuery selection.\n         * @param  target element - the target input field or division or span\n         * @param  noDefault boolean - true if no default date is to be used\n         * @return Date - the current date\n         */\n        _getDateDatepicker: function (target, noDefault) {\n            var inst = this._getInst(target);\n            if (inst && !inst.inline) {\n                this._setDateFromField(inst, noDefault);\n            }\n            return (inst ? this._getDate(inst) : null);\n        },\n\n        /* Handle keystrokes. */\n        _doKeyDown: function (event) {\n            var onSelect, dateStr, sel,\n                inst = $.datepicker._getInst(event.target),\n                handled = true,\n                isRTL = inst.dpDiv.is(\".ui-datepicker-rtl\");\n\n            inst._keyEvent = true;\n            if ($.datepicker._datepickerShowing) {\n                switch (event.keyCode) {\n                    case 9:\n                        $.datepicker._hideDatepicker();\n                        handled = false;\n                        break; // hide on tab out\n                    case 13:\n                        sel = $(\"td.\" + $.datepicker._dayOverClass + \":not(.\" +\n                            $.datepicker._currentClass + \")\", inst.dpDiv);\n                        if (sel[0]) {\n                            $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);\n                        }\n\n                        onSelect = $.datepicker._get(inst, \"onSelect\");\n                        if (onSelect) {\n                            dateStr = $.datepicker._formatDate(inst);\n\n                            // trigger custom callback\n                            onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);\n                        } else {\n                            $.datepicker._hideDatepicker();\n                        }\n\n                        return false; // don't submit the form\n                    case 27:\n                        $.datepicker._hideDatepicker();\n                        break; // hide on escape\n                    case 33:\n                        $.datepicker._adjustDate(event.target, (event.ctrlKey ?\n                            -$.datepicker._get(inst, \"stepBigMonths\") :\n                            -$.datepicker._get(inst, \"stepMonths\")), \"M\");\n                        break; // previous month/year on page up/+ ctrl\n                    case 34:\n                        $.datepicker._adjustDate(event.target, (event.ctrlKey ?\n                            +$.datepicker._get(inst, \"stepBigMonths\") :\n                            +$.datepicker._get(inst, \"stepMonths\")), \"M\");\n                        break; // next month/year on page down/+ ctrl\n                    case 35:\n                        if (event.ctrlKey || event.metaKey) {\n                            $.datepicker._clearDate(event.target);\n                        }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // clear on ctrl or command +end\n                    case 36:\n                        if (event.ctrlKey || event.metaKey) {\n                            $.datepicker._gotoToday(event.target);\n                        }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // current on ctrl or command +home\n                    case 37:\n                        if (event.ctrlKey || event.metaKey) {\n                            $.datepicker._adjustDate(event.target, (isRTL ? +1 : -1), \"D\");\n                        }\n                        handled = event.ctrlKey || event.metaKey;\n                        // -1 day on ctrl or command +left\n                        if (event.originalEvent.altKey) {\n                            $.datepicker._adjustDate(event.target, (event.ctrlKey ?\n                                -$.datepicker._get(inst, \"stepBigMonths\") :\n                                -$.datepicker._get(inst, \"stepMonths\")), \"M\");\n                        }\n                        // next month/year on alt +left on Mac\n                        break;\n                    case 38:\n                        if (event.ctrlKey || event.metaKey) {\n                            $.datepicker._adjustDate(event.target, -7, \"D\");\n                        }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // -1 week on ctrl or command +up\n                    case 39:\n                        if (event.ctrlKey || event.metaKey) {\n                            $.datepicker._adjustDate(event.target, (isRTL ? -1 : +1), \"D\");\n                        }\n                        handled = event.ctrlKey || event.metaKey;\n                        // +1 day on ctrl or command +right\n                        if (event.originalEvent.altKey) {\n                            $.datepicker._adjustDate(event.target, (event.ctrlKey ?\n                                +$.datepicker._get(inst, \"stepBigMonths\") :\n                                +$.datepicker._get(inst, \"stepMonths\")), \"M\");\n                        }\n                        // next month/year on alt +right\n                        break;\n                    case 40:\n                        if (event.ctrlKey || event.metaKey) {\n                            $.datepicker._adjustDate(event.target, +7, \"D\");\n                        }\n                        handled = event.ctrlKey || event.metaKey;\n                        break; // +1 week on ctrl or command +down\n                    default:\n                        handled = false;\n                }\n            } else if (event.keyCode === 36 && event.ctrlKey) { // display the date picker on ctrl+home\n                $.datepicker._showDatepicker(this);\n            } else {\n                handled = false;\n            }\n\n            if (handled) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        },\n\n        /* Filter entered characters - based on date format. */\n        _doKeyPress: function (event) {\n            var chars, chr,\n                inst = $.datepicker._getInst(event.target);\n\n            if ($.datepicker._get(inst, \"constrainInput\")) {\n                chars = $.datepicker._possibleChars($.datepicker._get(inst, \"dateFormat\"));\n                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);\n                return event.ctrlKey || event.metaKey || (chr < \" \" || !chars || chars.indexOf(chr) > -1);\n            }\n        },\n\n        /* Synchronise manual entry and field/alternate field. */\n        _doKeyUp: function (event) {\n            var date,\n                inst = $.datepicker._getInst(event.target);\n\n            if (inst.input.val() !== inst.lastVal) {\n                try {\n                    date = $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"),\n                        (inst.input ? inst.input.val() : null),\n                        $.datepicker._getFormatConfig(inst));\n\n                    if (date) { // only if valid\n                        $.datepicker._setDateFromField(inst);\n                        $.datepicker._updateAlternate(inst);\n                        $.datepicker._updateDatepicker(inst);\n                    }\n                } catch (err) {\n                }\n            }\n            return true;\n        },\n\n        /* Pop-up the date picker for a given input field.\n         * If false returned from beforeShow event handler do not show.\n         * @param  input  element - the input field attached to the date picker or\n         *\t\t\t\t\tevent - if triggered by focus\n         */\n        _showDatepicker: function (input) {\n            input = input.target || input;\n            if (input.nodeName.toLowerCase() !== \"input\") { // find from button/image trigger\n                input = $(\"input\", input.parentNode)[0];\n            }\n\n            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) { // already here\n                return;\n            }\n\n            var inst, beforeShow, beforeShowSettings, isFixed,\n                offset, showAnim, duration;\n\n            inst = $.datepicker._getInst(input);\n            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {\n                $.datepicker._curInst.dpDiv.stop(true, true);\n                if (inst && $.datepicker._datepickerShowing) {\n                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);\n                }\n            }\n\n            beforeShow = $.datepicker._get(inst, \"beforeShow\");\n            beforeShowSettings = beforeShow ? beforeShow.apply(input, [input, inst]) : {};\n            if (beforeShowSettings === false) {\n                return;\n            }\n            extendRemove(inst.settings, beforeShowSettings);\n\n            inst.lastVal = null;\n            $.datepicker._lastInput = input;\n            $.datepicker._setDateFromField(inst);\n\n            if ($.datepicker._inDialog) { // hide cursor\n                input.value = \"\";\n            }\n            if (!$.datepicker._pos) { // position below input\n                $.datepicker._pos = $.datepicker._findPos(input);\n                $.datepicker._pos[1] += input.offsetHeight; // add the height\n            }\n\n            isFixed = false;\n            $(input).parents().each(function () {\n                isFixed |= $(this).css(\"position\") === \"fixed\";\n                return !isFixed;\n            });\n\n            offset = {left: $.datepicker._pos[0], top: $.datepicker._pos[1]};\n            $.datepicker._pos = null;\n            //to avoid flashes on Firefox\n            inst.dpDiv.empty();\n            // determine sizing offscreen\n            inst.dpDiv.css({position: \"absolute\", display: \"block\", top: \"-1000px\"});\n            $.datepicker._updateDatepicker(inst);\n            // fix width for dynamic number of date pickers\n            // and adjust position before showing\n            offset = $.datepicker._checkOffset(inst, offset, isFixed);\n            inst.dpDiv.css({\n                position: ($.datepicker._inDialog && $.blockUI ?\n                    \"static\" : (isFixed ? \"fixed\" : \"absolute\")), display: \"none\",\n                left: offset.left + \"px\", top: offset.top + \"px\"\n            });\n\n            if (!inst.inline) {\n                showAnim = $.datepicker._get(inst, \"showAnim\");\n                duration = $.datepicker._get(inst, \"duration\");\n                inst.dpDiv.zIndex($(input).zIndex() + 1);\n                $.datepicker._datepickerShowing = true;\n\n                if ($.effects && $.effects.effect[showAnim]) {\n                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, \"showOptions\"), duration);\n                } else {\n                    inst.dpDiv[showAnim || \"show\"](showAnim ? duration : null);\n                }\n\n                if ($.datepicker._shouldFocusInput(inst)) {\n                    inst.input.focus();\n                }\n\n                $.datepicker._curInst = inst;\n            }\n        },\n\n        /* Generate the date picker content. */\n        _updateDatepicker: function (inst) {\n            this.maxRows = 4; //Reset the max number of rows being displayed (see #7043)\n            instActive = inst; // for delegate hover events\n            inst.dpDiv.empty().append(this._generateHTML(inst));\n            this._attachHandlers(inst);\n            inst.dpDiv.find(\".\" + this._dayOverClass + \" a\").mouseover();\n\n            var origyearshtml,\n                numMonths = this._getNumberOfMonths(inst),\n                cols = numMonths[1],\n                width = 17;\n\n            inst.dpDiv.removeClass(\"ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4\").width(\"\");\n            if (cols > 1) {\n                inst.dpDiv.addClass(\"ui-datepicker-multi-\" + cols).css(\"width\", (width * cols) + \"em\");\n            }\n            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? \"add\" : \"remove\") +\n            \"Class\"](\"ui-datepicker-multi\");\n            inst.dpDiv[(this._get(inst, \"isRTL\") ? \"add\" : \"remove\") +\n            \"Class\"](\"ui-datepicker-rtl\");\n\n            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {\n                inst.input.focus();\n            }\n\n            // deffered render of the years select (to avoid flashes on Firefox)\n            if (inst.yearshtml) {\n                origyearshtml = inst.yearshtml;\n                setTimeout(function () {\n                    //assure that inst.yearshtml didn't change.\n                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {\n                        inst.dpDiv.find(\"select.ui-datepicker-year:first\").replaceWith(inst.yearshtml);\n                    }\n                    origyearshtml = inst.yearshtml = null;\n                }, 0);\n            }\n        },\n\n        // #6694 - don't focus the input if it's already focused\n        // this breaks the change event in IE\n        // Support: IE and jQuery <1.9\n        _shouldFocusInput: function (inst) {\n            return inst.input && inst.input.is(\":visible\") && !inst.input.is(\":disabled\") && !inst.input.is(\":focus\");\n        },\n\n        /* Check positioning to remain on screen. */\n        _checkOffset: function (inst, offset, isFixed) {\n            var dpWidth = inst.dpDiv.outerWidth(),\n                dpHeight = inst.dpDiv.outerHeight(),\n                inputWidth = inst.input ? inst.input.outerWidth() : 0,\n                inputHeight = inst.input ? inst.input.outerHeight() : 0,\n                viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()),\n                viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());\n\n            offset.left -= (this._get(inst, \"isRTL\") ? (dpWidth - inputWidth) : 0);\n            offset.left -= (isFixed && offset.left === inst.input.offset().left) ? $(document).scrollLeft() : 0;\n            offset.top -= (isFixed && offset.top === (inst.input.offset().top + inputHeight)) ? $(document).scrollTop() : 0;\n\n            // now check if datepicker is showing outside window viewport - move to a better place if so.\n            offset.left -= Math.min(offset.left, (offset.left + dpWidth > viewWidth && viewWidth > dpWidth) ?\n                Math.abs(offset.left + dpWidth - viewWidth) : 0);\n            offset.top -= Math.min(offset.top, (offset.top + dpHeight > viewHeight && viewHeight > dpHeight) ?\n                Math.abs(dpHeight + inputHeight) : 0);\n\n            return offset;\n        },\n\n        /* Find an object's position on the screen. */\n        _findPos: function (obj) {\n            var position,\n                inst = this._getInst(obj),\n                isRTL = this._get(inst, \"isRTL\");\n\n            while (obj && (obj.type === \"hidden\" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {\n                obj = obj[isRTL ? \"previousSibling\" : \"nextSibling\"];\n            }\n\n            position = $(obj).offset();\n            return [position.left, position.top];\n        },\n\n        /* Hide the date picker from view.\n         * @param  input  element - the input field attached to the date picker\n         */\n        _hideDatepicker: function (input) {\n            var showAnim, duration, postProcess, onClose,\n                inst = this._curInst;\n\n            if (!inst || (input && inst !== $.data(input, PROP_NAME))) {\n                return;\n            }\n\n            if (this._datepickerShowing) {\n                showAnim = this._get(inst, \"showAnim\");\n                duration = this._get(inst, \"duration\");\n                postProcess = function () {\n                    $.datepicker._tidyDialog(inst);\n                };\n\n                // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed\n                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {\n                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, \"showOptions\"), duration, postProcess);\n                } else {\n                    inst.dpDiv[(showAnim === \"slideDown\" ? \"slideUp\" :\n                        (showAnim === \"fadeIn\" ? \"fadeOut\" : \"hide\"))]((showAnim ? duration : null), postProcess);\n                }\n\n                if (!showAnim) {\n                    postProcess();\n                }\n                this._datepickerShowing = false;\n\n                onClose = this._get(inst, \"onClose\");\n                if (onClose) {\n                    onClose.apply((inst.input ? inst.input[0] : null), [(inst.input ? inst.input.val() : \"\"), inst]);\n                }\n\n                this._lastInput = null;\n                if (this._inDialog) {\n                    this._dialogInput.css({position: \"absolute\", left: \"0\", top: \"-100px\"});\n                    if ($.blockUI) {\n                        $.unblockUI();\n                        $(\"body\").append(this.dpDiv);\n                    }\n                }\n                this._inDialog = false;\n            }\n        },\n\n        /* Tidy up after a dialog display. */\n        _tidyDialog: function (inst) {\n            inst.dpDiv.removeClass(this._dialogClass).unbind(\".ui-datepicker-calendar\");\n        },\n\n        /* Close date picker if clicked elsewhere. */\n        _checkExternalClick: function (event) {\n            if (!$.datepicker._curInst) {\n                return;\n            }\n\n            var $target = $(event.target),\n                inst = $.datepicker._getInst($target[0]);\n\n            if ((($target[0].id !== $.datepicker._mainDivId &&\n                $target.parents(\"#\" + $.datepicker._mainDivId).length === 0 &&\n                !$target.hasClass($.datepicker.markerClassName) &&\n                !$target.closest(\".\" + $.datepicker._triggerClass).length &&\n                $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI))) ||\n                ($target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst)) {\n                $.datepicker._hideDatepicker();\n            }\n        },\n\n        /* Adjust one of the date sub-fields. */\n        _adjustDate: function (id, offset, period) {\n            var target = $(id),\n                inst = this._getInst(target[0]);\n\n            if (this._isDisabledDatepicker(target[0])) {\n                return;\n            }\n            this._adjustInstDate(inst, offset +\n                (period === \"M\" ? this._get(inst, \"showCurrentAtPos\") : 0), // undo positioning\n                period);\n            this._updateDatepicker(inst);\n        },\n\n        /* Action for current link. */\n        _gotoToday: function (id) {\n            var date,\n                target = $(id),\n                inst = this._getInst(target[0]);\n\n            if (this._get(inst, \"gotoCurrent\") && inst.currentDay) {\n                inst.selectedDay = inst.currentDay;\n                inst.drawMonth = inst.selectedMonth = inst.currentMonth;\n                inst.drawYear = inst.selectedYear = inst.currentYear;\n            } else {\n                date = new Date();\n                inst.selectedDay = date.getDate();\n                inst.drawMonth = inst.selectedMonth = date.getMonth();\n                inst.drawYear = inst.selectedYear = date.getFullYear();\n            }\n            this._notifyChange(inst);\n            this._adjustDate(target);\n        },\n\n        /* Action for selecting a new month/year. */\n        _selectMonthYear: function (id, select, period) {\n            var target = $(id),\n                inst = this._getInst(target[0]);\n\n            inst[\"selected\" + (period === \"M\" ? \"Month\" : \"Year\")] =\n                inst[\"draw\" + (period === \"M\" ? \"Month\" : \"Year\")] =\n                    parseInt(select.options[select.selectedIndex].value, 10);\n\n            this._notifyChange(inst);\n            this._adjustDate(target);\n        },\n\n        /* Action for selecting a day. */\n        _selectDay: function (id, month, year, td) {\n            var inst,\n                target = $(id);\n\n            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {\n                return;\n            }\n\n            inst = this._getInst(target[0]);\n            inst.selectedDay = inst.currentDay = $(\"a\", td).html();\n            inst.selectedMonth = inst.currentMonth = month;\n            inst.selectedYear = inst.currentYear = year;\n            this._selectDate(id, this._formatDate(inst,\n                inst.currentDay, inst.currentMonth, inst.currentYear));\n        },\n\n        /* Erase the input field and hide the date picker. */\n        _clearDate: function (id) {\n            var target = $(id);\n            this._selectDate(target, \"\");\n        },\n\n        /* Update the input field with the selected date. */\n        _selectDate: function (id, dateStr) {\n            var onSelect,\n                target = $(id),\n                inst = this._getInst(target[0]);\n\n            dateStr = (dateStr != null ? dateStr : this._formatDate(inst));\n            if (inst.input) {\n                inst.input.val(dateStr);\n            }\n            this._updateAlternate(inst);\n\n            onSelect = this._get(inst, \"onSelect\");\n            if (onSelect) {\n                onSelect.apply((inst.input ? inst.input[0] : null), [dateStr, inst]);  // trigger custom callback\n            } else if (inst.input) {\n                inst.input.trigger(\"change\"); // fire the change event\n            }\n\n            if (inst.inline) {\n                this._updateDatepicker(inst);\n            } else {\n                this._hideDatepicker();\n                this._lastInput = inst.input[0];\n                if (typeof (inst.input[0]) !== \"object\") {\n                    inst.input.focus(); // restore focus\n                }\n                this._lastInput = null;\n            }\n        },\n\n        /* Update any alternate field to synchronise with the main field. */\n        _updateAlternate: function (inst) {\n            var altFormat, date, dateStr,\n                altField = this._get(inst, \"altField\");\n\n            if (altField) { // update alternate field too\n                altFormat = this._get(inst, \"altFormat\") || this._get(inst, \"dateFormat\");\n                date = this._getDate(inst);\n                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));\n                $(altField).each(function () {\n                    $(this).val(dateStr);\n                });\n            }\n        },\n\n        /* Set as beforeShowDay function to prevent selection of weekends.\n         * @param  date  Date - the date to customise\n         * @return [boolean, string] - is this date selectable?, what is its CSS class?\n         */\n        noWeekends: function (date) {\n            var day = date.getDay();\n            return [(day > 0 && day < 6), \"\"];\n        },\n\n        /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.\n         * @param  date  Date - the date to get the week for\n         * @return  number - the number of the week within the year that contains this date\n         */\n        iso8601Week: function (date) {\n            var time,\n                checkDate = new Date(date.getTime());\n\n            // Find Thursday of this week starting on Monday\n            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));\n\n            time = checkDate.getTime();\n            checkDate.setMonth(0); // Compare with Jan 1\n            checkDate.setDate(1);\n            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;\n        },\n\n        /* Parse a string value into a date object.\n         * See formatDate below for the possible formats.\n         *\n         * @param  format string - the expected format of the date\n         * @param  value string - the date in the above format\n         * @param  settings Object - attributes include:\n         *\t\t\t\t\tshortYearCutoff  number - the cutoff year for determining the century (optional)\n         *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n         *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n         *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n         *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n         * @return  Date - the extracted date value or null if value is blank\n         */\n        parseDate: function (format, value, settings) {\n            if (format == null || value == null) {\n                throw \"Invalid arguments\";\n            }\n\n            value = (typeof value === \"object\" ? value.toString() : value + \"\");\n            if (value === \"\") {\n                return null;\n            }\n\n            var iFormat, dim, extra,\n                iValue = 0,\n                shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff,\n                shortYearCutoff = (typeof shortYearCutoffTemp !== \"string\" ? shortYearCutoffTemp :\n                    new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10)),\n                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n                year = -1,\n                month = -1,\n                day = -1,\n                doy = -1,\n                literal = false,\n                date,\n                // Check whether a format character is doubled\n                lookAhead = function (match) {\n                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);\n                    if (matches) {\n                        iFormat++;\n                    }\n                    return matches;\n                },\n                // Extract a number from the string value\n                getNumber = function (match) {\n                    var isDoubled = lookAhead(match),\n                        size = (match === \"@\" ? 14 : (match === \"!\" ? 20 :\n                            (match === \"y\" && isDoubled ? 4 : (match === \"o\" ? 3 : 2)))),\n                        digits = new RegExp(\"^\\\\d{1,\" + size + \"}\"),\n                        num = value.substring(iValue).match(digits);\n                    if (!num) {\n                        throw \"Missing number at position \" + iValue;\n                    }\n                    iValue += num[0].length;\n                    return parseInt(num[0], 10);\n                },\n                // Extract a name from the string value and convert to an index\n                getName = function (match, shortNames, longNames) {\n                    var index = -1,\n                        names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {\n                            return [[k, v]];\n                        }).sort(function (a, b) {\n                            return -(a[1].length - b[1].length);\n                        });\n\n                    $.each(names, function (i, pair) {\n                        var name = pair[1];\n                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {\n                            index = pair[0];\n                            iValue += name.length;\n                            return false;\n                        }\n                    });\n                    if (index !== -1) {\n                        return index + 1;\n                    } else {\n                        throw \"Unknown name at position \" + iValue;\n                    }\n                },\n                // Confirm that a literal character matches the string value\n                checkLiteral = function () {\n                    if (value.charAt(iValue) !== format.charAt(iFormat)) {\n                        throw \"Unexpected literal at position \" + iValue;\n                    }\n                    iValue++;\n                };\n\n            for (iFormat = 0; iFormat < format.length; iFormat++) {\n                if (literal) {\n                    if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n                        literal = false;\n                    } else {\n                        checkLiteral();\n                    }\n                } else {\n                    switch (format.charAt(iFormat)) {\n                        case \"d\":\n                            day = getNumber(\"d\");\n                            break;\n                        case \"D\":\n                            getName(\"D\", dayNamesShort, dayNames);\n                            break;\n                        case \"o\":\n                            doy = getNumber(\"o\");\n                            break;\n                        case \"m\":\n                            month = getNumber(\"m\");\n                            break;\n                        case \"M\":\n                            month = getName(\"M\", monthNamesShort, monthNames);\n                            break;\n                        case \"y\":\n                            year = getNumber(\"y\");\n                            break;\n                        case \"@\":\n                            date = new Date(getNumber(\"@\"));\n                            year = date.getFullYear();\n                            month = date.getMonth() + 1;\n                            day = date.getDate();\n                            break;\n                        case \"!\":\n                            date = new Date((getNumber(\"!\") - this._ticksTo1970) / 10000);\n                            year = date.getFullYear();\n                            month = date.getMonth() + 1;\n                            day = date.getDate();\n                            break;\n                        case \"'\":\n                            if (lookAhead(\"'\")) {\n                                checkLiteral();\n                            } else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            checkLiteral();\n                    }\n                }\n            }\n\n            if (iValue < value.length) {\n                extra = value.substr(iValue);\n                if (!/^\\s+/.test(extra)) {\n                    throw \"Extra/unparsed characters found in date: \" + extra;\n                }\n            }\n\n            if (year === -1) {\n                year = new Date().getFullYear();\n            } else if (year < 100) {\n                year += new Date().getFullYear() - new Date().getFullYear() % 100 +\n                    (year <= shortYearCutoff ? 0 : -100);\n            }\n\n            if (doy > -1) {\n                month = 1;\n                day = doy;\n                do {\n                    dim = this._getDaysInMonth(year, month - 1);\n                    if (day <= dim) {\n                        break;\n                    }\n                    month++;\n                    day -= dim;\n                } while (true);\n            }\n\n            date = this._daylightSavingAdjust(new Date(year, month - 1, day));\n            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {\n                throw \"Invalid date\"; // E.g. 31/02/00\n            }\n            return date;\n        },\n\n        /* Standard date formats. */\n        ATOM: \"yy-mm-dd\", // RFC 3339 (ISO 8601)\n        COOKIE: \"D, dd M yy\",\n        ISO_8601: \"yy-mm-dd\",\n        RFC_822: \"D, d M y\",\n        RFC_850: \"DD, dd-M-y\",\n        RFC_1036: \"D, d M y\",\n        RFC_1123: \"D, d M yy\",\n        RFC_2822: \"D, d M yy\",\n        RSS: \"D, d M y\", // RFC 822\n        TICKS: \"!\",\n        TIMESTAMP: \"@\",\n        W3C: \"yy-mm-dd\", // ISO 8601\n\n        _ticksTo1970: (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) +\n            Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),\n\n        /* Format a date object into a string value.\n         * The format can be combinations of the following:\n         * d  - day of month (no leading zero)\n         * dd - day of month (two digit)\n         * o  - day of year (no leading zeros)\n         * oo - day of year (three digit)\n         * D  - day name short\n         * DD - day name long\n         * m  - month of year (no leading zero)\n         * mm - month of year (two digit)\n         * M  - month name short\n         * MM - month name long\n         * y  - year (two digit)\n         * yy - year (four digit)\n         * @ - Unix timestamp (ms since 01/01/1970)\n         * ! - Windows ticks (100ns since 01/01/0001)\n         * \"...\" - literal text\n         * '' - single quote\n         *\n         * @param  format string - the desired format of the date\n         * @param  date Date - the date value to format\n         * @param  settings Object - attributes include:\n         *\t\t\t\t\tdayNamesShort\tstring[7] - abbreviated names of the days from Sunday (optional)\n         *\t\t\t\t\tdayNames\t\tstring[7] - names of the days from Sunday (optional)\n         *\t\t\t\t\tmonthNamesShort string[12] - abbreviated names of the months (optional)\n         *\t\t\t\t\tmonthNames\t\tstring[12] - names of the months (optional)\n         * @return  string - the date in the above format\n         */\n        formatDate: function (format, date, settings) {\n            if (!date) {\n                return \"\";\n            }\n\n            var iFormat,\n                dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort,\n                dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames,\n                monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort,\n                monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames,\n                // Check whether a format character is doubled\n                lookAhead = function (match) {\n                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);\n                    if (matches) {\n                        iFormat++;\n                    }\n                    return matches;\n                },\n                // Format a number, with leading zero if necessary\n                formatNumber = function (match, value, len) {\n                    var num = \"\" + value;\n                    if (lookAhead(match)) {\n                        while (num.length < len) {\n                            num = \"0\" + num;\n                        }\n                    }\n                    return num;\n                },\n                // Format a name, short or long as requested\n                formatName = function (match, value, shortNames, longNames) {\n                    return (lookAhead(match) ? longNames[value] : shortNames[value]);\n                },\n                output = \"\",\n                literal = false;\n\n            if (date) {\n                for (iFormat = 0; iFormat < format.length; iFormat++) {\n                    if (literal) {\n                        if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n                            literal = false;\n                        } else {\n                            output += format.charAt(iFormat);\n                        }\n                    } else {\n                        switch (format.charAt(iFormat)) {\n                            case \"d\":\n                                output += formatNumber(\"d\", date.getDate(), 2);\n                                break;\n                            case \"D\":\n                                output += formatName(\"D\", date.getDay(), dayNamesShort, dayNames);\n                                break;\n                            case \"o\":\n                                output += formatNumber(\"o\",\n                                    Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);\n                                break;\n                            case \"m\":\n                                output += formatNumber(\"m\", date.getMonth() + 1, 2);\n                                break;\n                            case \"M\":\n                                output += formatName(\"M\", date.getMonth(), monthNamesShort, monthNames);\n                                break;\n                            case \"y\":\n                                output += (lookAhead(\"y\") ? date.getFullYear() :\n                                    (date.getYear() % 100 < 10 ? \"0\" : \"\") + date.getYear() % 100);\n                                break;\n                            case \"@\":\n                                output += date.getTime();\n                                break;\n                            case \"!\":\n                                output += date.getTime() * 10000 + this._ticksTo1970;\n                                break;\n                            case \"'\":\n                                if (lookAhead(\"'\")) {\n                                    output += \"'\";\n                                } else {\n                                    literal = true;\n                                }\n                                break;\n                            default:\n                                output += format.charAt(iFormat);\n                        }\n                    }\n                }\n            }\n            return output;\n        },\n\n        /* Extract all possible characters from the date format. */\n        _possibleChars: function (format) {\n            var iFormat,\n                chars = \"\",\n                literal = false,\n                // Check whether a format character is doubled\n                lookAhead = function (match) {\n                    var matches = (iFormat + 1 < format.length && format.charAt(iFormat + 1) === match);\n                    if (matches) {\n                        iFormat++;\n                    }\n                    return matches;\n                };\n\n            for (iFormat = 0; iFormat < format.length; iFormat++) {\n                if (literal) {\n                    if (format.charAt(iFormat) === \"'\" && !lookAhead(\"'\")) {\n                        literal = false;\n                    } else {\n                        chars += format.charAt(iFormat);\n                    }\n                } else {\n                    switch (format.charAt(iFormat)) {\n                        case \"d\":\n                        case \"m\":\n                        case \"y\":\n                        case \"@\":\n                            chars += \"0123456789\";\n                            break;\n                        case \"D\":\n                        case \"M\":\n                            return null; // Accept anything\n                        case \"'\":\n                            if (lookAhead(\"'\")) {\n                                chars += \"'\";\n                            } else {\n                                literal = true;\n                            }\n                            break;\n                        default:\n                            chars += format.charAt(iFormat);\n                    }\n                }\n            }\n            return chars;\n        },\n\n        /* Get a setting value, defaulting if necessary. */\n        _get: function (inst, name) {\n            return inst.settings[name] !== undefined ?\n                inst.settings[name] : this._defaults[name];\n        },\n\n        /* Parse existing date and initialise date picker. */\n        _setDateFromField: function (inst, noDefault) {\n            if (inst.input.val() === inst.lastVal) {\n                return;\n            }\n\n            var dateFormat = this._get(inst, \"dateFormat\"),\n                dates = inst.lastVal = inst.input ? inst.input.val() : null,\n                defaultDate = this._getDefaultDate(inst),\n                date = defaultDate,\n                settings = this._getFormatConfig(inst);\n\n            try {\n                date = this.parseDate(dateFormat, dates, settings) || defaultDate;\n            } catch (event) {\n                dates = (noDefault ? \"\" : dates);\n            }\n            inst.selectedDay = date.getDate();\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\n            inst.drawYear = inst.selectedYear = date.getFullYear();\n            inst.currentDay = (dates ? date.getDate() : 0);\n            inst.currentMonth = (dates ? date.getMonth() : 0);\n            inst.currentYear = (dates ? date.getFullYear() : 0);\n            this._adjustInstDate(inst);\n        },\n\n        /* Retrieve the default date shown on opening. */\n        _getDefaultDate: function (inst) {\n            return this._restrictMinMax(inst,\n                this._determineDate(inst, this._get(inst, \"defaultDate\"), new Date()));\n        },\n\n        /* A date may be specified as an exact value or a relative one. */\n        _determineDate: function (inst, date, defaultDate) {\n            var offsetNumeric = function (offset) {\n                    var date = new Date();\n                    date.setDate(date.getDate() + offset);\n                    return date;\n                },\n                offsetString = function (offset) {\n                    try {\n                        return $.datepicker.parseDate($.datepicker._get(inst, \"dateFormat\"),\n                            offset, $.datepicker._getFormatConfig(inst));\n                    } catch (e) {\n                        // Ignore\n                    }\n\n                    var date = (offset.toLowerCase().match(/^c/) ?\n                        $.datepicker._getDate(inst) : null) || new Date(),\n                        year = date.getFullYear(),\n                        month = date.getMonth(),\n                        day = date.getDate(),\n                        pattern = /([+\\-]?[0-9]+)\\s*(d|D|w|W|m|M|y|Y)?/g,\n                        matches = pattern.exec(offset);\n\n                    while (matches) {\n                        switch (matches[2] || \"d\") {\n                            case \"d\" :\n                            case \"D\" :\n                                day += parseInt(matches[1], 10);\n                                break;\n                            case \"w\" :\n                            case \"W\" :\n                                day += parseInt(matches[1], 10) * 7;\n                                break;\n                            case \"m\" :\n                            case \"M\" :\n                                month += parseInt(matches[1], 10);\n                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n                                break;\n                            case \"y\":\n                            case \"Y\" :\n                                year += parseInt(matches[1], 10);\n                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));\n                                break;\n                        }\n                        matches = pattern.exec(offset);\n                    }\n                    return new Date(year, month, day);\n                },\n                newDate = (date == null || date === \"\" ? defaultDate : (typeof date === \"string\" ? offsetString(date) :\n                    (typeof date === \"number\" ? (isNaN(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));\n\n            newDate = (newDate && newDate.toString() === \"Invalid Date\" ? defaultDate : newDate);\n            if (newDate) {\n                newDate.setHours(0);\n                newDate.setMinutes(0);\n                newDate.setSeconds(0);\n                newDate.setMilliseconds(0);\n            }\n            return this._daylightSavingAdjust(newDate);\n        },\n\n        /* Handle switch to/from daylight saving.\n         * Hours may be non-zero on daylight saving cut-over:\n         * > 12 when midnight changeover, but then cannot generate\n         * midnight datetime, so jump to 1AM, otherwise reset.\n         * @param  date  (Date) the date to check\n         * @return  (Date) the corrected date\n         */\n        _daylightSavingAdjust: function (date) {\n            if (!date) {\n                return null;\n            }\n            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n            return date;\n        },\n\n        /* Set the date(s) directly. */\n        _setDate: function (inst, date, noChange) {\n            var clear = !date,\n                origMonth = inst.selectedMonth,\n                origYear = inst.selectedYear,\n                newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));\n\n            inst.selectedDay = inst.currentDay = newDate.getDate();\n            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();\n            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();\n            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {\n                this._notifyChange(inst);\n            }\n            this._adjustInstDate(inst);\n            if (inst.input) {\n                inst.input.val(clear ? \"\" : this._formatDate(inst));\n            }\n        },\n\n        /* Retrieve the date(s) directly. */\n        _getDate: function (inst) {\n            var startDate = (!inst.currentYear || (inst.input && inst.input.val() === \"\") ? null :\n                this._daylightSavingAdjust(new Date(\n                    inst.currentYear, inst.currentMonth, inst.currentDay)));\n            return startDate;\n        },\n\n        /* Attach the onxxx handlers.  These are declared statically so\n         * they work with static code transformers like Caja.\n         */\n        _attachHandlers: function (inst) {\n            var stepMonths = this._get(inst, \"stepMonths\"),\n                id = \"#\" + inst.id.replace(/\\\\\\\\/g, \"\\\\\");\n            inst.dpDiv.find(\"[data-handler]\").map(function () {\n                var handler = {\n                    prev: function () {\n                        $.datepicker._adjustDate(id, -stepMonths, \"M\");\n                    },\n                    next: function () {\n                        $.datepicker._adjustDate(id, +stepMonths, \"M\");\n                    },\n                    hide: function () {\n                        $.datepicker._hideDatepicker();\n                    },\n                    today: function () {\n                        $.datepicker._gotoToday(id);\n                    },\n                    selectDay: function () {\n                        $.datepicker._selectDay(id, +this.getAttribute(\"data-month\"), +this.getAttribute(\"data-year\"), this);\n                        return false;\n                    },\n                    selectMonth: function () {\n                        $.datepicker._selectMonthYear(id, this, \"M\");\n                        return false;\n                    },\n                    selectYear: function () {\n                        $.datepicker._selectMonthYear(id, this, \"Y\");\n                        return false;\n                    }\n                };\n                $(this).bind(this.getAttribute(\"data-event\"), handler[this.getAttribute(\"data-handler\")]);\n            });\n        },\n\n        /* Generate the HTML for the current state of the date picker. */\n        _generateHTML: function (inst) {\n            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate,\n                controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin,\n                monthNames, monthNamesShort, beforeShowDay, showOtherMonths,\n                selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate,\n                cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows,\n                printDate, dRow, tbody, daySettings, otherMonth, unselectable,\n                tempDate = new Date(),\n                today = this._daylightSavingAdjust(\n                    new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time\n                isRTL = this._get(inst, \"isRTL\"),\n                showButtonPanel = this._get(inst, \"showButtonPanel\"),\n                hideIfNoPrevNext = this._get(inst, \"hideIfNoPrevNext\"),\n                navigationAsDateFormat = this._get(inst, \"navigationAsDateFormat\"),\n                numMonths = this._getNumberOfMonths(inst),\n                showCurrentAtPos = this._get(inst, \"showCurrentAtPos\"),\n                stepMonths = this._get(inst, \"stepMonths\"),\n                isMultiMonth = (numMonths[0] !== 1 || numMonths[1] !== 1),\n                currentDate = this._daylightSavingAdjust((!inst.currentDay ? new Date(9999, 9, 9) :\n                    new Date(inst.currentYear, inst.currentMonth, inst.currentDay))),\n                minDate = this._getMinMaxDate(inst, \"min\"),\n                maxDate = this._getMinMaxDate(inst, \"max\"),\n                drawMonth = inst.drawMonth - showCurrentAtPos,\n                drawYear = inst.drawYear;\n\n            if (drawMonth < 0) {\n                drawMonth += 12;\n                drawYear--;\n            }\n            if (maxDate) {\n                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),\n                    maxDate.getMonth() - (numMonths[0] * numMonths[1]) + 1, maxDate.getDate()));\n                maxDraw = (minDate && maxDraw < minDate ? minDate : maxDraw);\n                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\n                    drawMonth--;\n                    if (drawMonth < 0) {\n                        drawMonth = 11;\n                        drawYear--;\n                    }\n                }\n            }\n            inst.drawMonth = drawMonth;\n            inst.drawYear = drawYear;\n\n            prevText = this._get(inst, \"prevText\");\n            prevText = (!navigationAsDateFormat ? prevText : this.formatDate(prevText,\n                this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),\n                this._getFormatConfig(inst)));\n\n            prev = (this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?\n                \"<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'\" +\n                \" title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\" :\n                (hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='\" + prevText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"e\" : \"w\") + \"'>\" + prevText + \"</span></a>\"));\n\n            nextText = this._get(inst, \"nextText\");\n            nextText = (!navigationAsDateFormat ? nextText : this.formatDate(nextText,\n                this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),\n                this._getFormatConfig(inst)));\n\n            next = (this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?\n                \"<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'\" +\n                \" title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\" :\n                (hideIfNoPrevNext ? \"\" : \"<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='\" + nextText + \"'><span class='ui-icon ui-icon-circle-triangle-\" + (isRTL ? \"w\" : \"e\") + \"'>\" + nextText + \"</span></a>\"));\n\n            currentText = this._get(inst, \"currentText\");\n            gotoDate = (this._get(inst, \"gotoCurrent\") && inst.currentDay ? currentDate : today);\n            currentText = (!navigationAsDateFormat ? currentText :\n                this.formatDate(currentText, gotoDate, this._getFormatConfig(inst)));\n\n            controls = (!inst.inline ? \"<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>\" +\n                this._get(inst, \"closeText\") + \"</button>\" : \"\");\n\n            buttonPanel = (showButtonPanel) ? \"<div class='ui-datepicker-buttonpane ui-widget-content'>\" + (isRTL ? controls : \"\") +\n                (this._isInRange(inst, gotoDate) ? \"<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'\" +\n                    \">\" + currentText + \"</button>\" : \"\") + (isRTL ? \"\" : controls) + \"</div>\" : \"\";\n\n            firstDay = parseInt(this._get(inst, \"firstDay\"), 10);\n            firstDay = (isNaN(firstDay) ? 0 : firstDay);\n\n            showWeek = this._get(inst, \"showWeek\");\n            dayNames = this._get(inst, \"dayNames\");\n            dayNamesMin = this._get(inst, \"dayNamesMin\");\n            monthNames = this._get(inst, \"monthNames\");\n            monthNamesShort = this._get(inst, \"monthNamesShort\");\n            beforeShowDay = this._get(inst, \"beforeShowDay\");\n            showOtherMonths = this._get(inst, \"showOtherMonths\");\n            selectOtherMonths = this._get(inst, \"selectOtherMonths\");\n            defaultDate = this._getDefaultDate(inst);\n            html = \"\";\n            dow;\n            for (row = 0; row < numMonths[0]; row++) {\n                group = \"\";\n                this.maxRows = 4;\n                for (col = 0; col < numMonths[1]; col++) {\n                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\n                    cornerClass = \" ui-corner-all\";\n                    calender = \"\";\n                    if (isMultiMonth) {\n                        calender += \"<div class='ui-datepicker-group\";\n                        if (numMonths[1] > 1) {\n                            switch (col) {\n                                case 0:\n                                    calender += \" ui-datepicker-group-first\";\n                                    cornerClass = \" ui-corner-\" + (isRTL ? \"right\" : \"left\");\n                                    break;\n                                case numMonths[1] - 1:\n                                    calender += \" ui-datepicker-group-last\";\n                                    cornerClass = \" ui-corner-\" + (isRTL ? \"left\" : \"right\");\n                                    break;\n                                default:\n                                    calender += \" ui-datepicker-group-middle\";\n                                    cornerClass = \"\";\n                                    break;\n                            }\n                        }\n                        calender += \"'>\";\n                    }\n                    calender += \"<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix\" + cornerClass + \"'>\" +\n                        (/all|left/.test(cornerClass) && row === 0 ? (isRTL ? next : prev) : \"\") +\n                        (/all|right/.test(cornerClass) && row === 0 ? (isRTL ? prev : next) : \"\") +\n                        this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,\n                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\n                        \"</div><table class='ui-datepicker-calendar'><thead>\" +\n                        \"<tr>\";\n                    thead = (showWeek ? \"<th class='ui-datepicker-week-col'>\" + this._get(inst, \"weekHeader\") + \"</th>\" : \"\");\n                    for (dow = 0; dow < 7; dow++) { // days of the week\n                        day = (dow + firstDay) % 7;\n                        thead += \"<th\" + ((dow + firstDay + 6) % 7 >= 5 ? \" class='ui-datepicker-week-end'\" : \"\") + \">\" +\n                            \"<span title='\" + dayNames[day] + \"'>\" + dayNamesMin[day] + \"</span></th>\";\n                    }\n                    calender += thead + \"</tr></thead><tbody>\";\n                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\n                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\n                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\n                    }\n                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\n                    curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\n                    numRows = (isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows); //If multiple months, use the higher number of rows (see #7043)\n                    this.maxRows = numRows;\n                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\n                    for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows\n                        calender += \"<tr>\";\n                        tbody = (!showWeek ? \"\" : \"<td class='ui-datepicker-week-col'>\" +\n                            this._get(inst, \"calculateWeek\")(printDate) + \"</td>\");\n                        for (dow = 0; dow < 7; dow++) { // create date picker days\n                            daySettings = (beforeShowDay ?\n                                beforeShowDay.apply((inst.input ? inst.input[0] : null), [printDate]) : [true, \"\"]);\n                            otherMonth = (printDate.getMonth() !== drawMonth);\n                            unselectable = (otherMonth && !selectOtherMonths) || !daySettings[0] ||\n                                (minDate && printDate < minDate) || (maxDate && printDate > maxDate);\n                            tbody += \"<td class='\" +\n                                ((dow + firstDay + 6) % 7 >= 5 ? \" ui-datepicker-week-end\" : \"\") + // highlight weekends\n                                (otherMonth ? \" ui-datepicker-other-month\" : \"\") + // highlight days from other months\n                                ((printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent) || // user pressed key\n                                (defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime()) ?\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\n                                    \" \" + this._dayOverClass : \"\") + // highlight selected day\n                                (unselectable ? \" \" + this._unselectableClass + \" ui-state-disabled\" : \"\") +  // highlight unselectable days\n                                (otherMonth && !showOtherMonths ? \"\" : \" \" + daySettings[1] + // highlight custom dates\n                                    (printDate.getTime() === currentDate.getTime() ? \" \" + this._currentClass : \"\") + // highlight selected day\n                                    (printDate.getTime() === today.getTime() ? \" ui-datepicker-today\" : \"\")) + \"'\" + // highlight today (if different)\n                                ((!otherMonth || showOtherMonths) && daySettings[2] ? \" title='\" + daySettings[2].replace(/'/g, \"&#39;\") + \"'\" : \"\") + // cell title\n                                (unselectable ? \"\" : \" data-handler='selectDay' data-event='click' data-month='\" + printDate.getMonth() + \"' data-year='\" + printDate.getFullYear() + \"'\") + \">\" + // actions\n                                (otherMonth && !showOtherMonths ? \"&#xa0;\" : // display for other months\n                                    (unselectable ? \"<span class='ui-state-default'>\" + printDate.getDate() + \"</span>\" : \"<a class='ui-state-default\" +\n                                        (printDate.getTime() === today.getTime() ? \" ui-state-highlight\" : \"\") +\n                                        (printDate.getTime() === currentDate.getTime() ? \" ui-state-active\" : \"\") + // highlight selected day\n                                        (otherMonth ? \" ui-priority-secondary\" : \"\") + // distinguish dates from other months\n                                        \"' href='#'>\" + printDate.getDate() + \"</a>\")) + \"</td>\"; // display selectable date\n                            printDate.setDate(printDate.getDate() + 1);\n                            printDate = this._daylightSavingAdjust(printDate);\n                        }\n                        calender += tbody + \"</tr>\";\n                    }\n                    drawMonth++;\n                    if (drawMonth > 11) {\n                        drawMonth = 0;\n                        drawYear++;\n                    }\n                    calender += \"</tbody></table>\" + (isMultiMonth ? \"</div>\" +\n                        ((numMonths[0] > 0 && col === numMonths[1] - 1) ? \"<div class='ui-datepicker-row-break'></div>\" : \"\") : \"\");\n                    group += calender;\n                }\n                html += group;\n            }\n            html += buttonPanel;\n            inst._keyEvent = false;\n            return html;\n        },\n\n        /* Generate the month and year header. */\n        _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate,\n                                            secondary, monthNames, monthNamesShort) {\n\n            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear,\n                changeMonth = this._get(inst, \"changeMonth\"),\n                changeYear = this._get(inst, \"changeYear\"),\n                showMonthAfterYear = this._get(inst, \"showMonthAfterYear\"),\n                html = \"<div class='ui-datepicker-title'>\",\n                monthHtml = \"\";\n\n            // month selection\n            if (secondary || !changeMonth) {\n                monthHtml += \"<span class='ui-datepicker-month'>\" + monthNames[drawMonth] + \"</span>\";\n            } else {\n                inMinYear = (minDate && minDate.getFullYear() === drawYear);\n                inMaxYear = (maxDate && maxDate.getFullYear() === drawYear);\n                monthHtml += \"<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>\";\n                for (month = 0; month < 12; month++) {\n                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {\n                        monthHtml += \"<option value='\" + month + \"'\" +\n                            (month === drawMonth ? \" selected='selected'\" : \"\") +\n                            \">\" + monthNamesShort[month] + \"</option>\";\n                    }\n                }\n                monthHtml += \"</select>\";\n            }\n\n            if (!showMonthAfterYear) {\n                html += monthHtml + (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\");\n            }\n\n            // year selection\n            if (!inst.yearshtml) {\n                inst.yearshtml = \"\";\n                if (secondary || !changeYear) {\n                    html += \"<span class='ui-datepicker-year'>\" + drawYear + \"</span>\";\n                } else {\n                    // determine range of years to display\n                    years = this._get(inst, \"yearRange\").split(\":\");\n                    thisYear = new Date().getFullYear();\n                    determineYear = function (value) {\n                        var year = (value.match(/c[+\\-].*/) ? drawYear + parseInt(value.substring(1), 10) :\n                            (value.match(/[+\\-].*/) ? thisYear + parseInt(value, 10) :\n                                parseInt(value, 10)));\n                        return (isNaN(year) ? thisYear : year);\n                    };\n                    year = determineYear(years[0]);\n                    endYear = Math.max(year, determineYear(years[1] || \"\"));\n                    year = (minDate ? Math.max(year, minDate.getFullYear()) : year);\n                    endYear = (maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear);\n                    inst.yearshtml += \"<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>\";\n                    for (; year <= endYear; year++) {\n                        inst.yearshtml += \"<option value='\" + year + \"'\" +\n                            (year === drawYear ? \" selected='selected'\" : \"\") +\n                            \">\" + year + \"</option>\";\n                    }\n                    inst.yearshtml += \"</select>\";\n\n                    html += inst.yearshtml;\n                    inst.yearshtml = null;\n                }\n            }\n\n            html += this._get(inst, \"yearSuffix\");\n            if (showMonthAfterYear) {\n                html += (secondary || !(changeMonth && changeYear) ? \"&#xa0;\" : \"\") + monthHtml;\n            }\n            html += \"</div>\"; // Close datepicker_header\n            return html;\n        },\n\n        /* Adjust one of the date sub-fields. */\n        _adjustInstDate: function (inst, offset, period) {\n            var year = inst.drawYear + (period === \"Y\" ? offset : 0),\n                month = inst.drawMonth + (period === \"M\" ? offset : 0),\n                day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === \"D\" ? offset : 0),\n                date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));\n\n            inst.selectedDay = date.getDate();\n            inst.drawMonth = inst.selectedMonth = date.getMonth();\n            inst.drawYear = inst.selectedYear = date.getFullYear();\n            if (period === \"M\" || period === \"Y\") {\n                this._notifyChange(inst);\n            }\n        },\n\n        /* Ensure a date is within any min/max bounds. */\n        _restrictMinMax: function (inst, date) {\n            var minDate = this._getMinMaxDate(inst, \"min\"),\n                maxDate = this._getMinMaxDate(inst, \"max\"),\n                newDate = (minDate && date < minDate ? minDate : date);\n            return (maxDate && newDate > maxDate ? maxDate : newDate);\n        },\n\n        /* Notify change of month/year. */\n        _notifyChange: function (inst) {\n            var onChange = this._get(inst, \"onChangeMonthYear\");\n            if (onChange) {\n                onChange.apply((inst.input ? inst.input[0] : null),\n                    [inst.selectedYear, inst.selectedMonth + 1, inst]);\n            }\n        },\n\n        /* Determine the number of months to show. */\n        _getNumberOfMonths: function (inst) {\n            var numMonths = this._get(inst, \"numberOfMonths\");\n            return (numMonths == null ? [1, 1] : (typeof numMonths === \"number\" ? [1, numMonths] : numMonths));\n        },\n\n        /* Determine the current maximum date - ensure no time components are set. */\n        _getMinMaxDate: function (inst, minMax) {\n            return this._determineDate(inst, this._get(inst, minMax + \"Date\"), null);\n        },\n\n        /* Find the number of days in a given month. */\n        _getDaysInMonth: function (year, month) {\n            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();\n        },\n\n        /* Find the day of the week of the first of a month. */\n        _getFirstDayOfMonth: function (year, month) {\n            return new Date(year, month, 1).getDay();\n        },\n\n        /* Determines if we should allow a \"next/prev\" month display change. */\n        _canAdjustMonth: function (inst, offset, curYear, curMonth) {\n            var numMonths = this._getNumberOfMonths(inst),\n                date = this._daylightSavingAdjust(new Date(curYear,\n                    curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));\n\n            if (offset < 0) {\n                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));\n            }\n            return this._isInRange(inst, date);\n        },\n\n        /* Is the given date in the accepted range? */\n        _isInRange: function (inst, date) {\n            var yearSplit, currentYear,\n                minDate = this._getMinMaxDate(inst, \"min\"),\n                maxDate = this._getMinMaxDate(inst, \"max\"),\n                minYear = null,\n                maxYear = null,\n                years = this._get(inst, \"yearRange\");\n            if (years) {\n                yearSplit = years.split(\":\");\n                currentYear = new Date().getFullYear();\n                minYear = parseInt(yearSplit[0], 10);\n                maxYear = parseInt(yearSplit[1], 10);\n                if (yearSplit[0].match(/[+\\-].*/)) {\n                    minYear += currentYear;\n                }\n                if (yearSplit[1].match(/[+\\-].*/)) {\n                    maxYear += currentYear;\n                }\n            }\n\n            return ((!minDate || date.getTime() >= minDate.getTime()) &&\n                (!maxDate || date.getTime() <= maxDate.getTime()) &&\n                (!minYear || date.getFullYear() >= minYear) &&\n                (!maxYear || date.getFullYear() <= maxYear));\n        },\n\n        /* Provide the configuration settings for formatting/parsing. */\n        _getFormatConfig: function (inst) {\n            var shortYearCutoff = this._get(inst, \"shortYearCutoff\");\n            shortYearCutoff = (typeof shortYearCutoff !== \"string\" ? shortYearCutoff :\n                new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10));\n            return {\n                shortYearCutoff: shortYearCutoff,\n                dayNamesShort: this._get(inst, \"dayNamesShort\"), dayNames: this._get(inst, \"dayNames\"),\n                monthNamesShort: this._get(inst, \"monthNamesShort\"), monthNames: this._get(inst, \"monthNames\")\n            };\n        },\n\n        /* Format the given date for display. */\n        _formatDate: function (inst, day, month, year) {\n            if (!day) {\n                inst.currentDay = inst.selectedDay;\n                inst.currentMonth = inst.selectedMonth;\n                inst.currentYear = inst.selectedYear;\n            }\n            var date = (day ? (typeof day === \"object\" ? day :\n                this._daylightSavingAdjust(new Date(year, month, day))) :\n                this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay)));\n            return this.formatDate(this._get(inst, \"dateFormat\"), date, this._getFormatConfig(inst));\n        }\n    });\n\n    /*\n     * Bind hover events for datepicker elements.\n     * Done via delegate so the binding only occurs once in the lifetime of the parent div.\n     * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.\n     */\n    function bindHover(dpDiv) {\n        var selector = \"button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a\";\n        return dpDiv.delegate(selector, \"mouseout\", function () {\n            $(this).removeClass(\"ui-state-hover\");\n            if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n                $(this).removeClass(\"ui-datepicker-prev-hover\");\n            }\n            if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n                $(this).removeClass(\"ui-datepicker-next-hover\");\n            }\n        })\n            .delegate(selector, \"mouseover\", function () {\n                if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {\n                    $(this).parents(\".ui-datepicker-calendar\").find(\"a\").removeClass(\"ui-state-hover\");\n                    $(this).addClass(\"ui-state-hover\");\n                    if (this.className.indexOf(\"ui-datepicker-prev\") !== -1) {\n                        $(this).addClass(\"ui-datepicker-prev-hover\");\n                    }\n                    if (this.className.indexOf(\"ui-datepicker-next\") !== -1) {\n                        $(this).addClass(\"ui-datepicker-next-hover\");\n                    }\n                }\n            });\n    }\n\n    /* jQuery extend now ignores nulls! */\n    function extendRemove(target, props) {\n        $.extend(target, props);\n        for (var name in props) {\n            if (props[name] == null) {\n                target[name] = props[name];\n            }\n        }\n        return target;\n    }\n\n    /* Invoke the datepicker functionality.\n       @param  options  string - a command, optionally followed by additional parameters or\n                        Object - settings for attaching new datepicker functionality\n       @return  jQuery object */\n    $.fn.datepicker = function (options) {\n\n        /* Verify an empty collection wasn't passed - Fixes #6976 */\n        if (!this.length) {\n            return this;\n        }\n\n        /* Initialise the date picker. */\n        if (!$.datepicker.initialized) {\n            $(document).mousedown($.datepicker._checkExternalClick);\n            $.datepicker.initialized = true;\n        }\n\n        /* Append datepicker main container to body if not exist. */\n        if ($(\"#\" + $.datepicker._mainDivId).length === 0) {\n            $(\"body\").append($.datepicker.dpDiv);\n        }\n\n        var otherArgs = Array.prototype.slice.call(arguments, 1);\n        if (typeof options === \"string\" && (options === \"isDisabled\" || options === \"getDate\" || options === \"widget\")) {\n            return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n        }\n        if (options === \"option\" && arguments.length === 2 && typeof arguments[1] === \"string\") {\n            return $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this[0]].concat(otherArgs));\n        }\n        return this.each(function () {\n            typeof options === \"string\" ?\n                $.datepicker[\"_\" + options + \"Datepicker\"].apply($.datepicker, [this].concat(otherArgs)) :\n                $.datepicker._attachDatepicker(this, options);\n        });\n    };\n\n    $.datepicker = new Datepicker(); // singleton instance\n    $.datepicker.initialized = false;\n    $.datepicker.uuid = new Date().getTime();\n    $.datepicker.version = \"1.10.4\";\n\n});\n","jquery/ui-modules/tabs.js":"/*!\n * jQuery UI Tabs - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/tabs/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget'\n], function ($, undefined) {\n\n    var tabId = 0,\n        rhash = /#.*$/;\n\n    function getNextTabId() {\n        return ++tabId;\n    }\n\n    function isLocal(anchor) {\n        // support: IE7\n        // IE7 doesn't normalize the href property when set via script (#9317)\n        anchor = anchor.cloneNode(false);\n\n        return anchor.hash.length > 1 &&\n            decodeURIComponent(anchor.href.replace(rhash, \"\")) ===\n            decodeURIComponent(location.href.replace(rhash, \"\"));\n    }\n\n    $.widget(\"ui.tabs\", {\n        version: \"1.10.4\",\n        delay: 300,\n        options: {\n            active: null,\n            collapsible: false,\n            event: \"click\",\n            heightStyle: \"content\",\n            hide: null,\n            show: null,\n\n            // callbacks\n            activate: null,\n            beforeActivate: null,\n            beforeLoad: null,\n            load: null\n        },\n\n        _create: function () {\n            var that = this,\n                options = this.options;\n\n            this.running = false;\n\n            this.element\n                .addClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all\")\n                .toggleClass(\"ui-tabs-collapsible\", options.collapsible)\n                // Prevent users from focusing disabled tabs via click\n                .delegate(\".ui-tabs-nav > li\", \"mousedown\" + this.eventNamespace, function (event) {\n                    if ($(this).is(\".ui-state-disabled\")) {\n                        event.preventDefault();\n                    }\n                })\n                // support: IE <9\n                // Preventing the default action in mousedown doesn't prevent IE\n                // from focusing the element, so if the anchor gets focused, blur.\n                // We don't have to worry about focusing the previously focused\n                // element since clicking on a non-focusable element should focus\n                // the body anyway.\n                .delegate(\".ui-tabs-anchor\", \"focus\" + this.eventNamespace, function () {\n                    if ($(this).closest(\"li\").is(\".ui-state-disabled\")) {\n                        this.blur();\n                    }\n                });\n\n            this._processTabs();\n            options.active = this._initialActive();\n\n            // Take disabling tabs via class attribute from HTML\n            // into account and update option properly.\n            if ($.isArray(options.disabled)) {\n                options.disabled = $.unique(options.disabled.concat(\n                    $.map(this.tabs.filter(\".ui-state-disabled\"), function (li) {\n                        return that.tabs.index(li);\n                    })\n                )).sort();\n            }\n\n            // check for length avoids error when initializing empty list\n            if (this.options.active !== false && this.anchors.length) {\n                this.active = this._findActive(options.active);\n            } else {\n                this.active = $();\n            }\n\n            this._refresh();\n\n            if (this.active.length) {\n                this.load(options.active);\n            }\n        },\n\n        _initialActive: function () {\n            var active = this.options.active,\n                collapsible = this.options.collapsible,\n                locationHash = location.hash.substring(1);\n\n            if (active === null) {\n                // check the fragment identifier in the URL\n                if (locationHash) {\n                    this.tabs.each(function (i, tab) {\n                        if ($(tab).attr(\"aria-controls\") === locationHash) {\n                            active = i;\n                            return false;\n                        }\n                    });\n                }\n\n                // check for a tab marked active via a class\n                if (active === null) {\n                    active = this.tabs.index(this.tabs.filter(\".ui-tabs-active\"));\n                }\n\n                // no active tab, set to false\n                if (active === null || active === -1) {\n                    active = this.tabs.length ? 0 : false;\n                }\n            }\n\n            // handle numbers: negative, out of range\n            if (active !== false) {\n                active = this.tabs.index(this.tabs.eq(active));\n                if (active === -1) {\n                    active = collapsible ? false : 0;\n                }\n            }\n\n            // don't allow collapsible: false and active: false\n            if (!collapsible && active === false && this.anchors.length) {\n                active = 0;\n            }\n\n            return active;\n        },\n\n        _getCreateEventData: function () {\n            return {\n                tab: this.active,\n                panel: !this.active.length ? $() : this._getPanelForTab(this.active)\n            };\n        },\n\n        _tabKeydown: function (event) {\n            var focusedTab = $(this.document[0].activeElement).closest(\"li\"),\n                selectedIndex = this.tabs.index(focusedTab),\n                goingForward = true;\n\n            if (this._handlePageNav(event)) {\n                return;\n            }\n\n            switch (event.keyCode) {\n                case $.ui.keyCode.RIGHT:\n                case $.ui.keyCode.DOWN:\n                    selectedIndex++;\n                    break;\n                case $.ui.keyCode.UP:\n                case $.ui.keyCode.LEFT:\n                    goingForward = false;\n                    selectedIndex--;\n                    break;\n                case $.ui.keyCode.END:\n                    selectedIndex = this.anchors.length - 1;\n                    break;\n                case $.ui.keyCode.HOME:\n                    selectedIndex = 0;\n                    break;\n                case $.ui.keyCode.SPACE:\n                    // Activate only, no collapsing\n                    event.preventDefault();\n                    clearTimeout(this.activating);\n                    this._activate(selectedIndex);\n                    return;\n                case $.ui.keyCode.ENTER:\n                    // Toggle (cancel delayed activation, allow collapsing)\n                    event.preventDefault();\n                    clearTimeout(this.activating);\n                    // Determine if we should collapse or activate\n                    this._activate(selectedIndex === this.options.active ? false : selectedIndex);\n                    return;\n                default:\n                    return;\n            }\n\n            // Focus the appropriate tab, based on which key was pressed\n            event.preventDefault();\n            clearTimeout(this.activating);\n            selectedIndex = this._focusNextTab(selectedIndex, goingForward);\n\n            // Navigating with control key will prevent automatic activation\n            if (!event.ctrlKey) {\n                // Update aria-selected immediately so that AT think the tab is already selected.\n                // Otherwise AT may confuse the user by stating that they need to activate the tab,\n                // but the tab will already be activated by the time the announcement finishes.\n                focusedTab.attr(\"aria-selected\", \"false\");\n                this.tabs.eq(selectedIndex).attr(\"aria-selected\", \"true\");\n\n                this.activating = this._delay(function () {\n                    this.option(\"active\", selectedIndex);\n                }, this.delay);\n            }\n        },\n\n        _panelKeydown: function (event) {\n            if (this._handlePageNav(event)) {\n                return;\n            }\n\n            // Ctrl+up moves focus to the current tab\n            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {\n                event.preventDefault();\n                this.active.focus();\n            }\n        },\n\n        // Alt+page up/down moves focus to the previous/next tab (and activates)\n        _handlePageNav: function (event) {\n            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {\n                this._activate(this._focusNextTab(this.options.active - 1, false));\n                return true;\n            }\n            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {\n                this._activate(this._focusNextTab(this.options.active + 1, true));\n                return true;\n            }\n        },\n\n        _findNextTab: function (index, goingForward) {\n            var lastTabIndex = this.tabs.length - 1;\n\n            function constrain() {\n                if (index > lastTabIndex) {\n                    index = 0;\n                }\n                if (index < 0) {\n                    index = lastTabIndex;\n                }\n                return index;\n            }\n\n            while ($.inArray(constrain(), this.options.disabled) !== -1) {\n                index = goingForward ? index + 1 : index - 1;\n            }\n\n            return index;\n        },\n\n        _focusNextTab: function (index, goingForward) {\n            index = this._findNextTab(index, goingForward);\n            this.tabs.eq(index).focus();\n            return index;\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"active\") {\n                // _activate() will handle invalid values and update this.options\n                this._activate(value);\n                return;\n            }\n\n            if (key === \"disabled\") {\n                // don't use the widget factory's disabled handling\n                this._setupDisabled(value);\n                return;\n            }\n\n            this._super(key, value);\n\n            if (key === \"collapsible\") {\n                this.element.toggleClass(\"ui-tabs-collapsible\", value);\n                // Setting collapsible: false while collapsed; open first panel\n                if (!value && this.options.active === false) {\n                    this._activate(0);\n                }\n            }\n\n            if (key === \"event\") {\n                this._setupEvents(value);\n            }\n\n            if (key === \"heightStyle\") {\n                this._setupHeightStyle(value);\n            }\n        },\n\n        _tabId: function (tab) {\n            return tab.attr(\"aria-controls\") || \"ui-tabs-\" + getNextTabId();\n        },\n\n        _sanitizeSelector: function (hash) {\n            return hash ? hash.replace(/[!\"$%&'()*+,.\\/:;<=>?@\\[\\]\\^`{|}~]/g, \"\\\\$&\") : \"\";\n        },\n\n        refresh: function () {\n            var options = this.options,\n                lis = this.tablist.children(\":has(a[href])\");\n\n            // get disabled tabs from class attribute from HTML\n            // this will get converted to a boolean if needed in _refresh()\n            options.disabled = $.map(lis.filter(\".ui-state-disabled\"), function (tab) {\n                return lis.index(tab);\n            });\n\n            this._processTabs();\n\n            // was collapsed or no tabs\n            if (options.active === false || !this.anchors.length) {\n                options.active = false;\n                this.active = $();\n                // was active, but active tab is gone\n            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {\n                // all remaining tabs are disabled\n                if (this.tabs.length === options.disabled.length) {\n                    options.active = false;\n                    this.active = $();\n                    // activate previous tab\n                } else {\n                    this._activate(this._findNextTab(Math.max(0, options.active - 1), false));\n                }\n                // was active, active tab still exists\n            } else {\n                // make sure active index is correct\n                options.active = this.tabs.index(this.active);\n            }\n\n            this._refresh();\n        },\n\n        _refresh: function () {\n            this._setupDisabled(this.options.disabled);\n            this._setupEvents(this.options.event);\n            this._setupHeightStyle(this.options.heightStyle);\n\n            this.tabs.not(this.active).attr({\n                \"aria-selected\": \"false\",\n                tabIndex: -1\n            });\n            this.panels.not(this._getPanelForTab(this.active))\n                .hide()\n                .attr({\n                    \"aria-expanded\": \"false\",\n                    \"aria-hidden\": \"true\"\n                });\n\n            // Make sure one tab is in the tab order\n            if (!this.active.length) {\n                this.tabs.eq(0).attr(\"tabIndex\", 0);\n            } else {\n                this.active\n                    .addClass(\"ui-tabs-active ui-state-active\")\n                    .attr({\n                        \"aria-selected\": \"true\",\n                        tabIndex: 0\n                    });\n                this._getPanelForTab(this.active)\n                    .show()\n                    .attr({\n                        \"aria-expanded\": \"true\",\n                        \"aria-hidden\": \"false\"\n                    });\n            }\n        },\n\n        _processTabs: function () {\n            var that = this;\n\n            this.tablist = this._getList()\n                .addClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\n                .attr(\"role\", \"tablist\");\n\n            this.tabs = this.tablist.find(\"> li:has(a[href])\")\n                .addClass(\"ui-state-default ui-corner-top\")\n                .attr({\n                    role: \"tab\",\n                    tabIndex: -1\n                });\n\n            this.anchors = this.tabs.map(function () {\n                return $(\"a\", this)[0];\n            })\n                .addClass(\"ui-tabs-anchor\")\n                .attr({\n                    role: \"presentation\",\n                    tabIndex: -1\n                });\n\n            this.panels = $();\n\n            this.anchors.each(function (i, anchor) {\n                var selector, panel, panelId,\n                    anchorId = $(anchor).uniqueId().attr(\"id\"),\n                    tab = $(anchor).closest(\"li\"),\n                    originalAriaControls = tab.attr(\"aria-controls\");\n\n                // inline tab\n                if (isLocal(anchor)) {\n                    selector = anchor.hash;\n                    panel = that.element.find(that._sanitizeSelector(selector));\n                    // remote tab\n                } else {\n                    panelId = that._tabId(tab);\n                    selector = \"#\" + panelId;\n                    panel = that.element.find(selector);\n                    if (!panel.length) {\n                        panel = that._createPanel(panelId);\n                        panel.insertAfter(that.panels[i - 1] || that.tablist);\n                    }\n                    panel.attr(\"aria-live\", \"polite\");\n                }\n\n                if (panel.length) {\n                    that.panels = that.panels.add(panel);\n                }\n                if (originalAriaControls) {\n                    tab.data(\"ui-tabs-aria-controls\", originalAriaControls);\n                }\n                tab.attr({\n                    \"aria-controls\": selector.substring(1),\n                    \"aria-labelledby\": anchorId\n                });\n                panel.attr(\"aria-labelledby\", anchorId);\n            });\n\n            this.panels\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\n                .attr(\"role\", \"tabpanel\");\n        },\n\n        // allow overriding how to find the list for rare usage scenarios (#7715)\n        _getList: function () {\n            return this.tablist || this.element.find(\"ol,ul\").eq(0);\n        },\n\n        _createPanel: function (id) {\n            return $(\"<div>\")\n                .attr(\"id\", id)\n                .addClass(\"ui-tabs-panel ui-widget-content ui-corner-bottom\")\n                .data(\"ui-tabs-destroy\", true);\n        },\n\n        _setupDisabled: function (disabled) {\n            if ($.isArray(disabled)) {\n                if (!disabled.length) {\n                    disabled = false;\n                } else if (disabled.length === this.anchors.length) {\n                    disabled = true;\n                }\n            }\n\n            // disable tabs\n            for (var i = 0, li; (li = this.tabs[i]); i++) {\n                if (disabled === true || $.inArray(i, disabled) !== -1) {\n                    $(li)\n                        .addClass(\"ui-state-disabled\")\n                        .attr(\"aria-disabled\", \"true\");\n                } else {\n                    $(li)\n                        .removeClass(\"ui-state-disabled\")\n                        .removeAttr(\"aria-disabled\");\n                }\n            }\n\n            this.options.disabled = disabled;\n        },\n\n        _setupEvents: function (event) {\n            var events = {\n                click: function (event) {\n                    event.preventDefault();\n                }\n            };\n            if (event) {\n                $.each(event.split(\" \"), function (index, eventName) {\n                    events[eventName] = \"_eventHandler\";\n                });\n            }\n\n            this._off(this.anchors.add(this.tabs).add(this.panels));\n            this._on(this.anchors, events);\n            this._on(this.tabs, {keydown: \"_tabKeydown\"});\n            this._on(this.panels, {keydown: \"_panelKeydown\"});\n\n            this._focusable(this.tabs);\n            this._hoverable(this.tabs);\n        },\n\n        _setupHeightStyle: function (heightStyle) {\n            var maxHeight,\n                parent = this.element.parent();\n\n            if (heightStyle === \"fill\") {\n                maxHeight = parent.height();\n                maxHeight -= this.element.outerHeight() - this.element.height();\n\n                this.element.siblings(\":visible\").each(function () {\n                    var elem = $(this),\n                        position = elem.css(\"position\");\n\n                    if (position === \"absolute\" || position === \"fixed\") {\n                        return;\n                    }\n                    maxHeight -= elem.outerHeight(true);\n                });\n\n                this.element.children().not(this.panels).each(function () {\n                    maxHeight -= $(this).outerHeight(true);\n                });\n\n                this.panels.each(function () {\n                    $(this).height(Math.max(0, maxHeight -\n                        $(this).innerHeight() + $(this).height()));\n                })\n                    .css(\"overflow\", \"auto\");\n            } else if (heightStyle === \"auto\") {\n                maxHeight = 0;\n                this.panels.each(function () {\n                    maxHeight = Math.max(maxHeight, $(this).height(\"\").height());\n                }).height(maxHeight);\n            }\n        },\n\n        _eventHandler: function (event) {\n            var options = this.options,\n                active = this.active,\n                anchor = $(event.currentTarget),\n                tab = anchor.closest(\"li\"),\n                clickedIsActive = tab[0] === active[0],\n                collapsing = clickedIsActive && options.collapsible,\n                toShow = collapsing ? $() : this._getPanelForTab(tab),\n                toHide = !active.length ? $() : this._getPanelForTab(active),\n                eventData = {\n                    oldTab: active,\n                    oldPanel: toHide,\n                    newTab: collapsing ? $() : tab,\n                    newPanel: toShow\n                };\n\n            event.preventDefault();\n\n            if (tab.hasClass(\"ui-state-disabled\") ||\n                // tab is already loading\n                tab.hasClass(\"ui-tabs-loading\") ||\n                // can't switch durning an animation\n                this.running ||\n                // click on active header, but not collapsible\n                (clickedIsActive && !options.collapsible) ||\n                // allow canceling activation\n                (this._trigger(\"beforeActivate\", event, eventData) === false)) {\n                return;\n            }\n\n            options.active = collapsing ? false : this.tabs.index(tab);\n\n            this.active = clickedIsActive ? $() : tab;\n            if (this.xhr) {\n                this.xhr.abort();\n            }\n\n            if (!toHide.length && !toShow.length) {\n                $.error(\"jQuery UI Tabs: Mismatching fragment identifier.\");\n            }\n\n            if (toShow.length) {\n                this.load(this.tabs.index(tab), event);\n            }\n            this._toggle(event, eventData);\n        },\n\n        // handles show/hide for selecting tabs\n        _toggle: function (event, eventData) {\n            var that = this,\n                toShow = eventData.newPanel,\n                toHide = eventData.oldPanel;\n\n            this.running = true;\n\n            function complete() {\n                that.running = false;\n                that._trigger(\"activate\", event, eventData);\n            }\n\n            function show() {\n                eventData.newTab.closest(\"li\").addClass(\"ui-tabs-active ui-state-active\");\n\n                if (toShow.length && that.options.show) {\n                    that._show(toShow, that.options.show, complete);\n                } else {\n                    toShow.show();\n                    complete();\n                }\n            }\n\n            // start out by hiding, then showing, then completing\n            if (toHide.length && this.options.hide) {\n                this._hide(toHide, this.options.hide, function () {\n                    eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n                    show();\n                });\n            } else {\n                eventData.oldTab.closest(\"li\").removeClass(\"ui-tabs-active ui-state-active\");\n                toHide.hide();\n                show();\n            }\n\n            toHide.attr({\n                \"aria-expanded\": \"false\",\n                \"aria-hidden\": \"true\"\n            });\n            eventData.oldTab.attr(\"aria-selected\", \"false\");\n            // If we're switching tabs, remove the old tab from the tab order.\n            // If we're opening from collapsed state, remove the previous tab from the tab order.\n            // If we're collapsing, then keep the collapsing tab in the tab order.\n            if (toShow.length && toHide.length) {\n                eventData.oldTab.attr(\"tabIndex\", -1);\n            } else if (toShow.length) {\n                this.tabs.filter(function () {\n                    return $(this).attr(\"tabIndex\") === 0;\n                })\n                    .attr(\"tabIndex\", -1);\n            }\n\n            toShow.attr({\n                \"aria-expanded\": \"true\",\n                \"aria-hidden\": \"false\"\n            });\n            eventData.newTab.attr({\n                \"aria-selected\": \"true\",\n                tabIndex: 0\n            });\n        },\n\n        _activate: function (index) {\n            var anchor,\n                active = this._findActive(index);\n\n            // trying to activate the already active panel\n            if (active[0] === this.active[0]) {\n                return;\n            }\n\n            // trying to collapse, simulate a click on the current active header\n            if (!active.length) {\n                active = this.active;\n            }\n\n            anchor = active.find(\".ui-tabs-anchor\")[0];\n            this._eventHandler({\n                target: anchor,\n                currentTarget: anchor,\n                preventDefault: $.noop\n            });\n        },\n\n        _findActive: function (index) {\n            return index === false ? $() : this.tabs.eq(index);\n        },\n\n        _getIndex: function (index) {\n            // meta-function to give users option to provide a href string instead of a numerical index.\n            if (typeof index === \"string\") {\n                index = this.anchors.index(this.anchors.filter(\"[href$='\" + index + \"']\"));\n            }\n\n            return index;\n        },\n\n        _destroy: function () {\n            if (this.xhr) {\n                this.xhr.abort();\n            }\n\n            this.element.removeClass(\"ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible\");\n\n            this.tablist\n                .removeClass(\"ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all\")\n                .removeAttr(\"role\");\n\n            this.anchors\n                .removeClass(\"ui-tabs-anchor\")\n                .removeAttr(\"role\")\n                .removeAttr(\"tabIndex\")\n                .removeUniqueId();\n\n            this.tabs.add(this.panels).each(function () {\n                if ($.data(this, \"ui-tabs-destroy\")) {\n                    $(this).remove();\n                } else {\n                    $(this)\n                        .removeClass(\"ui-state-default ui-state-active ui-state-disabled \" +\n                            \"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel\")\n                        .removeAttr(\"tabIndex\")\n                        .removeAttr(\"aria-live\")\n                        .removeAttr(\"aria-busy\")\n                        .removeAttr(\"aria-selected\")\n                        .removeAttr(\"aria-labelledby\")\n                        .removeAttr(\"aria-hidden\")\n                        .removeAttr(\"aria-expanded\")\n                        .removeAttr(\"role\");\n                }\n            });\n\n            this.tabs.each(function () {\n                var li = $(this),\n                    prev = li.data(\"ui-tabs-aria-controls\");\n                if (prev) {\n                    li\n                        .attr(\"aria-controls\", prev)\n                        .removeData(\"ui-tabs-aria-controls\");\n                } else {\n                    li.removeAttr(\"aria-controls\");\n                }\n            });\n\n            this.panels.show();\n\n            if (this.options.heightStyle !== \"content\") {\n                this.panels.css(\"height\", \"\");\n            }\n        },\n\n        enable: function (index) {\n            var disabled = this.options.disabled;\n            if (disabled === false) {\n                return;\n            }\n\n            if (index === undefined) {\n                disabled = false;\n            } else {\n                index = this._getIndex(index);\n                if ($.isArray(disabled)) {\n                    disabled = $.map(disabled, function (num) {\n                        return num !== index ? num : null;\n                    });\n                } else {\n                    disabled = $.map(this.tabs, function (li, num) {\n                        return num !== index ? num : null;\n                    });\n                }\n            }\n            this._setupDisabled(disabled);\n        },\n\n        disable: function (index) {\n            var disabled = this.options.disabled;\n            if (disabled === true) {\n                return;\n            }\n\n            if (index === undefined) {\n                disabled = true;\n            } else {\n                index = this._getIndex(index);\n                if ($.inArray(index, disabled) !== -1) {\n                    return;\n                }\n                if ($.isArray(disabled)) {\n                    disabled = $.merge([index], disabled).sort();\n                } else {\n                    disabled = [index];\n                }\n            }\n            this._setupDisabled(disabled);\n        },\n\n        load: function (index, event) {\n            index = this._getIndex(index);\n            var that = this,\n                tab = this.tabs.eq(index),\n                anchor = tab.find(\".ui-tabs-anchor\"),\n                panel = this._getPanelForTab(tab),\n                eventData = {\n                    tab: tab,\n                    panel: panel\n                };\n\n            // not remote\n            if (isLocal(anchor[0])) {\n                return;\n            }\n\n            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));\n\n            // support: jQuery <1.8\n            // jQuery <1.8 returns false if the request is canceled in beforeSend,\n            // but as of 1.8, $.ajax() always returns a jqXHR object.\n            if (this.xhr && this.xhr.statusText !== \"canceled\") {\n                tab.addClass(\"ui-tabs-loading\");\n                panel.attr(\"aria-busy\", \"true\");\n\n                this.xhr\n                    .success(function (response) {\n                        // support: jQuery <1.8\n                        // http://bugs.jquery.com/ticket/11778\n                        setTimeout(function () {\n                            panel.html(response);\n                            that._trigger(\"load\", event, eventData);\n                        }, 1);\n                    })\n                    .complete(function (jqXHR, status) {\n                        // support: jQuery <1.8\n                        // http://bugs.jquery.com/ticket/11778\n                        setTimeout(function () {\n                            if (status === \"abort\") {\n                                that.panels.stop(false, true);\n                            }\n\n                            tab.removeClass(\"ui-tabs-loading\");\n                            panel.removeAttr(\"aria-busy\");\n\n                            if (jqXHR === that.xhr) {\n                                delete that.xhr;\n                            }\n                        }, 1);\n                    });\n            }\n        },\n\n        _ajaxSettings: function (anchor, event, eventData) {\n            var that = this;\n            return {\n                url: anchor.attr(\"href\"),\n                beforeSend: function (jqXHR, settings) {\n                    return that._trigger(\"beforeLoad\", event,\n                        $.extend({jqXHR: jqXHR, ajaxSettings: settings}, eventData));\n                }\n            };\n        },\n\n        _getPanelForTab: function (tab) {\n            var id = $(tab).attr(\"aria-controls\");\n            return this.element.find(this._sanitizeSelector(\"#\" + id));\n        }\n    });\n\n});\n","jquery/ui-modules/accordion.js":"/*!\n * jQuery UI Accordion - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/accordion/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget'\n], function ($, undefined) {\n\n    var uid = 0,\n        hideProps = {},\n        showProps = {};\n\n    hideProps.height = hideProps.paddingTop = hideProps.paddingBottom =\n        hideProps.borderTopWidth = hideProps.borderBottomWidth = \"hide\";\n    showProps.height = showProps.paddingTop = showProps.paddingBottom =\n        showProps.borderTopWidth = showProps.borderBottomWidth = \"show\";\n\n    $.widget(\"ui.accordion\", {\n        version: \"1.10.4\",\n        options: {\n            active: 0,\n            animate: {},\n            collapsible: false,\n            event: \"click\",\n            header: \"> li > :first-child,> :not(li):even\",\n            heightStyle: \"auto\",\n            icons: {\n                activeHeader: \"ui-icon-triangle-1-s\",\n                header: \"ui-icon-triangle-1-e\"\n            },\n\n            // callbacks\n            activate: null,\n            beforeActivate: null\n        },\n\n        _create: function () {\n            var options = this.options;\n            this.prevShow = this.prevHide = $();\n            this.element.addClass(\"ui-accordion ui-widget ui-helper-reset\")\n            // ARIA\n                .attr(\"role\", \"tablist\");\n\n            // don't allow collapsible: false and active: false / null\n            if (!options.collapsible && (options.active === false || options.active == null)) {\n                options.active = 0;\n            }\n\n            this._processPanels();\n            // handle negative values\n            if (options.active < 0) {\n                options.active += this.headers.length;\n            }\n            this._refresh();\n        },\n\n        _getCreateEventData: function () {\n            return {\n                header: this.active,\n                panel: !this.active.length ? $() : this.active.next(),\n                content: !this.active.length ? $() : this.active.next()\n            };\n        },\n\n        _createIcons: function () {\n            var icons = this.options.icons;\n            if (icons) {\n                $(\"<span>\")\n                    .addClass(\"ui-accordion-header-icon ui-icon \" + icons.header)\n                    .prependTo(this.headers);\n                this.active.children(\".ui-accordion-header-icon\")\n                    .removeClass(icons.header)\n                    .addClass(icons.activeHeader);\n                this.headers.addClass(\"ui-accordion-icons\");\n            }\n        },\n\n        _destroyIcons: function () {\n            this.headers\n                .removeClass(\"ui-accordion-icons\")\n                .children(\".ui-accordion-header-icon\")\n                .remove();\n        },\n\n        _destroy: function () {\n            var contents;\n\n            // clean up main element\n            this.element\n                .removeClass(\"ui-accordion ui-widget ui-helper-reset\")\n                .removeAttr(\"role\");\n\n            // clean up headers\n            this.headers\n                .removeClass(\"ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top\")\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-expanded\")\n                .removeAttr(\"aria-selected\")\n                .removeAttr(\"aria-controls\")\n                .removeAttr(\"tabIndex\")\n                .each(function () {\n                    if (/^ui-accordion/.test(this.id)) {\n                        this.removeAttribute(\"id\");\n                    }\n                });\n            this._destroyIcons();\n\n            // clean up content panels\n            contents = this.headers.next()\n                .css(\"display\", \"\")\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-hidden\")\n                .removeAttr(\"aria-labelledby\")\n                .removeClass(\"ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled\")\n                .each(function () {\n                    if (/^ui-accordion/.test(this.id)) {\n                        this.removeAttribute(\"id\");\n                    }\n                });\n            if (this.options.heightStyle !== \"content\") {\n                contents.css(\"height\", \"\");\n            }\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"active\") {\n                // _activate() will handle invalid values and update this.options\n                this._activate(value);\n                return;\n            }\n\n            if (key === \"event\") {\n                if (this.options.event) {\n                    this._off(this.headers, this.options.event);\n                }\n                this._setupEvents(value);\n            }\n\n            this._super(key, value);\n\n            // setting collapsible: false while collapsed; open first panel\n            if (key === \"collapsible\" && !value && this.options.active === false) {\n                this._activate(0);\n            }\n\n            if (key === \"icons\") {\n                this._destroyIcons();\n                if (value) {\n                    this._createIcons();\n                }\n            }\n\n            // #5332 - opacity doesn't cascade to positioned elements in IE\n            // so we need to add the disabled class to the headers and panels\n            if (key === \"disabled\") {\n                this.headers.add(this.headers.next())\n                    .toggleClass(\"ui-state-disabled\", !!value);\n            }\n        },\n\n        _keydown: function (event) {\n            if (event.altKey || event.ctrlKey) {\n                return;\n            }\n\n            var keyCode = $.ui.keyCode,\n                length = this.headers.length,\n                currentIndex = this.headers.index(event.target),\n                toFocus = false;\n\n            switch (event.keyCode) {\n                case keyCode.RIGHT:\n                case keyCode.DOWN:\n                    toFocus = this.headers[(currentIndex + 1) % length];\n                    break;\n                case keyCode.LEFT:\n                case keyCode.UP:\n                    toFocus = this.headers[(currentIndex - 1 + length) % length];\n                    break;\n                case keyCode.SPACE:\n                case keyCode.ENTER:\n                    this._eventHandler(event);\n                    break;\n                case keyCode.HOME:\n                    toFocus = this.headers[0];\n                    break;\n                case keyCode.END:\n                    toFocus = this.headers[length - 1];\n                    break;\n            }\n\n            if (toFocus) {\n                $(event.target).attr(\"tabIndex\", -1);\n                $(toFocus).attr(\"tabIndex\", 0);\n                toFocus.focus();\n                event.preventDefault();\n            }\n        },\n\n        _panelKeyDown: function (event) {\n            if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {\n                $(event.currentTarget).prev().focus();\n            }\n        },\n\n        refresh: function () {\n            var options = this.options;\n            this._processPanels();\n\n            // was collapsed or no panel\n            if ((options.active === false && options.collapsible === true) || !this.headers.length) {\n                options.active = false;\n                this.active = $();\n                // active false only when collapsible is true\n            } else if (options.active === false) {\n                this._activate(0);\n                // was active, but active panel is gone\n            } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {\n                // all remaining panel are disabled\n                if (this.headers.length === this.headers.find(\".ui-state-disabled\").length) {\n                    options.active = false;\n                    this.active = $();\n                    // activate previous panel\n                } else {\n                    this._activate(Math.max(0, options.active - 1));\n                }\n                // was active, active panel still exists\n            } else {\n                // make sure active index is correct\n                options.active = this.headers.index(this.active);\n            }\n\n            this._destroyIcons();\n\n            this._refresh();\n        },\n\n        _processPanels: function () {\n            this.headers = this.element.find(this.options.header)\n                .addClass(\"ui-accordion-header ui-helper-reset ui-state-default ui-corner-all\");\n\n            this.headers.next()\n                .addClass(\"ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom\")\n                .filter(\":not(.ui-accordion-content-active)\")\n                .hide();\n        },\n\n        _refresh: function () {\n            var maxHeight,\n                options = this.options,\n                heightStyle = options.heightStyle,\n                parent = this.element.parent(),\n                accordionId = this.accordionId = \"ui-accordion-\" +\n                    (this.element.attr(\"id\") || ++uid);\n\n            this.active = this._findActive(options.active)\n                .addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\")\n                .removeClass(\"ui-corner-all\");\n            this.active.next()\n                .addClass(\"ui-accordion-content-active\")\n                .show();\n\n            this.headers\n                .attr(\"role\", \"tab\")\n                .each(function (i) {\n                    var header = $(this),\n                        headerId = header.attr(\"id\"),\n                        panel = header.next(),\n                        panelId = panel.attr(\"id\");\n                    if (!headerId) {\n                        headerId = accordionId + \"-header-\" + i;\n                        header.attr(\"id\", headerId);\n                    }\n                    if (!panelId) {\n                        panelId = accordionId + \"-panel-\" + i;\n                        panel.attr(\"id\", panelId);\n                    }\n                    header.attr(\"aria-controls\", panelId);\n                    panel.attr(\"aria-labelledby\", headerId);\n                })\n                .next()\n                .attr(\"role\", \"tabpanel\");\n\n            this.headers\n                .not(this.active)\n                .attr({\n                    \"aria-selected\": \"false\",\n                    \"aria-expanded\": \"false\",\n                    tabIndex: -1\n                })\n                .next()\n                .attr({\n                    \"aria-hidden\": \"true\"\n                })\n                .hide();\n\n            // make sure at least one header is in the tab order\n            if (!this.active.length) {\n                this.headers.eq(0).attr(\"tabIndex\", 0);\n            } else {\n                this.active.attr({\n                    \"aria-selected\": \"true\",\n                    \"aria-expanded\": \"true\",\n                    tabIndex: 0\n                })\n                    .next()\n                    .attr({\n                        \"aria-hidden\": \"false\"\n                    });\n            }\n\n            this._createIcons();\n\n            this._setupEvents(options.event);\n\n            if (heightStyle === \"fill\") {\n                maxHeight = parent.height();\n                this.element.siblings(\":visible\").each(function () {\n                    var elem = $(this),\n                        position = elem.css(\"position\");\n\n                    if (position === \"absolute\" || position === \"fixed\") {\n                        return;\n                    }\n                    maxHeight -= elem.outerHeight(true);\n                });\n\n                this.headers.each(function () {\n                    maxHeight -= $(this).outerHeight(true);\n                });\n\n                this.headers.next()\n                    .each(function () {\n                        $(this).height(Math.max(0, maxHeight -\n                            $(this).innerHeight() + $(this).height()));\n                    })\n                    .css(\"overflow\", \"auto\");\n            } else if (heightStyle === \"auto\") {\n                maxHeight = 0;\n                this.headers.next()\n                    .each(function () {\n                        maxHeight = Math.max(maxHeight, $(this).css(\"height\", \"\").height());\n                    })\n                    .height(maxHeight);\n            }\n        },\n\n        _activate: function (index) {\n            var active = this._findActive(index)[0];\n\n            // trying to activate the already active panel\n            if (active === this.active[0]) {\n                return;\n            }\n\n            // trying to collapse, simulate a click on the currently active header\n            active = active || this.active[0];\n\n            this._eventHandler({\n                target: active,\n                currentTarget: active,\n                preventDefault: $.noop\n            });\n        },\n\n        _findActive: function (selector) {\n            return typeof selector === \"number\" ? this.headers.eq(selector) : $();\n        },\n\n        _setupEvents: function (event) {\n            var events = {\n                keydown: \"_keydown\"\n            };\n            if (event) {\n                $.each(event.split(\" \"), function (index, eventName) {\n                    events[eventName] = \"_eventHandler\";\n                });\n            }\n\n            this._off(this.headers.add(this.headers.next()));\n            this._on(this.headers, events);\n            this._on(this.headers.next(), {keydown: \"_panelKeyDown\"});\n            this._hoverable(this.headers);\n            this._focusable(this.headers);\n        },\n\n        _eventHandler: function (event) {\n            var options = this.options,\n                active = this.active,\n                clicked = $(event.currentTarget),\n                clickedIsActive = clicked[0] === active[0],\n                collapsing = clickedIsActive && options.collapsible,\n                toShow = collapsing ? $() : clicked.next(),\n                toHide = active.next(),\n                eventData = {\n                    oldHeader: active,\n                    oldPanel: toHide,\n                    newHeader: collapsing ? $() : clicked,\n                    newPanel: toShow\n                };\n\n            event.preventDefault();\n\n            if (\n                // click on active header, but not collapsible\n                (clickedIsActive && !options.collapsible) ||\n                // allow canceling activation\n                (this._trigger(\"beforeActivate\", event, eventData) === false)) {\n                return;\n            }\n\n            options.active = collapsing ? false : this.headers.index(clicked);\n\n            // when the call to ._toggle() comes after the class changes\n            // it causes a very odd bug in IE 8 (see #6720)\n            this.active = clickedIsActive ? $() : clicked;\n            this._toggle(eventData);\n\n            // switch classes\n            // corner classes on the previously active header stay after the animation\n            active.removeClass(\"ui-accordion-header-active ui-state-active\");\n            if (options.icons) {\n                active.children(\".ui-accordion-header-icon\")\n                    .removeClass(options.icons.activeHeader)\n                    .addClass(options.icons.header);\n            }\n\n            if (!clickedIsActive) {\n                clicked\n                    .removeClass(\"ui-corner-all\")\n                    .addClass(\"ui-accordion-header-active ui-state-active ui-corner-top\");\n                if (options.icons) {\n                    clicked.children(\".ui-accordion-header-icon\")\n                        .removeClass(options.icons.header)\n                        .addClass(options.icons.activeHeader);\n                }\n\n                clicked\n                    .next()\n                    .addClass(\"ui-accordion-content-active\");\n            }\n        },\n\n        _toggle: function (data) {\n            var toShow = data.newPanel,\n                toHide = this.prevShow.length ? this.prevShow : data.oldPanel;\n\n            // handle activating a panel during the animation for another activation\n            this.prevShow.add(this.prevHide).stop(true, true);\n            this.prevShow = toShow;\n            this.prevHide = toHide;\n\n            if (this.options.animate) {\n                this._animate(toShow, toHide, data);\n            } else {\n                toHide.hide();\n                toShow.show();\n                this._toggleComplete(data);\n            }\n\n            toHide.attr({\n                \"aria-hidden\": \"true\"\n            });\n            toHide.prev().attr(\"aria-selected\", \"false\");\n            // if we're switching panels, remove the old header from the tab order\n            // if we're opening from collapsed state, remove the previous header from the tab order\n            // if we're collapsing, then keep the collapsing header in the tab order\n            if (toShow.length && toHide.length) {\n                toHide.prev().attr({\n                    \"tabIndex\": -1,\n                    \"aria-expanded\": \"false\"\n                });\n            } else if (toShow.length) {\n                this.headers.filter(function () {\n                    return $(this).attr(\"tabIndex\") === 0;\n                })\n                    .attr(\"tabIndex\", -1);\n            }\n\n            toShow\n                .attr(\"aria-hidden\", \"false\")\n                .prev()\n                .attr({\n                    \"aria-selected\": \"true\",\n                    tabIndex: 0,\n                    \"aria-expanded\": \"true\"\n                });\n        },\n\n        _animate: function (toShow, toHide, data) {\n            var total, easing, duration,\n                that = this,\n                adjust = 0,\n                down = toShow.length &&\n                    (!toHide.length || (toShow.index() < toHide.index())),\n                animate = this.options.animate || {},\n                options = down && animate.down || animate,\n                complete = function () {\n                    that._toggleComplete(data);\n                };\n\n            if (typeof options === \"number\") {\n                duration = options;\n            }\n            if (typeof options === \"string\") {\n                easing = options;\n            }\n            // fall back from options to animation in case of partial down settings\n            easing = easing || options.easing || animate.easing;\n            duration = duration || options.duration || animate.duration;\n\n            if (!toHide.length) {\n                return toShow.animate(showProps, duration, easing, complete);\n            }\n            if (!toShow.length) {\n                return toHide.animate(hideProps, duration, easing, complete);\n            }\n\n            total = toShow.show().outerHeight();\n            toHide.animate(hideProps, {\n                duration: duration,\n                easing: easing,\n                step: function (now, fx) {\n                    fx.now = Math.round(now);\n                }\n            });\n            toShow\n                .hide()\n                .animate(showProps, {\n                    duration: duration,\n                    easing: easing,\n                    complete: complete,\n                    step: function (now, fx) {\n                        fx.now = Math.round(now);\n                        if (fx.prop !== \"height\") {\n                            adjust += fx.now;\n                        } else if (that.options.heightStyle !== \"content\") {\n                            fx.now = Math.round(total - toHide.outerHeight() - adjust);\n                            adjust = 0;\n                        }\n                    }\n                });\n        },\n\n        _toggleComplete: function (data) {\n            var toHide = data.oldPanel;\n\n            toHide\n                .removeClass(\"ui-accordion-content-active\")\n                .prev()\n                .removeClass(\"ui-corner-top\")\n                .addClass(\"ui-corner-all\");\n\n            // Work around for rendering bug in IE (#5421)\n            if (toHide.length) {\n                toHide.parent()[0].className = toHide.parent()[0].className;\n            }\n            this._trigger(\"activate\", null, data);\n        }\n    });\n});\n","jquery/ui-modules/droppable.js":"/*!\n * jQuery UI Droppable - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/droppable/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/draggable'\n], function ($, undefined) {\n\n    function isOverAxis(x, reference, size) {\n        return (x > reference) && (x < (reference + size));\n    }\n\n    $.widget(\"ui.droppable\", {\n        version: \"1.10.4\",\n        widgetEventPrefix: \"drop\",\n        options: {\n            accept: \"*\",\n            activeClass: false,\n            addClasses: true,\n            greedy: false,\n            hoverClass: false,\n            scope: \"default\",\n            tolerance: \"intersect\",\n\n            // callbacks\n            activate: null,\n            deactivate: null,\n            drop: null,\n            out: null,\n            over: null\n        },\n        _create: function () {\n\n            var proportions,\n                o = this.options,\n                accept = o.accept;\n\n            this.isover = false;\n            this.isout = true;\n\n            this.accept = $.isFunction(accept) ? accept : function (d) {\n                return d.is(accept);\n            };\n\n            this.proportions = function ( /* valueToWrite */) {\n                if (arguments.length) {\n                    // Store the droppable's proportions\n                    proportions = arguments[0];\n                } else {\n                    // Retrieve or derive the droppable's proportions\n                    return proportions ?\n                        proportions :\n                        proportions = {\n                            width: this.element[0].offsetWidth,\n                            height: this.element[0].offsetHeight\n                        };\n                }\n            };\n\n            // Add the reference and positions to the manager\n            $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];\n            $.ui.ddmanager.droppables[o.scope].push(this);\n\n            (o.addClasses && this.element.addClass(\"ui-droppable\"));\n\n        },\n\n        _destroy: function () {\n            var i = 0,\n                drop = $.ui.ddmanager.droppables[this.options.scope];\n\n            for (; i < drop.length; i++) {\n                if (drop[i] === this) {\n                    drop.splice(i, 1);\n                }\n            }\n\n            this.element.removeClass(\"ui-droppable ui-droppable-disabled\");\n        },\n\n        _setOption: function (key, value) {\n\n            if (key === \"accept\") {\n                this.accept = $.isFunction(value) ? value : function (d) {\n                    return d.is(value);\n                };\n            }\n            $.Widget.prototype._setOption.apply(this, arguments);\n        },\n\n        _activate: function (event) {\n            var draggable = $.ui.ddmanager.current;\n            if (this.options.activeClass) {\n                this.element.addClass(this.options.activeClass);\n            }\n            if (draggable) {\n                this._trigger(\"activate\", event, this.ui(draggable));\n            }\n        },\n\n        _deactivate: function (event) {\n            var draggable = $.ui.ddmanager.current;\n            if (this.options.activeClass) {\n                this.element.removeClass(this.options.activeClass);\n            }\n            if (draggable) {\n                this._trigger(\"deactivate\", event, this.ui(draggable));\n            }\n        },\n\n        _over: function (event) {\n\n            var draggable = $.ui.ddmanager.current;\n\n            // Bail if draggable and droppable are same element\n            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n                return;\n            }\n\n            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {\n                if (this.options.hoverClass) {\n                    this.element.addClass(this.options.hoverClass);\n                }\n                this._trigger(\"over\", event, this.ui(draggable));\n            }\n\n        },\n\n        _out: function (event) {\n\n            var draggable = $.ui.ddmanager.current;\n\n            // Bail if draggable and droppable are same element\n            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n                return;\n            }\n\n            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {\n                if (this.options.hoverClass) {\n                    this.element.removeClass(this.options.hoverClass);\n                }\n                this._trigger(\"out\", event, this.ui(draggable));\n            }\n\n        },\n\n        _drop: function (event, custom) {\n\n            var draggable = custom || $.ui.ddmanager.current,\n                childrenIntersection = false;\n\n            // Bail if draggable and droppable are same element\n            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {\n                return false;\n            }\n\n            this.element.find(\":data(ui-droppable)\").not(\".ui-draggable-dragging\").each(function () {\n                var inst = $.data(this, \"ui-droppable\");\n                if (\n                    inst.options.greedy &&\n                    !inst.options.disabled &&\n                    inst.options.scope === draggable.options.scope &&\n                    inst.accept.call(inst.element[0], (draggable.currentItem || draggable.element)) &&\n                    $.ui.intersect(draggable, $.extend(inst, {offset: inst.element.offset()}), inst.options.tolerance)\n                ) {\n                    childrenIntersection = true;\n                    return false;\n                }\n            });\n            if (childrenIntersection) {\n                return false;\n            }\n\n            if (this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {\n                if (this.options.activeClass) {\n                    this.element.removeClass(this.options.activeClass);\n                }\n                if (this.options.hoverClass) {\n                    this.element.removeClass(this.options.hoverClass);\n                }\n                this._trigger(\"drop\", event, this.ui(draggable));\n                return this.element;\n            }\n\n            return false;\n\n        },\n\n        ui: function (c) {\n            return {\n                draggable: (c.currentItem || c.element),\n                helper: c.helper,\n                position: c.position,\n                offset: c.positionAbs\n            };\n        }\n\n    });\n\n    $.ui.intersect = function (draggable, droppable, toleranceMode) {\n\n        if (!droppable.offset) {\n            return false;\n        }\n\n        var draggableLeft, draggableTop,\n            x1 = (draggable.positionAbs || draggable.position.absolute).left,\n            y1 = (draggable.positionAbs || draggable.position.absolute).top,\n            x2 = x1 + draggable.helperProportions.width,\n            y2 = y1 + draggable.helperProportions.height,\n            l = droppable.offset.left,\n            t = droppable.offset.top,\n            r = l + droppable.proportions().width,\n            b = t + droppable.proportions().height;\n\n        switch (toleranceMode) {\n            case \"fit\":\n                return (l <= x1 && x2 <= r && t <= y1 && y2 <= b);\n            case \"intersect\":\n                return (l < x1 + (draggable.helperProportions.width / 2) && // Right Half\n                    x2 - (draggable.helperProportions.width / 2) < r && // Left Half\n                    t < y1 + (draggable.helperProportions.height / 2) && // Bottom Half\n                    y2 - (draggable.helperProportions.height / 2) < b); // Top Half\n            case \"pointer\":\n                draggableLeft = ((draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left);\n                draggableTop = ((draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top);\n                return isOverAxis(draggableTop, t, droppable.proportions().height) && isOverAxis(draggableLeft, l, droppable.proportions().width);\n            case \"touch\":\n                return (\n                    (y1 >= t && y1 <= b) ||\t// Top edge touching\n                    (y2 >= t && y2 <= b) ||\t// Bottom edge touching\n                    (y1 < t && y2 > b)\t\t// Surrounded vertically\n                ) && (\n                    (x1 >= l && x1 <= r) ||\t// Left edge touching\n                    (x2 >= l && x2 <= r) ||\t// Right edge touching\n                    (x1 < l && x2 > r)\t\t// Surrounded horizontally\n                );\n            default:\n                return false;\n        }\n\n    };\n\n    /*\n        This manager tracks offsets of draggables and droppables\n    */\n    $.ui.ddmanager = {\n        current: null,\n        droppables: {\"default\": []},\n        prepareOffsets: function (t, event) {\n\n            var i, j,\n                m = $.ui.ddmanager.droppables[t.options.scope] || [],\n                type = event ? event.type : null, // workaround for #2317\n                list = (t.currentItem || t.element).find(\":data(ui-droppable)\").addBack();\n\n            droppablesLoop: for (i = 0; i < m.length; i++) {\n\n                //No disabled and non-accepted\n                if (m[i].options.disabled || (t && !m[i].accept.call(m[i].element[0], (t.currentItem || t.element)))) {\n                    continue;\n                }\n\n                // Filter out elements in the current dragged item\n                for (j = 0; j < list.length; j++) {\n                    if (list[j] === m[i].element[0]) {\n                        m[i].proportions().height = 0;\n                        continue droppablesLoop;\n                    }\n                }\n\n                m[i].visible = m[i].element.css(\"display\") !== \"none\";\n                if (!m[i].visible) {\n                    continue;\n                }\n\n                //Activate the droppable if used directly from draggables\n                if (type === \"mousedown\") {\n                    m[i]._activate.call(m[i], event);\n                }\n\n                m[i].offset = m[i].element.offset();\n                m[i].proportions({width: m[i].element[0].offsetWidth, height: m[i].element[0].offsetHeight});\n\n            }\n\n        },\n        drop: function (draggable, event) {\n\n            var dropped = false;\n            // Create a copy of the droppables in case the list changes during the drop (#9116)\n            $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {\n\n                if (!this.options) {\n                    return;\n                }\n                if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {\n                    dropped = this._drop.call(this, event) || dropped;\n                }\n\n                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], (draggable.currentItem || draggable.element))) {\n                    this.isout = true;\n                    this.isover = false;\n                    this._deactivate.call(this, event);\n                }\n\n            });\n            return dropped;\n\n        },\n        dragStart: function (draggable, event) {\n            //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)\n            draggable.element.parentsUntil(\"body\").bind(\"scroll.droppable\", function () {\n                if (!draggable.options.refreshPositions) {\n                    $.ui.ddmanager.prepareOffsets(draggable, event);\n                }\n            });\n        },\n        drag: function (draggable, event) {\n\n            //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.\n            if (draggable.options.refreshPositions) {\n                $.ui.ddmanager.prepareOffsets(draggable, event);\n            }\n\n            //Run through all droppables and check their positions based on specific tolerance options\n            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {\n\n                if (this.options.disabled || this.greedyChild || !this.visible) {\n                    return;\n                }\n\n                var parentInstance, scope, parent,\n                    intersects = $.ui.intersect(draggable, this, this.options.tolerance),\n                    c = !intersects && this.isover ? \"isout\" : (intersects && !this.isover ? \"isover\" : null);\n                if (!c) {\n                    return;\n                }\n\n                if (this.options.greedy) {\n                    // find droppable parents with same scope\n                    scope = this.options.scope;\n                    parent = this.element.parents(\":data(ui-droppable)\").filter(function () {\n                        return $.data(this, \"ui-droppable\").options.scope === scope;\n                    });\n\n                    if (parent.length) {\n                        parentInstance = $.data(parent[0], \"ui-droppable\");\n                        parentInstance.greedyChild = (c === \"isover\");\n                    }\n                }\n\n                // we just moved into a greedy child\n                if (parentInstance && c === \"isover\") {\n                    parentInstance.isover = false;\n                    parentInstance.isout = true;\n                    parentInstance._out.call(parentInstance, event);\n                }\n\n                this[c] = true;\n                this[c === \"isout\" ? \"isover\" : \"isout\"] = false;\n                this[c === \"isover\" ? \"_over\" : \"_out\"].call(this, event);\n\n                // we just moved out of a greedy child\n                if (parentInstance && c === \"isout\") {\n                    parentInstance.isout = false;\n                    parentInstance.isover = true;\n                    parentInstance._over.call(parentInstance, event);\n                }\n            });\n\n        },\n        dragStop: function (draggable, event) {\n            draggable.element.parentsUntil(\"body\").unbind(\"scroll.droppable\");\n            //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)\n            if (!draggable.options.refreshPositions) {\n                $.ui.ddmanager.prepareOffsets(draggable, event);\n            }\n        }\n    };\n\n});\n","jquery/ui-modules/effect-highlight.js":"/*!\n * jQuery UI Effects Highlight - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/highlight-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.highlight = function (o, done) {\n        var elem = $(this),\n            props = [\"backgroundImage\", \"backgroundColor\", \"opacity\"],\n            mode = $.effects.setMode(elem, o.mode || \"show\"),\n            animation = {\n                backgroundColor: elem.css(\"backgroundColor\")\n            };\n\n        if (mode === \"hide\") {\n            animation.opacity = 0;\n        }\n\n        $.effects.save(elem, props);\n\n        elem\n            .show()\n            .css({\n                backgroundImage: \"none\",\n                backgroundColor: o.color || \"#ffff99\"\n            })\n            .animate(animation, {\n                queue: false,\n                duration: o.duration,\n                easing: o.easing,\n                complete: function () {\n                    if (mode === \"hide\") {\n                        elem.hide();\n                    }\n                    $.effects.restore(elem, props);\n                    done();\n                }\n            });\n    };\n\n});\n","jquery/ui-modules/menu.js":"/*!\n * jQuery UI Menu - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/menu/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/widget',\n    'jquery-ui-modules/position'\n], function ($, undefined) {\n\n    $.widget(\"ui.menu\", {\n        version: \"1.10.4\",\n        defaultElement: \"<ul>\",\n        delay: 300,\n        options: {\n            icons: {\n                submenu: \"ui-icon-carat-1-e\"\n            },\n            menus: \"ul\",\n            position: {\n                my: \"left top\",\n                at: \"right top\"\n            },\n            role: \"menu\",\n\n            // callbacks\n            blur: null,\n            focus: null,\n            select: null\n        },\n\n        _create: function () {\n            this.activeMenu = this.element;\n            // flag used to prevent firing of the click handler\n            // as the event bubbles up through nested menus\n            this.mouseHandled = false;\n            this.element\n                .uniqueId()\n                .addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\")\n                .toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length)\n                .attr({\n                    role: this.options.role,\n                    tabIndex: 0\n                })\n                // need to catch all clicks on disabled menu\n                // not possible through _on\n                .bind(\"click\" + this.eventNamespace, $.proxy(function (event) {\n                    if (this.options.disabled) {\n                        event.preventDefault();\n                    }\n                }, this));\n\n            if (this.options.disabled) {\n                this.element\n                    .addClass(\"ui-state-disabled\")\n                    .attr(\"aria-disabled\", \"true\");\n            }\n\n            this._on({\n                // Prevent focus from sticking to links inside menu after clicking\n                // them (focus should always stay on UL during navigation).\n                \"mousedown .ui-menu-item > a\": function (event) {\n                    event.preventDefault();\n                },\n                \"click .ui-state-disabled > a\": function (event) {\n                    event.preventDefault();\n                },\n                \"click .ui-menu-item:has(a)\": function (event) {\n                    var target = $(event.target).closest(\".ui-menu-item\");\n                    if (!this.mouseHandled && target.not(\".ui-state-disabled\").length) {\n                        this.select(event);\n\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\n                        if (!event.isPropagationStopped()) {\n                            this.mouseHandled = true;\n                        }\n\n                        // Open submenu on click\n                        if (target.has(\".ui-menu\").length) {\n                            this.expand(event);\n                        } else if (!this.element.is(\":focus\") && $(this.document[0].activeElement).closest(\".ui-menu\").length) {\n\n                            // Redirect focus to the menu\n                            this.element.trigger(\"focus\", [true]);\n\n                            // If the active item is on the top level, let it stay active.\n                            // Otherwise, blur the active item since it is no longer visible.\n                            if (this.active && this.active.parents(\".ui-menu\").length === 1) {\n                                clearTimeout(this.timer);\n                            }\n                        }\n                    }\n                },\n                \"mouseenter .ui-menu-item\": function (event) {\n                    var target = $(event.currentTarget);\n                    // Remove ui-state-active class from siblings of the newly focused menu item\n                    // to avoid a jump caused by adjacent elements both having a class with a border\n                    target.siblings().children(\".ui-state-active\").removeClass(\"ui-state-active\");\n                    this.focus(event, target);\n                },\n                mouseleave: \"collapseAll\",\n                \"mouseleave .ui-menu\": \"collapseAll\",\n                focus: function (event, keepActiveItem) {\n                    // If there's already an active item, keep it active\n                    // If not, activate the first item\n                    var item = this.active || this.element.children(\".ui-menu-item\").eq(0);\n\n                    if (!keepActiveItem) {\n                        this.focus(event, item);\n                    }\n                },\n                blur: function (event) {\n                    this._delay(function () {\n                        if (!$.contains(this.element[0], this.document[0].activeElement)) {\n                            this.collapseAll(event);\n                        }\n                    });\n                },\n                keydown: \"_keydown\"\n            });\n\n            this.refresh();\n\n            // Clicks outside of a menu collapse any open menus\n            this._on(this.document, {\n                click: function (event) {\n                    if (!$(event.target).closest(\".ui-menu\").length) {\n                        this.collapseAll(event);\n                    }\n\n                    // Reset the mouseHandled flag\n                    this.mouseHandled = false;\n                }\n            });\n        },\n\n        _destroy: function () {\n            // Destroy (sub)menus\n            this.element\n                .removeAttr(\"aria-activedescendant\")\n                .find(\".ui-menu\").addBack()\n                .removeClass(\"ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons\")\n                .removeAttr(\"role\")\n                .removeAttr(\"tabIndex\")\n                .removeAttr(\"aria-labelledby\")\n                .removeAttr(\"aria-expanded\")\n                .removeAttr(\"aria-hidden\")\n                .removeAttr(\"aria-disabled\")\n                .removeUniqueId()\n                .show();\n\n            // Destroy menu items\n            this.element.find(\".ui-menu-item\")\n                .removeClass(\"ui-menu-item\")\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-disabled\")\n                .children(\"a\")\n                .removeUniqueId()\n                .removeClass(\"ui-corner-all ui-state-hover\")\n                .removeAttr(\"tabIndex\")\n                .removeAttr(\"role\")\n                .removeAttr(\"aria-haspopup\")\n                .children().each(function () {\n                var elem = $(this);\n                if (elem.data(\"ui-menu-submenu-carat\")) {\n                    elem.remove();\n                }\n            });\n\n            // Destroy menu dividers\n            this.element.find(\".ui-menu-divider\").removeClass(\"ui-menu-divider ui-widget-content\");\n        },\n\n        _keydown: function (event) {\n            var match, prev, character, skip, regex,\n                preventDefault = true;\n\n            function escape(value) {\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n            }\n\n            switch (event.keyCode) {\n                case $.ui.keyCode.PAGE_UP:\n                    this.previousPage(event);\n                    break;\n                case $.ui.keyCode.PAGE_DOWN:\n                    this.nextPage(event);\n                    break;\n                case $.ui.keyCode.HOME:\n                    this._move(\"first\", \"first\", event);\n                    break;\n                case $.ui.keyCode.END:\n                    this._move(\"last\", \"last\", event);\n                    break;\n                case $.ui.keyCode.UP:\n                    this.previous(event);\n                    break;\n                case $.ui.keyCode.DOWN:\n                    this.next(event);\n                    break;\n                case $.ui.keyCode.LEFT:\n                    this.collapse(event);\n                    break;\n                case $.ui.keyCode.RIGHT:\n                    if (this.active && !this.active.is(\".ui-state-disabled\")) {\n                        this.expand(event);\n                    }\n                    break;\n                case $.ui.keyCode.ENTER:\n                case $.ui.keyCode.SPACE:\n                    this._activate(event);\n                    break;\n                case $.ui.keyCode.ESCAPE:\n                    this.collapse(event);\n                    break;\n                default:\n                    preventDefault = false;\n                    prev = this.previousFilter || \"\";\n                    character = String.fromCharCode(event.keyCode);\n                    skip = false;\n\n                    clearTimeout(this.filterTimer);\n\n                    if (character === prev) {\n                        skip = true;\n                    } else {\n                        character = prev + character;\n                    }\n\n                    regex = new RegExp(\"^\" + escape(character), \"i\");\n                    match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\n                        return regex.test($(this).children(\"a\").text());\n                    });\n                    match = skip && match.index(this.active.next()) !== -1 ?\n                        this.active.nextAll(\".ui-menu-item\") :\n                        match;\n\n                    // If no matches on the current filter, reset to the last character pressed\n                    // to move down the menu to the first item that starts with that character\n                    if (!match.length) {\n                        character = String.fromCharCode(event.keyCode);\n                        regex = new RegExp(\"^\" + escape(character), \"i\");\n                        match = this.activeMenu.children(\".ui-menu-item\").filter(function () {\n                            return regex.test($(this).children(\"a\").text());\n                        });\n                    }\n\n                    if (match.length) {\n                        this.focus(event, match);\n                        if (match.length > 1) {\n                            this.previousFilter = character;\n                            this.filterTimer = this._delay(function () {\n                                delete this.previousFilter;\n                            }, 1000);\n                        } else {\n                            delete this.previousFilter;\n                        }\n                    } else {\n                        delete this.previousFilter;\n                    }\n            }\n\n            if (preventDefault) {\n                event.preventDefault();\n            }\n        },\n\n        _activate: function (event) {\n            if (!this.active.is(\".ui-state-disabled\")) {\n                if (this.active.children(\"a[aria-haspopup='true']\").length) {\n                    this.expand(event);\n                } else {\n                    this.select(event);\n                }\n            }\n        },\n\n        refresh: function () {\n            var menus,\n                icon = this.options.icons.submenu,\n                submenus = this.element.find(this.options.menus);\n\n            this.element.toggleClass(\"ui-menu-icons\", !!this.element.find(\".ui-icon\").length);\n\n            // Initialize nested menus\n            submenus.filter(\":not(.ui-menu)\")\n                .addClass(\"ui-menu ui-widget ui-widget-content ui-corner-all\")\n                .hide()\n                .attr({\n                    role: this.options.role,\n                    \"aria-hidden\": \"true\",\n                    \"aria-expanded\": \"false\"\n                })\n                .each(function () {\n                    var menu = $(this),\n                        item = menu.prev(\"a\"),\n                        submenuCarat = $(\"<span>\")\n                            .addClass(\"ui-menu-icon ui-icon \" + icon)\n                            .data(\"ui-menu-submenu-carat\", true);\n\n                    item\n                        .attr(\"aria-haspopup\", \"true\")\n                        .prepend(submenuCarat);\n                    menu.attr(\"aria-labelledby\", item.attr(\"id\"));\n                });\n\n            menus = submenus.add(this.element);\n\n            // Don't refresh list items that are already adapted\n            menus.children(\":not(.ui-menu-item):has(a)\")\n                .addClass(\"ui-menu-item\")\n                .attr(\"role\", \"presentation\")\n                .children(\"a\")\n                .uniqueId()\n                .addClass(\"ui-corner-all\")\n                .attr({\n                    tabIndex: -1,\n                    role: this._itemRole()\n                });\n\n            // Initialize unlinked menu-items containing spaces and/or dashes only as dividers\n            menus.children(\":not(.ui-menu-item)\").each(function () {\n                var item = $(this);\n                // hyphen, em dash, en dash\n                if (!/[^\\-\\u2014\\u2013\\s]/.test(item.text())) {\n                    item.addClass(\"ui-widget-content ui-menu-divider\");\n                }\n            });\n\n            // Add aria-disabled attribute to any disabled menu item\n            menus.children(\".ui-state-disabled\").attr(\"aria-disabled\", \"true\");\n\n            // If the active item has been removed, blur the menu\n            if (this.active && !$.contains(this.element[0], this.active[0])) {\n                this.blur();\n            }\n        },\n\n        _itemRole: function () {\n            return {\n                menu: \"menuitem\",\n                listbox: \"option\"\n            }[this.options.role];\n        },\n\n        _setOption: function (key, value) {\n            if (key === \"icons\") {\n                this.element.find(\".ui-menu-icon\")\n                    .removeClass(this.options.icons.submenu)\n                    .addClass(value.submenu);\n            }\n            this._super(key, value);\n        },\n\n        focus: function (event, item) {\n            var nested, focused;\n            this.blur(event, event && event.type === \"focus\");\n\n            this._scrollIntoView(item);\n\n            this.active = item.first();\n            focused = this.active.children(\"a\").addClass(\"ui-state-focus\");\n            // Only update aria-activedescendant if there's a role\n            // otherwise we assume focus is managed elsewhere\n            if (this.options.role) {\n                this.element.attr(\"aria-activedescendant\", focused.attr(\"id\"));\n            }\n\n            // Highlight active parent menu item, if any\n            this.active\n                .parent()\n                .closest(\".ui-menu-item\")\n                .children(\"a:first\")\n                .addClass(\"ui-state-active\");\n\n            if (event && event.type === \"keydown\") {\n                this._close();\n            } else {\n                this.timer = this._delay(function () {\n                    this._close();\n                }, this.delay);\n            }\n\n            nested = item.children(\".ui-menu\");\n            if (nested.length && event && (/^mouse/.test(event.type))) {\n                this._startOpening(nested);\n            }\n            this.activeMenu = item.parent();\n\n            this._trigger(\"focus\", event, {item: item});\n        },\n\n        _scrollIntoView: function (item) {\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\n            if (this._hasScroll()) {\n                borderTop = parseFloat($.css(this.activeMenu[0], \"borderTopWidth\")) || 0;\n                paddingTop = parseFloat($.css(this.activeMenu[0], \"paddingTop\")) || 0;\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\n                scroll = this.activeMenu.scrollTop();\n                elementHeight = this.activeMenu.height();\n                itemHeight = item.height();\n\n                if (offset < 0) {\n                    this.activeMenu.scrollTop(scroll + offset);\n                } else if (offset + itemHeight > elementHeight) {\n                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\n                }\n            }\n        },\n\n        blur: function (event, fromFocus) {\n            if (!fromFocus) {\n                clearTimeout(this.timer);\n            }\n\n            if (!this.active) {\n                return;\n            }\n\n            this.active.children(\"a\").removeClass(\"ui-state-focus\");\n            this.active = null;\n\n            this._trigger(\"blur\", event, {item: this.active});\n        },\n\n        _startOpening: function (submenu) {\n            clearTimeout(this.timer);\n\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\n            // shift in the submenu position when mousing over the carat icon\n            if (submenu.attr(\"aria-hidden\") !== \"true\") {\n                return;\n            }\n\n            this._open(submenu);\n        },\n\n        _open: function (submenu) {\n            var position = $.extend({\n                of: this.active\n            }, this.options.position);\n\n            clearTimeout(this.timer);\n            this.element.find(\".ui-menu\").not(submenu.parents(\".ui-menu\"))\n                .hide()\n                .attr(\"aria-hidden\", \"true\");\n\n            submenu\n                .show()\n                .removeAttr(\"aria-hidden\")\n                .attr(\"aria-expanded\", \"true\")\n                .position(position);\n        },\n\n        collapseAll: function (event, all) {\n            clearTimeout(this.timer);\n            this.timer = this._delay(function () {\n                // If we were passed an event, look for the submenu that contains the event\n                var currentMenu = all ? this.element :\n                    $(event && event.target).closest(this.element.find(\".ui-menu\"));\n\n                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\n                if (!currentMenu.length) {\n                    currentMenu = this.element;\n                }\n\n                this._close(currentMenu);\n\n                this.blur(event);\n                this.activeMenu = currentMenu;\n            }, this.delay);\n        },\n\n        // With no arguments, closes the currently active menu - if nothing is active\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\n        _close: function (startMenu) {\n            if (!startMenu) {\n                startMenu = this.active ? this.active.parent() : this.element;\n            }\n\n            startMenu\n                .find(\".ui-menu\")\n                .hide()\n                .attr(\"aria-hidden\", \"true\")\n                .attr(\"aria-expanded\", \"false\")\n                .end()\n                .find(\"a.ui-state-active\")\n                .removeClass(\"ui-state-active\");\n        },\n\n        collapse: function (event) {\n            var newItem = this.active &&\n                this.active.parent().closest(\".ui-menu-item\", this.element);\n            if (newItem && newItem.length) {\n                this._close();\n                this.focus(event, newItem);\n            }\n        },\n\n        expand: function (event) {\n            var newItem = this.active &&\n                this.active\n                    .children(\".ui-menu \")\n                    .children(\".ui-menu-item\")\n                    .first();\n\n            if (newItem && newItem.length) {\n                this._open(newItem.parent());\n\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\n                this._delay(function () {\n                    this.focus(event, newItem);\n                });\n            }\n        },\n\n        next: function (event) {\n            this._move(\"next\", \"first\", event);\n        },\n\n        previous: function (event) {\n            this._move(\"prev\", \"last\", event);\n        },\n\n        isFirstItem: function () {\n            return this.active && !this.active.prevAll(\".ui-menu-item\").length;\n        },\n\n        isLastItem: function () {\n            return this.active && !this.active.nextAll(\".ui-menu-item\").length;\n        },\n\n        _move: function (direction, filter, event) {\n            var next;\n            if (this.active) {\n                if (direction === \"first\" || direction === \"last\") {\n                    next = this.active\n                        [direction === \"first\" ? \"prevAll\" : \"nextAll\"](\".ui-menu-item\")\n                        .eq(-1);\n                } else {\n                    next = this.active\n                        [direction + \"All\"](\".ui-menu-item\")\n                        .eq(0);\n                }\n            }\n            if (!next || !next.length || !this.active) {\n                next = this.activeMenu.children(\".ui-menu-item\")[filter]();\n            }\n\n            this.focus(event, next);\n        },\n\n        nextPage: function (event) {\n            var item, base, height;\n\n            if (!this.active) {\n                this.next(event);\n                return;\n            }\n            if (this.isLastItem()) {\n                return;\n            }\n            if (this._hasScroll()) {\n                base = this.active.offset().top;\n                height = this.element.height();\n                this.active.nextAll(\".ui-menu-item\").each(function () {\n                    item = $(this);\n                    return item.offset().top - base - height < 0;\n                });\n\n                this.focus(event, item);\n            } else {\n                this.focus(event, this.activeMenu.children(\".ui-menu-item\")\n                    [!this.active ? \"first\" : \"last\"]());\n            }\n        },\n\n        previousPage: function (event) {\n            var item, base, height;\n            if (!this.active) {\n                this.next(event);\n                return;\n            }\n            if (this.isFirstItem()) {\n                return;\n            }\n            if (this._hasScroll()) {\n                base = this.active.offset().top;\n                height = this.element.height();\n                this.active.prevAll(\".ui-menu-item\").each(function () {\n                    item = $(this);\n                    return item.offset().top - base + height > 0;\n                });\n\n                this.focus(event, item);\n            } else {\n                this.focus(event, this.activeMenu.children(\".ui-menu-item\").first());\n            }\n        },\n\n        _hasScroll: function () {\n            return this.element.outerHeight() < this.element.prop(\"scrollHeight\");\n        },\n\n        select: function (event) {\n            // TODO: It should never be possible to not have an active item at this\n            // point, but the tests don't trigger mouseenter before click.\n            this.active = this.active || $(event.target).closest(\".ui-menu-item\");\n            var ui = {item: this.active};\n            if (!this.active.has(\".ui-menu\").length) {\n                this.collapseAll(event, true);\n            }\n            this._trigger(\"select\", event, ui);\n        }\n    });\n\n});\n","jquery/ui-modules/core.js":"/*!\n * jQuery UI Core - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/category/ui-core/\n */\ndefine([\n    'jquery'\n], function ($, undefined) {\n\n    var uuid = 0,\n        runiqueId = /^ui-id-\\d+$/;\n\n// $.ui might exist from components with no dependencies, e.g., $.ui.position\n    $.ui = $.ui || {};\n\n    $.extend($.ui, {\n        version: \"1.10.4\",\n\n        keyCode: {\n            BACKSPACE: 8,\n            COMMA: 188,\n            DELETE: 46,\n            DOWN: 40,\n            END: 35,\n            ENTER: 13,\n            ESCAPE: 27,\n            HOME: 36,\n            LEFT: 37,\n            NUMPAD_ADD: 107,\n            NUMPAD_DECIMAL: 110,\n            NUMPAD_DIVIDE: 111,\n            NUMPAD_ENTER: 108,\n            NUMPAD_MULTIPLY: 106,\n            NUMPAD_SUBTRACT: 109,\n            PAGE_DOWN: 34,\n            PAGE_UP: 33,\n            PERIOD: 190,\n            RIGHT: 39,\n            SPACE: 32,\n            TAB: 9,\n            UP: 38\n        }\n    });\n\n// plugins\n    $.fn.extend({\n        focus: (function (orig) {\n            return function (delay, fn) {\n                return typeof delay === \"number\" ?\n                    this.each(function () {\n                        var elem = this;\n                        setTimeout(function () {\n                            $(elem).focus();\n                            if (fn) {\n                                fn.call(elem);\n                            }\n                        }, delay);\n                    }) :\n                    orig.apply(this, arguments);\n            };\n        })($.fn.focus),\n\n        scrollParent: function () {\n            var scrollParent;\n            if (($.ui.ie && (/(static|relative)/).test(this.css(\"position\"))) || (/absolute/).test(this.css(\"position\"))) {\n                scrollParent = this.parents().filter(function () {\n                    return (/(relative|absolute|fixed)/).test($.css(this, \"position\")) && (/(auto|scroll)/).test($.css(this, \"overflow\") + $.css(this, \"overflow-y\") + $.css(this, \"overflow-x\"));\n                }).eq(0);\n            } else {\n                scrollParent = this.parents().filter(function () {\n                    return (/(auto|scroll)/).test($.css(this, \"overflow\") + $.css(this, \"overflow-y\") + $.css(this, \"overflow-x\"));\n                }).eq(0);\n            }\n\n            return (/fixed/).test(this.css(\"position\")) || !scrollParent.length ? $(document) : scrollParent;\n        },\n\n        zIndex: function (zIndex) {\n            if (zIndex !== undefined) {\n                return this.css(\"zIndex\", zIndex);\n            }\n\n            if (this.length) {\n                var elem = $(this[0]), position, value;\n                while (elem.length && elem[0] !== document) {\n                    // Ignore z-index if position is set to a value where z-index is ignored by the browser\n                    // This makes behavior of this function consistent across browsers\n                    // WebKit always returns auto if the element is positioned\n                    position = elem.css(\"position\");\n                    if (position === \"absolute\" || position === \"relative\" || position === \"fixed\") {\n                        // IE returns 0 when zIndex is not specified\n                        // other browsers return a string\n                        // we ignore the case of nested elements with an explicit value of 0\n                        // <div style=\"z-index: -10;\"><div style=\"z-index: 0;\"></div></div>\n                        value = parseInt(elem.css(\"zIndex\"), 10);\n                        if (!isNaN(value) && value !== 0) {\n                            return value;\n                        }\n                    }\n                    elem = elem.parent();\n                }\n            }\n\n            return 0;\n        },\n\n        uniqueId: function () {\n            return this.each(function () {\n                if (!this.id) {\n                    this.id = \"ui-id-\" + (++uuid);\n                }\n            });\n        },\n\n        removeUniqueId: function () {\n            return this.each(function () {\n                if (runiqueId.test(this.id)) {\n                    $(this).removeAttr(\"id\");\n                }\n            });\n        }\n    });\n\n// selectors\n    function focusable(element, isTabIndexNotNaN) {\n        var map, mapName, img,\n            nodeName = element.nodeName.toLowerCase();\n        if (\"area\" === nodeName) {\n            map = element.parentNode;\n            mapName = map.name;\n            if (!element.href || !mapName || map.nodeName.toLowerCase() !== \"map\") {\n                return false;\n            }\n            img = $(\"img[usemap=#\" + mapName + \"]\")[0];\n            return !!img && visible(img);\n        }\n        return (/input|select|textarea|button|object/.test(nodeName) ?\n            !element.disabled :\n            \"a\" === nodeName ?\n                element.href || isTabIndexNotNaN :\n                isTabIndexNotNaN) &&\n            // the element and all of its ancestors must be visible\n            visible(element);\n    }\n\n    function visible(element) {\n        return $.expr.filters.visible(element) &&\n            !$(element).parents().addBack().filter(function () {\n                return $.css(this, \"visibility\") === \"hidden\";\n            }).length;\n    }\n\n    $.extend($.expr[\":\"], {\n        data: $.expr.createPseudo ?\n            $.expr.createPseudo(function (dataName) {\n                return function (elem) {\n                    return !!$.data(elem, dataName);\n                };\n            }) :\n            // support: jQuery <1.8\n            function (elem, i, match) {\n                return !!$.data(elem, match[3]);\n            },\n\n        focusable: function (element) {\n            return focusable(element, !isNaN($.attr(element, \"tabindex\")));\n        },\n\n        tabbable: function (element) {\n            var tabIndex = $.attr(element, \"tabindex\"),\n                isTabIndexNaN = isNaN(tabIndex);\n            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);\n        }\n    });\n\n// support: jQuery <1.8\n    if (!$(\"<a>\").outerWidth(1).jquery) {\n        $.each([\"Width\", \"Height\"], function (i, name) {\n            var side = name === \"Width\" ? [\"Left\", \"Right\"] : [\"Top\", \"Bottom\"],\n                type = name.toLowerCase(),\n                orig = {\n                    innerWidth: $.fn.innerWidth,\n                    innerHeight: $.fn.innerHeight,\n                    outerWidth: $.fn.outerWidth,\n                    outerHeight: $.fn.outerHeight\n                };\n\n            function reduce(elem, size, border, margin) {\n                $.each(side, function () {\n                    size -= parseFloat($.css(elem, \"padding\" + this)) || 0;\n                    if (border) {\n                        size -= parseFloat($.css(elem, \"border\" + this + \"Width\")) || 0;\n                    }\n                    if (margin) {\n                        size -= parseFloat($.css(elem, \"margin\" + this)) || 0;\n                    }\n                });\n                return size;\n            }\n\n            $.fn[\"inner\" + name] = function (size) {\n                if (size === undefined) {\n                    return orig[\"inner\" + name].call(this);\n                }\n\n                return this.each(function () {\n                    $(this).css(type, reduce(this, size) + \"px\");\n                });\n            };\n\n            $.fn[\"outer\" + name] = function (size, margin) {\n                if (typeof size !== \"number\") {\n                    return orig[\"outer\" + name].call(this, size);\n                }\n\n                return this.each(function () {\n                    $(this).css(type, reduce(this, size, true, margin) + \"px\");\n                });\n            };\n        });\n    }\n\n// support: jQuery <1.8\n    if (!$.fn.addBack) {\n        $.fn.addBack = function (selector) {\n            return this.add(selector == null ?\n                this.prevObject : this.prevObject.filter(selector)\n            );\n        };\n    }\n\n// support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)\n    if ($(\"<a>\").data(\"a-b\", \"a\").removeData(\"a-b\").data(\"a-b\")) {\n        $.fn.removeData = (function (removeData) {\n            return function (key) {\n                if (arguments.length) {\n                    return removeData.call(this, $.camelCase(key));\n                } else {\n                    return removeData.call(this);\n                }\n            };\n        })($.fn.removeData);\n    }\n\n\n// deprecated\n    $.ui.ie = !!/msie [\\w.]+/.exec(navigator.userAgent.toLowerCase());\n\n    $.support.selectstart = \"onselectstart\" in document.createElement(\"div\");\n    $.fn.extend({\n        disableSelection: function () {\n            return this.bind(($.support.selectstart ? \"selectstart\" : \"mousedown\") +\n                \".ui-disableSelection\", function (event) {\n                event.preventDefault();\n            });\n        },\n\n        enableSelection: function () {\n            return this.unbind(\".ui-disableSelection\");\n        }\n    });\n\n    $.extend($.ui, {\n        // $.ui.plugin is deprecated. Use $.widget() extensions instead.\n        plugin: {\n            add: function (module, option, set) {\n                var i,\n                    proto = $.ui[module].prototype;\n                for (i in set) {\n                    proto.plugins[i] = proto.plugins[i] || [];\n                    proto.plugins[i].push([option, set[i]]);\n                }\n            },\n            call: function (instance, name, args) {\n                var i,\n                    set = instance.plugins[name];\n                if (!set || !instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11) {\n                    return;\n                }\n\n                for (i = 0; i < set.length; i++) {\n                    if (instance.options[set[i][0]]) {\n                        set[i][1].apply(instance.element, args);\n                    }\n                }\n            }\n        },\n\n        // only used by resizable\n        hasScroll: function (el, a) {\n\n            //If overflow is hidden, the element might have extra content, but the user wants to hide it\n            if ($(el).css(\"overflow\") === \"hidden\") {\n                return false;\n            }\n\n            var scroll = (a && a === \"left\") ? \"scrollLeft\" : \"scrollTop\",\n                has = false;\n\n            if (el[scroll] > 0) {\n                return true;\n            }\n\n            // TODO: determine which cases actually cause this to happen\n            // if the element doesn't have the scroll set, see if it's possible to\n            // set the scroll\n            el[scroll] = 1;\n            has = (el[scroll] > 0);\n            el[scroll] = 0;\n            return has;\n        }\n    });\n\n});\n","jquery/ui-modules/effect-explode.js":"/*!\n * jQuery UI Effects Explode - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/explode-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.explode = function (o, done) {\n\n        var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3,\n            cells = rows,\n            el = $(this),\n            mode = $.effects.setMode(el, o.mode || \"hide\"),\n            show = mode === \"show\",\n\n            // show and then visibility:hidden the element before calculating offset\n            offset = el.show().css(\"visibility\", \"hidden\").offset(),\n\n            // width and height of a piece\n            width = Math.ceil(el.outerWidth() / cells),\n            height = Math.ceil(el.outerHeight() / rows),\n            pieces = [],\n\n            // loop\n            i, j, left, top, mx, my;\n\n        // children animate complete:\n        function childComplete() {\n            pieces.push(this);\n            if (pieces.length === rows * cells) {\n                animComplete();\n            }\n        }\n\n        // clone the element for each row and cell.\n        for (i = 0; i < rows; i++) { // ===>\n            top = offset.top + i * height;\n            my = i - (rows - 1) / 2;\n\n            for (j = 0; j < cells; j++) { // |||\n                left = offset.left + j * width;\n                mx = j - (cells - 1) / 2;\n\n                // Create a clone of the now hidden main element that will be absolute positioned\n                // within a wrapper div off the -left and -top equal to size of our pieces\n                el\n                    .clone()\n                    .appendTo(\"body\")\n                    .wrap(\"<div></div>\")\n                    .css({\n                        position: \"absolute\",\n                        visibility: \"visible\",\n                        left: -j * width,\n                        top: -i * height\n                    })\n\n                    // select the wrapper - make it overflow: hidden and absolute positioned based on\n                    // where the original was located +left and +top equal to the size of pieces\n                    .parent()\n                    .addClass(\"ui-effects-explode\")\n                    .css({\n                        position: \"absolute\",\n                        overflow: \"hidden\",\n                        width: width,\n                        height: height,\n                        left: left + (show ? mx * width : 0),\n                        top: top + (show ? my * height : 0),\n                        opacity: show ? 0 : 1\n                    }).animate({\n                    left: left + (show ? 0 : mx * width),\n                    top: top + (show ? 0 : my * height),\n                    opacity: show ? 1 : 0\n                }, o.duration || 500, o.easing, childComplete);\n            }\n        }\n\n        function animComplete() {\n            el.css({\n                visibility: \"visible\"\n            });\n            $(pieces).remove();\n            if (!show) {\n                el.hide();\n            }\n            done();\n        }\n    };\n\n});\n","jquery/ui-modules/effect-fade.js":"/*!\n * jQuery UI Effects Fade - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/fade-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.fade = function (o, done) {\n        var el = $(this),\n            mode = $.effects.setMode(el, o.mode || \"toggle\");\n\n        el.animate({\n            opacity: mode\n        }, {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: done\n        });\n    };\n\n});\n","jquery/ui-modules/effect.js":"/*!\n * jQuery UI Effects - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/category/effects-core/\n */\n\ndefine([\n    'jquery'\n], function ($, undefined) {\n\n    var dataSpace = \"ui-effects-\";\n\n    $.effects = {\n        effect: {}\n    };\n\n    /*!\n     * jQuery Color Animations v2.1.2\n     * https://github.com/jquery/jquery-color\n     *\n     * Copyright 2013 jQuery Foundation and other contributors\n     * Released under the MIT license.\n     * http://jquery.org/license\n     *\n     * Date: Wed Jan 16 08:47:09 2013 -0600\n     */\n    (function (jQuery, undefined) {\n\n        var stepHooks = \"backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor\",\n\n            // plusequals test for += 100 -= 100\n            rplusequals = /^([\\-+])=\\s*(\\d+\\.?\\d*)/,\n            // a set of RE's that can match strings and generate color tuples.\n            stringParsers = [{\n                re: /rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n                parse: function (execResult) {\n                    return [\n                        execResult[1],\n                        execResult[2],\n                        execResult[3],\n                        execResult[4]\n                    ];\n                }\n            }, {\n                re: /rgba?\\(\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n                parse: function (execResult) {\n                    return [\n                        execResult[1] * 2.55,\n                        execResult[2] * 2.55,\n                        execResult[3] * 2.55,\n                        execResult[4]\n                    ];\n                }\n            }, {\n                // this regex ignores A-F because it's compared against an already lowercased string\n                re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,\n                parse: function (execResult) {\n                    return [\n                        parseInt(execResult[1], 16),\n                        parseInt(execResult[2], 16),\n                        parseInt(execResult[3], 16)\n                    ];\n                }\n            }, {\n                // this regex ignores A-F because it's compared against an already lowercased string\n                re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,\n                parse: function (execResult) {\n                    return [\n                        parseInt(execResult[1] + execResult[1], 16),\n                        parseInt(execResult[2] + execResult[2], 16),\n                        parseInt(execResult[3] + execResult[3], 16)\n                    ];\n                }\n            }, {\n                re: /hsla?\\(\\s*(\\d+(?:\\.\\d+)?)\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*,\\s*(\\d+(?:\\.\\d+)?)\\%\\s*(?:,\\s*(\\d?(?:\\.\\d+)?)\\s*)?\\)/,\n                space: \"hsla\",\n                parse: function (execResult) {\n                    return [\n                        execResult[1],\n                        execResult[2] / 100,\n                        execResult[3] / 100,\n                        execResult[4]\n                    ];\n                }\n            }],\n\n            // jQuery.Color( )\n            color = jQuery.Color = function (color, green, blue, alpha) {\n                return new jQuery.Color.fn.parse(color, green, blue, alpha);\n            },\n            spaces = {\n                rgba: {\n                    props: {\n                        red: {\n                            idx: 0,\n                            type: \"byte\"\n                        },\n                        green: {\n                            idx: 1,\n                            type: \"byte\"\n                        },\n                        blue: {\n                            idx: 2,\n                            type: \"byte\"\n                        }\n                    }\n                },\n\n                hsla: {\n                    props: {\n                        hue: {\n                            idx: 0,\n                            type: \"degrees\"\n                        },\n                        saturation: {\n                            idx: 1,\n                            type: \"percent\"\n                        },\n                        lightness: {\n                            idx: 2,\n                            type: \"percent\"\n                        }\n                    }\n                }\n            },\n            propTypes = {\n                \"byte\": {\n                    floor: true,\n                    max: 255\n                },\n                \"percent\": {\n                    max: 1\n                },\n                \"degrees\": {\n                    mod: 360,\n                    floor: true\n                }\n            },\n            support = color.support = {},\n\n            // element for support tests\n            supportElem = jQuery(\"<p>\")[0],\n\n            // colors = jQuery.Color.names\n            colors,\n\n            // local aliases of functions called often\n            each = jQuery.each;\n\n// determine rgba support immediately\n        supportElem.style.cssText = \"background-color:rgba(1,1,1,.5)\";\n        support.rgba = supportElem.style.backgroundColor.indexOf(\"rgba\") > -1;\n\n// define cache name and alpha properties\n// for rgba and hsla spaces\n        each(spaces, function (spaceName, space) {\n            space.cache = \"_\" + spaceName;\n            space.props.alpha = {\n                idx: 3,\n                type: \"percent\",\n                def: 1\n            };\n        });\n\n        function clamp(value, prop, allowEmpty) {\n            var type = propTypes[prop.type] || {};\n\n            if (value == null) {\n                return (allowEmpty || !prop.def) ? null : prop.def;\n            }\n\n            // ~~ is an short way of doing floor for positive numbers\n            value = type.floor ? ~~value : parseFloat(value);\n\n            // IE will pass in empty strings as value for alpha,\n            // which will hit this case\n            if (isNaN(value)) {\n                return prop.def;\n            }\n\n            if (type.mod) {\n                // we add mod before modding to make sure that negatives values\n                // get converted properly: -10 -> 350\n                return (value + type.mod) % type.mod;\n            }\n\n            // for now all property types without mod have min and max\n            return 0 > value ? 0 : type.max < value ? type.max : value;\n        }\n\n        function stringParse(string) {\n            var inst = color(),\n                rgba = inst._rgba = [];\n\n            string = string.toLowerCase();\n\n            each(stringParsers, function (i, parser) {\n                var parsed,\n                    match = parser.re.exec(string),\n                    values = match && parser.parse(match),\n                    spaceName = parser.space || \"rgba\";\n\n                if (values) {\n                    parsed = inst[spaceName](values);\n\n                    // if this was an rgba parse the assignment might happen twice\n                    // oh well....\n                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];\n                    rgba = inst._rgba = parsed._rgba;\n\n                    // exit each( stringParsers ) here because we matched\n                    return false;\n                }\n            });\n\n            // Found a stringParser that handled it\n            if (rgba.length) {\n\n                // if this came from a parsed string, force \"transparent\" when alpha is 0\n                // chrome, (and maybe others) return \"transparent\" as rgba(0,0,0,0)\n                if (rgba.join() === \"0,0,0,0\") {\n                    jQuery.extend(rgba, colors.transparent);\n                }\n                return inst;\n            }\n\n            // named colors\n            return colors[string];\n        }\n\n        color.fn = jQuery.extend(color.prototype, {\n            parse: function (red, green, blue, alpha) {\n                if (red === undefined) {\n                    this._rgba = [null, null, null, null];\n                    return this;\n                }\n                if (red.jquery || red.nodeType) {\n                    red = jQuery(red).css(green);\n                    green = undefined;\n                }\n\n                var inst = this,\n                    type = jQuery.type(red),\n                    rgba = this._rgba = [];\n\n                // more than 1 argument specified - assume ( red, green, blue, alpha )\n                if (green !== undefined) {\n                    red = [red, green, blue, alpha];\n                    type = \"array\";\n                }\n\n                if (type === \"string\") {\n                    return this.parse(stringParse(red) || colors._default);\n                }\n\n                if (type === \"array\") {\n                    each(spaces.rgba.props, function (key, prop) {\n                        rgba[prop.idx] = clamp(red[prop.idx], prop);\n                    });\n                    return this;\n                }\n\n                if (type === \"object\") {\n                    if (red instanceof color) {\n                        each(spaces, function (spaceName, space) {\n                            if (red[space.cache]) {\n                                inst[space.cache] = red[space.cache].slice();\n                            }\n                        });\n                    } else {\n                        each(spaces, function (spaceName, space) {\n                            var cache = space.cache;\n                            each(space.props, function (key, prop) {\n\n                                // if the cache doesn't exist, and we know how to convert\n                                if (!inst[cache] && space.to) {\n\n                                    // if the value was null, we don't need to copy it\n                                    // if the key was alpha, we don't need to copy it either\n                                    if (key === \"alpha\" || red[key] == null) {\n                                        return;\n                                    }\n                                    inst[cache] = space.to(inst._rgba);\n                                }\n\n                                // this is the only case where we allow nulls for ALL properties.\n                                // call clamp with alwaysAllowEmpty\n                                inst[cache][prop.idx] = clamp(red[key], prop, true);\n                            });\n\n                            // everything defined but alpha?\n                            if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {\n                                // use the default of 1\n                                inst[cache][3] = 1;\n                                if (space.from) {\n                                    inst._rgba = space.from(inst[cache]);\n                                }\n                            }\n                        });\n                    }\n                    return this;\n                }\n            },\n            is: function (compare) {\n                var is = color(compare),\n                    same = true,\n                    inst = this;\n\n                each(spaces, function (_, space) {\n                    var localCache,\n                        isCache = is[space.cache];\n                    if (isCache) {\n                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];\n                        each(space.props, function (_, prop) {\n                            if (isCache[prop.idx] != null) {\n                                same = (isCache[prop.idx] === localCache[prop.idx]);\n                                return same;\n                            }\n                        });\n                    }\n                    return same;\n                });\n                return same;\n            },\n            _space: function () {\n                var used = [],\n                    inst = this;\n                each(spaces, function (spaceName, space) {\n                    if (inst[space.cache]) {\n                        used.push(spaceName);\n                    }\n                });\n                return used.pop();\n            },\n            transition: function (other, distance) {\n                var end = color(other),\n                    spaceName = end._space(),\n                    space = spaces[spaceName],\n                    startColor = this.alpha() === 0 ? color(\"transparent\") : this,\n                    start = startColor[space.cache] || space.to(startColor._rgba),\n                    result = start.slice();\n\n                end = end[space.cache];\n                each(space.props, function (key, prop) {\n                    var index = prop.idx,\n                        startValue = start[index],\n                        endValue = end[index],\n                        type = propTypes[prop.type] || {};\n\n                    // if null, don't override start value\n                    if (endValue === null) {\n                        return;\n                    }\n                    // if null - use end\n                    if (startValue === null) {\n                        result[index] = endValue;\n                    } else {\n                        if (type.mod) {\n                            if (endValue - startValue > type.mod / 2) {\n                                startValue += type.mod;\n                            } else if (startValue - endValue > type.mod / 2) {\n                                startValue -= type.mod;\n                            }\n                        }\n                        result[index] = clamp((endValue - startValue) * distance + startValue, prop);\n                    }\n                });\n                return this[spaceName](result);\n            },\n            blend: function (opaque) {\n                // if we are already opaque - return ourself\n                if (this._rgba[3] === 1) {\n                    return this;\n                }\n\n                var rgb = this._rgba.slice(),\n                    a = rgb.pop(),\n                    blend = color(opaque)._rgba;\n\n                return color(jQuery.map(rgb, function (v, i) {\n                    return (1 - a) * blend[i] + a * v;\n                }));\n            },\n            toRgbaString: function () {\n                var prefix = \"rgba(\",\n                    rgba = jQuery.map(this._rgba, function (v, i) {\n                        return v == null ? (i > 2 ? 1 : 0) : v;\n                    });\n\n                if (rgba[3] === 1) {\n                    rgba.pop();\n                    prefix = \"rgb(\";\n                }\n\n                return prefix + rgba.join() + \")\";\n            },\n            toHslaString: function () {\n                var prefix = \"hsla(\",\n                    hsla = jQuery.map(this.hsla(), function (v, i) {\n                        if (v == null) {\n                            v = i > 2 ? 1 : 0;\n                        }\n\n                        // catch 1 and 2\n                        if (i && i < 3) {\n                            v = Math.round(v * 100) + \"%\";\n                        }\n                        return v;\n                    });\n\n                if (hsla[3] === 1) {\n                    hsla.pop();\n                    prefix = \"hsl(\";\n                }\n                return prefix + hsla.join() + \")\";\n            },\n            toHexString: function (includeAlpha) {\n                var rgba = this._rgba.slice(),\n                    alpha = rgba.pop();\n\n                if (includeAlpha) {\n                    rgba.push(~~(alpha * 255));\n                }\n\n                return \"#\" + jQuery.map(rgba, function (v) {\n\n                    // default to 0 when nulls exist\n                    v = (v || 0).toString(16);\n                    return v.length === 1 ? \"0\" + v : v;\n                }).join(\"\");\n            },\n            toString: function () {\n                return this._rgba[3] === 0 ? \"transparent\" : this.toRgbaString();\n            }\n        });\n        color.fn.parse.prototype = color.fn;\n\n// hsla conversions adapted from:\n// https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021\n\n        function hue2rgb(p, q, h) {\n            h = (h + 1) % 1;\n            if (h * 6 < 1) {\n                return p + (q - p) * h * 6;\n            }\n            if (h * 2 < 1) {\n                return q;\n            }\n            if (h * 3 < 2) {\n                return p + (q - p) * ((2 / 3) - h) * 6;\n            }\n            return p;\n        }\n\n        spaces.hsla.to = function (rgba) {\n            if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {\n                return [null, null, null, rgba[3]];\n            }\n            var r = rgba[0] / 255,\n                g = rgba[1] / 255,\n                b = rgba[2] / 255,\n                a = rgba[3],\n                max = Math.max(r, g, b),\n                min = Math.min(r, g, b),\n                diff = max - min,\n                add = max + min,\n                l = add * 0.5,\n                h, s;\n\n            if (min === max) {\n                h = 0;\n            } else if (r === max) {\n                h = (60 * (g - b) / diff) + 360;\n            } else if (g === max) {\n                h = (60 * (b - r) / diff) + 120;\n            } else {\n                h = (60 * (r - g) / diff) + 240;\n            }\n\n            // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%\n            // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)\n            if (diff === 0) {\n                s = 0;\n            } else if (l <= 0.5) {\n                s = diff / add;\n            } else {\n                s = diff / (2 - add);\n            }\n            return [Math.round(h) % 360, s, l, a == null ? 1 : a];\n        };\n\n        spaces.hsla.from = function (hsla) {\n            if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {\n                return [null, null, null, hsla[3]];\n            }\n            var h = hsla[0] / 360,\n                s = hsla[1],\n                l = hsla[2],\n                a = hsla[3],\n                q = l <= 0.5 ? l * (1 + s) : l + s - l * s,\n                p = 2 * l - q;\n\n            return [\n                Math.round(hue2rgb(p, q, h + (1 / 3)) * 255),\n                Math.round(hue2rgb(p, q, h) * 255),\n                Math.round(hue2rgb(p, q, h - (1 / 3)) * 255),\n                a\n            ];\n        };\n\n\n        each(spaces, function (spaceName, space) {\n            var props = space.props,\n                cache = space.cache,\n                to = space.to,\n                from = space.from;\n\n            // makes rgba() and hsla()\n            color.fn[spaceName] = function (value) {\n\n                // generate a cache for this space if it doesn't exist\n                if (to && !this[cache]) {\n                    this[cache] = to(this._rgba);\n                }\n                if (value === undefined) {\n                    return this[cache].slice();\n                }\n\n                var ret,\n                    type = jQuery.type(value),\n                    arr = (type === \"array\" || type === \"object\") ? value : arguments,\n                    local = this[cache].slice();\n\n                each(props, function (key, prop) {\n                    var val = arr[type === \"object\" ? key : prop.idx];\n                    if (val == null) {\n                        val = local[prop.idx];\n                    }\n                    local[prop.idx] = clamp(val, prop);\n                });\n\n                if (from) {\n                    ret = color(from(local));\n                    ret[cache] = local;\n                    return ret;\n                } else {\n                    return color(local);\n                }\n            };\n\n            // makes red() green() blue() alpha() hue() saturation() lightness()\n            each(props, function (key, prop) {\n                // alpha is included in more than one space\n                if (color.fn[key]) {\n                    return;\n                }\n                color.fn[key] = function (value) {\n                    var vtype = jQuery.type(value),\n                        fn = (key === \"alpha\" ? (this._hsla ? \"hsla\" : \"rgba\") : spaceName),\n                        local = this[fn](),\n                        cur = local[prop.idx],\n                        match;\n\n                    if (vtype === \"undefined\") {\n                        return cur;\n                    }\n\n                    if (vtype === \"function\") {\n                        value = value.call(this, cur);\n                        vtype = jQuery.type(value);\n                    }\n                    if (value == null && prop.empty) {\n                        return this;\n                    }\n                    if (vtype === \"string\") {\n                        match = rplusequals.exec(value);\n                        if (match) {\n                            value = cur + parseFloat(match[2]) * (match[1] === \"+\" ? 1 : -1);\n                        }\n                    }\n                    local[prop.idx] = value;\n                    return this[fn](local);\n                };\n            });\n        });\n\n// add cssHook and .fx.step function for each named hook.\n// accept a space separated string of properties\n        color.hook = function (hook) {\n            var hooks = hook.split(\" \");\n            each(hooks, function (i, hook) {\n                jQuery.cssHooks[hook] = {\n                    set: function (elem, value) {\n                        var parsed, curElem,\n                            backgroundColor = \"\";\n\n                        if (value !== \"transparent\" && (jQuery.type(value) !== \"string\" || (parsed = stringParse(value)))) {\n                            value = color(parsed || value);\n                            if (!support.rgba && value._rgba[3] !== 1) {\n                                curElem = hook === \"backgroundColor\" ? elem.parentNode : elem;\n                                while (\n                                    (backgroundColor === \"\" || backgroundColor === \"transparent\") &&\n                                    curElem && curElem.style\n                                    ) {\n                                    try {\n                                        backgroundColor = jQuery.css(curElem, \"backgroundColor\");\n                                        curElem = curElem.parentNode;\n                                    } catch (e) {\n                                    }\n                                }\n\n                                value = value.blend(backgroundColor && backgroundColor !== \"transparent\" ?\n                                    backgroundColor :\n                                    \"_default\");\n                            }\n\n                            value = value.toRgbaString();\n                        }\n                        try {\n                            elem.style[hook] = value;\n                        } catch (e) {\n                            // wrapped to prevent IE from throwing errors on \"invalid\" values like 'auto' or 'inherit'\n                        }\n                    }\n                };\n                jQuery.fx.step[hook] = function (fx) {\n                    if (!fx.colorInit) {\n                        fx.start = color(fx.elem, hook);\n                        fx.end = color(fx.end);\n                        fx.colorInit = true;\n                    }\n                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));\n                };\n            });\n\n        };\n\n        color.hook(stepHooks);\n\n        jQuery.cssHooks.borderColor = {\n            expand: function (value) {\n                var expanded = {};\n\n                each([\"Top\", \"Right\", \"Bottom\", \"Left\"], function (i, part) {\n                    expanded[\"border\" + part + \"Color\"] = value;\n                });\n                return expanded;\n            }\n        };\n\n// Basic color names only.\n// Usage of any of the other color names requires adding yourself or including\n// jquery.color.svg-names.js.\n        colors = jQuery.Color.names = {\n            // 4.1. Basic color keywords\n            aqua: \"#00ffff\",\n            black: \"#000000\",\n            blue: \"#0000ff\",\n            fuchsia: \"#ff00ff\",\n            gray: \"#808080\",\n            green: \"#008000\",\n            lime: \"#00ff00\",\n            maroon: \"#800000\",\n            navy: \"#000080\",\n            olive: \"#808000\",\n            purple: \"#800080\",\n            red: \"#ff0000\",\n            silver: \"#c0c0c0\",\n            teal: \"#008080\",\n            white: \"#ffffff\",\n            yellow: \"#ffff00\",\n\n            // 4.2.3. \"transparent\" color keyword\n            transparent: [null, null, null, 0],\n\n            _default: \"#ffffff\"\n        };\n\n    })(jQuery);\n\n\n    /******************************************************************************/\n    /****************************** CLASS ANIMATIONS ******************************/\n    /******************************************************************************/\n    (function () {\n\n        var classAnimationActions = [\"add\", \"remove\", \"toggle\"],\n            shorthandStyles = {\n                border: 1,\n                borderBottom: 1,\n                borderColor: 1,\n                borderLeft: 1,\n                borderRight: 1,\n                borderTop: 1,\n                borderWidth: 1,\n                margin: 1,\n                padding: 1\n            };\n\n        $.each([\"borderLeftStyle\", \"borderRightStyle\", \"borderBottomStyle\", \"borderTopStyle\"], function (_, prop) {\n            $.fx.step[prop] = function (fx) {\n                if (fx.end !== \"none\" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {\n                    jQuery.style(fx.elem, prop, fx.end);\n                    fx.setAttr = true;\n                }\n            };\n        });\n\n        function getElementStyles(elem) {\n            var key, len,\n                style = elem.ownerDocument.defaultView ?\n                    elem.ownerDocument.defaultView.getComputedStyle(elem, null) :\n                    elem.currentStyle,\n                styles = {};\n\n            if (style && style.length && style[0] && style[style[0]]) {\n                len = style.length;\n                while (len--) {\n                    key = style[len];\n                    if (typeof style[key] === \"string\") {\n                        styles[$.camelCase(key)] = style[key];\n                    }\n                }\n                // support: Opera, IE <9\n            } else {\n                for (key in style) {\n                    if (typeof style[key] === \"string\") {\n                        styles[key] = style[key];\n                    }\n                }\n            }\n\n            return styles;\n        }\n\n\n        function styleDifference(oldStyle, newStyle) {\n            var diff = {},\n                name, value;\n\n            for (name in newStyle) {\n                value = newStyle[name];\n                if (oldStyle[name] !== value) {\n                    if (!shorthandStyles[name]) {\n                        if ($.fx.step[name] || !isNaN(parseFloat(value))) {\n                            diff[name] = value;\n                        }\n                    }\n                }\n            }\n\n            return diff;\n        }\n\n// support: jQuery <1.8\n        if (!$.fn.addBack) {\n            $.fn.addBack = function (selector) {\n                return this.add(selector == null ?\n                    this.prevObject : this.prevObject.filter(selector)\n                );\n            };\n        }\n\n        $.effects.animateClass = function (value, duration, easing, callback) {\n            var o = $.speed(duration, easing, callback);\n\n            return this.queue(function () {\n                var animated = $(this),\n                    baseClass = animated.attr(\"class\") || \"\",\n                    applyClassChange,\n                    allAnimations = o.children ? animated.find(\"*\").addBack() : animated;\n\n                // map the animated objects to store the original styles.\n                allAnimations = allAnimations.map(function () {\n                    var el = $(this);\n                    return {\n                        el: el,\n                        start: getElementStyles(this)\n                    };\n                });\n\n                // apply class change\n                applyClassChange = function () {\n                    $.each(classAnimationActions, function (i, action) {\n                        if (value[action]) {\n                            animated[action + \"Class\"](value[action]);\n                        }\n                    });\n                };\n                applyClassChange();\n\n                // map all animated objects again - calculate new styles and diff\n                allAnimations = allAnimations.map(function () {\n                    this.end = getElementStyles(this.el[0]);\n                    this.diff = styleDifference(this.start, this.end);\n                    return this;\n                });\n\n                // apply original class\n                animated.attr(\"class\", baseClass);\n\n                // map all animated objects again - this time collecting a promise\n                allAnimations = allAnimations.map(function () {\n                    var styleInfo = this,\n                        dfd = $.Deferred(),\n                        opts = $.extend({}, o, {\n                            queue: false,\n                            complete: function () {\n                                dfd.resolve(styleInfo);\n                            }\n                        });\n\n                    this.el.animate(this.diff, opts);\n                    return dfd.promise();\n                });\n\n                // once all animations have completed:\n                $.when.apply($, allAnimations.get()).done(function () {\n\n                    // set the final class\n                    applyClassChange();\n\n                    // for each animated element,\n                    // clear all css properties that were animated\n                    $.each(arguments, function () {\n                        var el = this.el;\n                        $.each(this.diff, function (key) {\n                            el.css(key, \"\");\n                        });\n                    });\n\n                    // this is guarnteed to be there if you use jQuery.speed()\n                    // it also handles dequeuing the next anim...\n                    o.complete.call(animated[0]);\n                });\n            });\n        };\n\n        $.fn.extend({\n            addClass: (function (orig) {\n                return function (classNames, speed, easing, callback) {\n                    return speed ?\n                        $.effects.animateClass.call(this,\n                            {add: classNames}, speed, easing, callback) :\n                        orig.apply(this, arguments);\n                };\n            })($.fn.addClass),\n\n            removeClass: (function (orig) {\n                return function (classNames, speed, easing, callback) {\n                    return arguments.length > 1 ?\n                        $.effects.animateClass.call(this,\n                            {remove: classNames}, speed, easing, callback) :\n                        orig.apply(this, arguments);\n                };\n            })($.fn.removeClass),\n\n            toggleClass: (function (orig) {\n                return function (classNames, force, speed, easing, callback) {\n                    if (typeof force === \"boolean\" || force === undefined) {\n                        if (!speed) {\n                            // without speed parameter\n                            return orig.apply(this, arguments);\n                        } else {\n                            return $.effects.animateClass.call(this,\n                                (force ? {add: classNames} : {remove: classNames}),\n                                speed, easing, callback);\n                        }\n                    } else {\n                        // without force parameter\n                        return $.effects.animateClass.call(this,\n                            {toggle: classNames}, force, speed, easing);\n                    }\n                };\n            })($.fn.toggleClass),\n\n            switchClass: function (remove, add, speed, easing, callback) {\n                return $.effects.animateClass.call(this, {\n                    add: add,\n                    remove: remove\n                }, speed, easing, callback);\n            }\n        });\n\n    })();\n\n    /******************************************************************************/\n    /*********************************** EFFECTS **********************************/\n    /******************************************************************************/\n\n    (function () {\n\n        $.extend($.effects, {\n            version: \"1.10.4\",\n\n            // Saves a set of properties in a data storage\n            save: function (element, set) {\n                for (var i = 0; i < set.length; i++) {\n                    if (set[i] !== null) {\n                        element.data(dataSpace + set[i], element[0].style[set[i]]);\n                    }\n                }\n            },\n\n            // Restores a set of previously saved properties from a data storage\n            restore: function (element, set) {\n                var val, i;\n                for (i = 0; i < set.length; i++) {\n                    if (set[i] !== null) {\n                        val = element.data(dataSpace + set[i]);\n                        // support: jQuery 1.6.2\n                        // http://bugs.jquery.com/ticket/9917\n                        // jQuery 1.6.2 incorrectly returns undefined for any falsy value.\n                        // We can't differentiate between \"\" and 0 here, so we just assume\n                        // empty string since it's likely to be a more common value...\n                        if (val === undefined) {\n                            val = \"\";\n                        }\n                        element.css(set[i], val);\n                    }\n                }\n            },\n\n            setMode: function (el, mode) {\n                if (mode === \"toggle\") {\n                    mode = el.is(\":hidden\") ? \"show\" : \"hide\";\n                }\n                return mode;\n            },\n\n            // Translates a [top,left] array into a baseline value\n            // this should be a little more flexible in the future to handle a string & hash\n            getBaseline: function (origin, original) {\n                var y, x;\n                switch (origin[0]) {\n                    case \"top\":\n                        y = 0;\n                        break;\n                    case \"middle\":\n                        y = 0.5;\n                        break;\n                    case \"bottom\":\n                        y = 1;\n                        break;\n                    default:\n                        y = origin[0] / original.height;\n                }\n                switch (origin[1]) {\n                    case \"left\":\n                        x = 0;\n                        break;\n                    case \"center\":\n                        x = 0.5;\n                        break;\n                    case \"right\":\n                        x = 1;\n                        break;\n                    default:\n                        x = origin[1] / original.width;\n                }\n                return {\n                    x: x,\n                    y: y\n                };\n            },\n\n            // Wraps the element around a wrapper that copies position properties\n            createWrapper: function (element) {\n\n                // if the element is already wrapped, return it\n                if (element.parent().is(\".ui-effects-wrapper\")) {\n                    return element.parent();\n                }\n\n                // wrap the element\n                var props = {\n                        width: element.outerWidth(true),\n                        height: element.outerHeight(true),\n                        \"float\": element.css(\"float\")\n                    },\n                    wrapper = $(\"<div></div>\")\n                        .addClass(\"ui-effects-wrapper\")\n                        .css({\n                            fontSize: \"100%\",\n                            background: \"transparent\",\n                            border: \"none\",\n                            margin: 0,\n                            padding: 0\n                        }),\n                    // Store the size in case width/height are defined in % - Fixes #5245\n                    size = {\n                        width: element.width(),\n                        height: element.height()\n                    },\n                    active = document.activeElement;\n\n                // support: Firefox\n                // Firefox incorrectly exposes anonymous content\n                // https://bugzilla.mozilla.org/show_bug.cgi?id=561664\n                try {\n                    active.id;\n                } catch (e) {\n                    active = document.body;\n                }\n\n                element.wrap(wrapper);\n\n                // Fixes #7595 - Elements lose focus when wrapped.\n                if (element[0] === active || $.contains(element[0], active)) {\n                    $(active).focus();\n                }\n\n                wrapper = element.parent(); //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element\n\n                // transfer positioning properties to the wrapper\n                if (element.css(\"position\") === \"static\") {\n                    wrapper.css({position: \"relative\"});\n                    element.css({position: \"relative\"});\n                } else {\n                    $.extend(props, {\n                        position: element.css(\"position\"),\n                        zIndex: element.css(\"z-index\")\n                    });\n                    $.each([\"top\", \"left\", \"bottom\", \"right\"], function (i, pos) {\n                        props[pos] = element.css(pos);\n                        if (isNaN(parseInt(props[pos], 10))) {\n                            props[pos] = \"auto\";\n                        }\n                    });\n                    element.css({\n                        position: \"relative\",\n                        top: 0,\n                        left: 0,\n                        right: \"auto\",\n                        bottom: \"auto\"\n                    });\n                }\n                element.css(size);\n\n                return wrapper.css(props).show();\n            },\n\n            removeWrapper: function (element) {\n                var active = document.activeElement;\n\n                if (element.parent().is(\".ui-effects-wrapper\")) {\n                    element.parent().replaceWith(element);\n\n                    // Fixes #7595 - Elements lose focus when wrapped.\n                    if (element[0] === active || $.contains(element[0], active)) {\n                        $(active).focus();\n                    }\n                }\n\n\n                return element;\n            },\n\n            setTransition: function (element, list, factor, value) {\n                value = value || {};\n                $.each(list, function (i, x) {\n                    var unit = element.cssUnit(x);\n                    if (unit[0] > 0) {\n                        value[x] = unit[0] * factor + unit[1];\n                    }\n                });\n                return value;\n            }\n        });\n\n// return an effect options object for the given parameters:\n        function _normalizeArguments(effect, options, speed, callback) {\n\n            // allow passing all options as the first parameter\n            if ($.isPlainObject(effect)) {\n                options = effect;\n                effect = effect.effect;\n            }\n\n            // convert to an object\n            effect = {effect: effect};\n\n            // catch (effect, null, ...)\n            if (options == null) {\n                options = {};\n            }\n\n            // catch (effect, callback)\n            if ($.isFunction(options)) {\n                callback = options;\n                speed = null;\n                options = {};\n            }\n\n            // catch (effect, speed, ?)\n            if (typeof options === \"number\" || $.fx.speeds[options]) {\n                callback = speed;\n                speed = options;\n                options = {};\n            }\n\n            // catch (effect, options, callback)\n            if ($.isFunction(speed)) {\n                callback = speed;\n                speed = null;\n            }\n\n            // add options to effect\n            if (options) {\n                $.extend(effect, options);\n            }\n\n            speed = speed || options.duration;\n            effect.duration = $.fx.off ? 0 :\n                typeof speed === \"number\" ? speed :\n                    speed in $.fx.speeds ? $.fx.speeds[speed] :\n                        $.fx.speeds._default;\n\n            effect.complete = callback || options.complete;\n\n            return effect;\n        }\n\n        function standardAnimationOption(option) {\n            // Valid standard speeds (nothing, number, named speed)\n            if (!option || typeof option === \"number\" || $.fx.speeds[option]) {\n                return true;\n            }\n\n            // Invalid strings - treat as \"normal\" speed\n            if (typeof option === \"string\" && !$.effects.effect[option]) {\n                return true;\n            }\n\n            // Complete callback\n            if ($.isFunction(option)) {\n                return true;\n            }\n\n            // Options hash (but not naming an effect)\n            if (typeof option === \"object\" && !option.effect) {\n                return true;\n            }\n\n            // Didn't match any standard API\n            return false;\n        }\n\n        $.fn.extend({\n            effect: function ( /* effect, options, speed, callback */) {\n                var args = _normalizeArguments.apply(this, arguments),\n                    mode = args.mode,\n                    queue = args.queue,\n                    effectMethod = $.effects.effect[args.effect];\n\n                if ($.fx.off || !effectMethod) {\n                    // delegate to the original method (e.g., .show()) if possible\n                    if (mode) {\n                        return this[mode](args.duration, args.complete);\n                    } else {\n                        return this.each(function () {\n                            if (args.complete) {\n                                args.complete.call(this);\n                            }\n                        });\n                    }\n                }\n\n                function run(next) {\n                    var elem = $(this),\n                        complete = args.complete,\n                        mode = args.mode;\n\n                    function done() {\n                        if ($.isFunction(complete)) {\n                            complete.call(elem[0]);\n                        }\n                        if ($.isFunction(next)) {\n                            next();\n                        }\n                    }\n\n                    // If the element already has the correct final state, delegate to\n                    // the core methods so the internal tracking of \"olddisplay\" works.\n                    if (elem.is(\":hidden\") ? mode === \"hide\" : mode === \"show\") {\n                        elem[mode]();\n                        done();\n                    } else {\n                        effectMethod.call(elem[0], args, done);\n                    }\n                }\n\n                return queue === false ? this.each(run) : this.queue(queue || \"fx\", run);\n            },\n\n            show: (function (orig) {\n                return function (option) {\n                    if (standardAnimationOption(option)) {\n                        return orig.apply(this, arguments);\n                    } else {\n                        var args = _normalizeArguments.apply(this, arguments);\n                        args.mode = \"show\";\n                        return this.effect.call(this, args);\n                    }\n                };\n            })($.fn.show),\n\n            hide: (function (orig) {\n                return function (option) {\n                    if (standardAnimationOption(option)) {\n                        return orig.apply(this, arguments);\n                    } else {\n                        var args = _normalizeArguments.apply(this, arguments);\n                        args.mode = \"hide\";\n                        return this.effect.call(this, args);\n                    }\n                };\n            })($.fn.hide),\n\n            toggle: (function (orig) {\n                return function (option) {\n                    if (standardAnimationOption(option) || typeof option === \"boolean\") {\n                        return orig.apply(this, arguments);\n                    } else {\n                        var args = _normalizeArguments.apply(this, arguments);\n                        args.mode = \"toggle\";\n                        return this.effect.call(this, args);\n                    }\n                };\n            })($.fn.toggle),\n\n            // helper functions\n            cssUnit: function (key) {\n                var style = this.css(key),\n                    val = [];\n\n                $.each([\"em\", \"px\", \"%\", \"pt\"], function (i, unit) {\n                    if (style.indexOf(unit) > 0) {\n                        val = [parseFloat(style), unit];\n                    }\n                });\n                return val;\n            }\n        });\n\n    })();\n\n    /******************************************************************************/\n    /*********************************** EASING ***********************************/\n    /******************************************************************************/\n\n    (function () {\n\n// based on easing equations from Robert Penner (http://www.robertpenner.com/easing)\n\n        var baseEasings = {};\n\n        $.each([\"Quad\", \"Cubic\", \"Quart\", \"Quint\", \"Expo\"], function (i, name) {\n            baseEasings[name] = function (p) {\n                return Math.pow(p, i + 2);\n            };\n        });\n\n        $.extend(baseEasings, {\n            Sine: function (p) {\n                return 1 - Math.cos(p * Math.PI / 2);\n            },\n            Circ: function (p) {\n                return 1 - Math.sqrt(1 - p * p);\n            },\n            Elastic: function (p) {\n                return p === 0 || p === 1 ? p :\n                    -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);\n            },\n            Back: function (p) {\n                return p * p * (3 * p - 2);\n            },\n            Bounce: function (p) {\n                var pow2,\n                    bounce = 4;\n\n                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {\n                }\n                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);\n            }\n        });\n\n        $.each(baseEasings, function (name, easeIn) {\n            $.easing[\"easeIn\" + name] = easeIn;\n            $.easing[\"easeOut\" + name] = function (p) {\n                return 1 - easeIn(1 - p);\n            };\n            $.easing[\"easeInOut\" + name] = function (p) {\n                return p < 0.5 ?\n                    easeIn(p * 2) / 2 :\n                    1 - easeIn(p * -2 + 2) / 2;\n            };\n        });\n\n    })();\n\n});\n","jquery/ui-modules/slider.js":"/*!\n * jQuery UI Slider - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/slider/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/core',\n    'jquery-ui-modules/mouse'\n], function ($, undefined) {\n\n// number of pages in a slider\n// (how many times can you page up/down to go through the whole range)\n    var numPages = 5;\n\n    $.widget(\"ui.slider\", $.ui.mouse, {\n        version: \"1.10.4\",\n        widgetEventPrefix: \"slide\",\n\n        options: {\n            animate: false,\n            distance: 0,\n            max: 100,\n            min: 0,\n            orientation: \"horizontal\",\n            range: false,\n            step: 1,\n            value: 0,\n            values: null,\n\n            // callbacks\n            change: null,\n            slide: null,\n            start: null,\n            stop: null\n        },\n\n        _create: function () {\n            this._keySliding = false;\n            this._mouseSliding = false;\n            this._animateOff = true;\n            this._handleIndex = null;\n            this._detectOrientation();\n            this._mouseInit();\n\n            this.element\n                .addClass(\"ui-slider\" +\n                    \" ui-slider-\" + this.orientation +\n                    \" ui-widget\" +\n                    \" ui-widget-content\" +\n                    \" ui-corner-all\");\n\n            this._refresh();\n            this._setOption(\"disabled\", this.options.disabled);\n\n            this._animateOff = false;\n        },\n\n        _refresh: function () {\n            this._createRange();\n            this._createHandles();\n            this._setupEvents();\n            this._refreshValue();\n        },\n\n        _createHandles: function () {\n            var i, handleCount,\n                options = this.options,\n                existingHandles = this.element.find(\".ui-slider-handle\").addClass(\"ui-state-default ui-corner-all\"),\n                handle = \"<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>\",\n                handles = [];\n\n            handleCount = (options.values && options.values.length) || 1;\n\n            if (existingHandles.length > handleCount) {\n                existingHandles.slice(handleCount).remove();\n                existingHandles = existingHandles.slice(0, handleCount);\n            }\n\n            for (i = existingHandles.length; i < handleCount; i++) {\n                handles.push(handle);\n            }\n\n            this.handles = existingHandles.add($(handles.join(\"\")).appendTo(this.element));\n\n            this.handle = this.handles.eq(0);\n\n            this.handles.each(function (i) {\n                $(this).data(\"ui-slider-handle-index\", i);\n            });\n        },\n\n        _createRange: function () {\n            var options = this.options,\n                classes = \"\";\n\n            if (options.range) {\n                if (options.range === true) {\n                    if (!options.values) {\n                        options.values = [this._valueMin(), this._valueMin()];\n                    } else if (options.values.length && options.values.length !== 2) {\n                        options.values = [options.values[0], options.values[0]];\n                    } else if ($.isArray(options.values)) {\n                        options.values = options.values.slice(0);\n                    }\n                }\n\n                if (!this.range || !this.range.length) {\n                    this.range = $(\"<div></div>\")\n                        .appendTo(this.element);\n\n                    classes = \"ui-slider-range\" +\n                        // note: this isn't the most fittingly semantic framework class for this element,\n                        // but worked best visually with a variety of themes\n                        \" ui-widget-header ui-corner-all\";\n                } else {\n                    this.range.removeClass(\"ui-slider-range-min ui-slider-range-max\")\n                    // Handle range switching from true to min/max\n                        .css({\n                            \"left\": \"\",\n                            \"bottom\": \"\"\n                        });\n                }\n\n                this.range.addClass(classes +\n                    ((options.range === \"min\" || options.range === \"max\") ? \" ui-slider-range-\" + options.range : \"\"));\n            } else {\n                if (this.range) {\n                    this.range.remove();\n                }\n                this.range = null;\n            }\n        },\n\n        _setupEvents: function () {\n            var elements = this.handles.add(this.range).filter(\"a\");\n            this._off(elements);\n            this._on(elements, this._handleEvents);\n            this._hoverable(elements);\n            this._focusable(elements);\n        },\n\n        _destroy: function () {\n            this.handles.remove();\n            if (this.range) {\n                this.range.remove();\n            }\n\n            this.element\n                .removeClass(\"ui-slider\" +\n                    \" ui-slider-horizontal\" +\n                    \" ui-slider-vertical\" +\n                    \" ui-widget\" +\n                    \" ui-widget-content\" +\n                    \" ui-corner-all\");\n\n            this._mouseDestroy();\n        },\n\n        _mouseCapture: function (event) {\n            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle,\n                that = this,\n                o = this.options;\n\n            if (o.disabled) {\n                return false;\n            }\n\n            this.elementSize = {\n                width: this.element.outerWidth(),\n                height: this.element.outerHeight()\n            };\n            this.elementOffset = this.element.offset();\n\n            position = {x: event.pageX, y: event.pageY};\n            normValue = this._normValueFromMouse(position);\n            distance = this._valueMax() - this._valueMin() + 1;\n            this.handles.each(function (i) {\n                var thisDistance = Math.abs(normValue - that.values(i));\n                if ((distance > thisDistance) ||\n                    (distance === thisDistance &&\n                        (i === that._lastChangedValue || that.values(i) === o.min))) {\n                    distance = thisDistance;\n                    closestHandle = $(this);\n                    index = i;\n                }\n            });\n\n            allowed = this._start(event, index);\n            if (allowed === false) {\n                return false;\n            }\n            this._mouseSliding = true;\n\n            this._handleIndex = index;\n\n            closestHandle\n                .addClass(\"ui-state-active\")\n                .focus();\n\n            offset = closestHandle.offset();\n            mouseOverHandle = !$(event.target).parents().addBack().is(\".ui-slider-handle\");\n            this._clickOffset = mouseOverHandle ? {left: 0, top: 0} : {\n                left: event.pageX - offset.left - (closestHandle.width() / 2),\n                top: event.pageY - offset.top -\n                    (closestHandle.height() / 2) -\n                    (parseInt(closestHandle.css(\"borderTopWidth\"), 10) || 0) -\n                    (parseInt(closestHandle.css(\"borderBottomWidth\"), 10) || 0) +\n                    (parseInt(closestHandle.css(\"marginTop\"), 10) || 0)\n            };\n\n            if (!this.handles.hasClass(\"ui-state-hover\")) {\n                this._slide(event, index, normValue);\n            }\n            this._animateOff = true;\n            return true;\n        },\n\n        _mouseStart: function () {\n            return true;\n        },\n\n        _mouseDrag: function (event) {\n            var position = {x: event.pageX, y: event.pageY},\n                normValue = this._normValueFromMouse(position);\n\n            this._slide(event, this._handleIndex, normValue);\n\n            return false;\n        },\n\n        _mouseStop: function (event) {\n            this.handles.removeClass(\"ui-state-active\");\n            this._mouseSliding = false;\n\n            this._stop(event, this._handleIndex);\n            this._change(event, this._handleIndex);\n\n            this._handleIndex = null;\n            this._clickOffset = null;\n            this._animateOff = false;\n\n            return false;\n        },\n\n        _detectOrientation: function () {\n            this.orientation = (this.options.orientation === \"vertical\") ? \"vertical\" : \"horizontal\";\n        },\n\n        _normValueFromMouse: function (position) {\n            var pixelTotal,\n                pixelMouse,\n                percentMouse,\n                valueTotal,\n                valueMouse;\n\n            if (this.orientation === \"horizontal\") {\n                pixelTotal = this.elementSize.width;\n                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);\n            } else {\n                pixelTotal = this.elementSize.height;\n                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);\n            }\n\n            percentMouse = (pixelMouse / pixelTotal);\n            if (percentMouse > 1) {\n                percentMouse = 1;\n            }\n            if (percentMouse < 0) {\n                percentMouse = 0;\n            }\n            if (this.orientation === \"vertical\") {\n                percentMouse = 1 - percentMouse;\n            }\n\n            valueTotal = this._valueMax() - this._valueMin();\n            valueMouse = this._valueMin() + percentMouse * valueTotal;\n\n            return this._trimAlignValue(valueMouse);\n        },\n\n        _start: function (event, index) {\n            var uiHash = {\n                handle: this.handles[index],\n                value: this.value()\n            };\n            if (this.options.values && this.options.values.length) {\n                uiHash.value = this.values(index);\n                uiHash.values = this.values();\n            }\n            return this._trigger(\"start\", event, uiHash);\n        },\n\n        _slide: function (event, index, newVal) {\n            var otherVal,\n                newValues,\n                allowed;\n\n            if (this.options.values && this.options.values.length) {\n                otherVal = this.values(index ? 0 : 1);\n\n                if ((this.options.values.length === 2 && this.options.range === true) &&\n                    ((index === 0 && newVal > otherVal) || (index === 1 && newVal < otherVal))\n                ) {\n                    newVal = otherVal;\n                }\n\n                if (newVal !== this.values(index)) {\n                    newValues = this.values();\n                    newValues[index] = newVal;\n                    // A slide can be canceled by returning false from the slide callback\n                    allowed = this._trigger(\"slide\", event, {\n                        handle: this.handles[index],\n                        value: newVal,\n                        values: newValues\n                    });\n                    otherVal = this.values(index ? 0 : 1);\n                    if (allowed !== false) {\n                        this.values(index, newVal);\n                    }\n                }\n            } else {\n                if (newVal !== this.value()) {\n                    // A slide can be canceled by returning false from the slide callback\n                    allowed = this._trigger(\"slide\", event, {\n                        handle: this.handles[index],\n                        value: newVal\n                    });\n                    if (allowed !== false) {\n                        this.value(newVal);\n                    }\n                }\n            }\n        },\n\n        _stop: function (event, index) {\n            var uiHash = {\n                handle: this.handles[index],\n                value: this.value()\n            };\n            if (this.options.values && this.options.values.length) {\n                uiHash.value = this.values(index);\n                uiHash.values = this.values();\n            }\n\n            this._trigger(\"stop\", event, uiHash);\n        },\n\n        _change: function (event, index) {\n            if (!this._keySliding && !this._mouseSliding) {\n                var uiHash = {\n                    handle: this.handles[index],\n                    value: this.value()\n                };\n                if (this.options.values && this.options.values.length) {\n                    uiHash.value = this.values(index);\n                    uiHash.values = this.values();\n                }\n\n                //store the last changed value index for reference when handles overlap\n                this._lastChangedValue = index;\n\n                this._trigger(\"change\", event, uiHash);\n            }\n        },\n\n        value: function (newValue) {\n            if (arguments.length) {\n                this.options.value = this._trimAlignValue(newValue);\n                this._refreshValue();\n                this._change(null, 0);\n                return;\n            }\n\n            return this._value();\n        },\n\n        values: function (index, newValue) {\n            var vals,\n                newValues,\n                i;\n\n            if (arguments.length > 1) {\n                this.options.values[index] = this._trimAlignValue(newValue);\n                this._refreshValue();\n                this._change(null, index);\n                return;\n            }\n\n            if (arguments.length) {\n                if ($.isArray(arguments[0])) {\n                    vals = this.options.values;\n                    newValues = arguments[0];\n                    for (i = 0; i < vals.length; i += 1) {\n                        vals[i] = this._trimAlignValue(newValues[i]);\n                        this._change(null, i);\n                    }\n                    this._refreshValue();\n                } else {\n                    if (this.options.values && this.options.values.length) {\n                        return this._values(index);\n                    } else {\n                        return this.value();\n                    }\n                }\n            } else {\n                return this._values();\n            }\n        },\n\n        _setOption: function (key, value) {\n            var i,\n                valsLength = 0;\n\n            if (key === \"range\" && this.options.range === true) {\n                if (value === \"min\") {\n                    this.options.value = this._values(0);\n                    this.options.values = null;\n                } else if (value === \"max\") {\n                    this.options.value = this._values(this.options.values.length - 1);\n                    this.options.values = null;\n                }\n            }\n\n            if ($.isArray(this.options.values)) {\n                valsLength = this.options.values.length;\n            }\n\n            $.Widget.prototype._setOption.apply(this, arguments);\n\n            switch (key) {\n                case \"orientation\":\n                    this._detectOrientation();\n                    this.element\n                        .removeClass(\"ui-slider-horizontal ui-slider-vertical\")\n                        .addClass(\"ui-slider-\" + this.orientation);\n                    this._refreshValue();\n                    break;\n                case \"value\":\n                    this._animateOff = true;\n                    this._refreshValue();\n                    this._change(null, 0);\n                    this._animateOff = false;\n                    break;\n                case \"values\":\n                    this._animateOff = true;\n                    this._refreshValue();\n                    for (i = 0; i < valsLength; i += 1) {\n                        this._change(null, i);\n                    }\n                    this._animateOff = false;\n                    break;\n                case \"min\":\n                case \"max\":\n                    this._animateOff = true;\n                    this._refreshValue();\n                    this._animateOff = false;\n                    break;\n                case \"range\":\n                    this._animateOff = true;\n                    this._refresh();\n                    this._animateOff = false;\n                    break;\n            }\n        },\n\n        //internal value getter\n        // _value() returns value trimmed by min and max, aligned by step\n        _value: function () {\n            var val = this.options.value;\n            val = this._trimAlignValue(val);\n\n            return val;\n        },\n\n        //internal values getter\n        // _values() returns array of values trimmed by min and max, aligned by step\n        // _values( index ) returns single value trimmed by min and max, aligned by step\n        _values: function (index) {\n            var val,\n                vals,\n                i;\n\n            if (arguments.length) {\n                val = this.options.values[index];\n                val = this._trimAlignValue(val);\n\n                return val;\n            } else if (this.options.values && this.options.values.length) {\n                // .slice() creates a copy of the array\n                // this copy gets trimmed by min and max and then returned\n                vals = this.options.values.slice();\n                for (i = 0; i < vals.length; i += 1) {\n                    vals[i] = this._trimAlignValue(vals[i]);\n                }\n\n                return vals;\n            } else {\n                return [];\n            }\n        },\n\n        // returns the step-aligned value that val is closest to, between (inclusive) min and max\n        _trimAlignValue: function (val) {\n            if (val <= this._valueMin()) {\n                return this._valueMin();\n            }\n            if (val >= this._valueMax()) {\n                return this._valueMax();\n            }\n            var step = (this.options.step > 0) ? this.options.step : 1,\n                valModStep = (val - this._valueMin()) % step,\n                alignValue = val - valModStep;\n\n            if (Math.abs(valModStep) * 2 >= step) {\n                alignValue += (valModStep > 0) ? step : (-step);\n            }\n\n            // Since JavaScript has problems with large floats, round\n            // the final value to 5 digits after the decimal point (see #4124)\n            return parseFloat(alignValue.toFixed(5));\n        },\n\n        _valueMin: function () {\n            return this.options.min;\n        },\n\n        _valueMax: function () {\n            return this.options.max;\n        },\n\n        _refreshValue: function () {\n            var lastValPercent, valPercent, value, valueMin, valueMax,\n                oRange = this.options.range,\n                o = this.options,\n                that = this,\n                animate = (!this._animateOff) ? o.animate : false,\n                _set = {};\n\n            if (this.options.values && this.options.values.length) {\n                this.handles.each(function (i) {\n                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;\n                    _set[that.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n                    $(this).stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n                    if (that.options.range === true) {\n                        if (that.orientation === \"horizontal\") {\n                            if (i === 0) {\n                                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({left: valPercent + \"%\"}, o.animate);\n                            }\n                            if (i === 1) {\n                                that.range[animate ? \"animate\" : \"css\"]({width: (valPercent - lastValPercent) + \"%\"}, {\n                                    queue: false,\n                                    duration: o.animate\n                                });\n                            }\n                        } else {\n                            if (i === 0) {\n                                that.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({bottom: (valPercent) + \"%\"}, o.animate);\n                            }\n                            if (i === 1) {\n                                that.range[animate ? \"animate\" : \"css\"]({height: (valPercent - lastValPercent) + \"%\"}, {\n                                    queue: false,\n                                    duration: o.animate\n                                });\n                            }\n                        }\n                    }\n                    lastValPercent = valPercent;\n                });\n            } else {\n                value = this.value();\n                valueMin = this._valueMin();\n                valueMax = this._valueMax();\n                valPercent = (valueMax !== valueMin) ?\n                    (value - valueMin) / (valueMax - valueMin) * 100 :\n                    0;\n                _set[this.orientation === \"horizontal\" ? \"left\" : \"bottom\"] = valPercent + \"%\";\n                this.handle.stop(1, 1)[animate ? \"animate\" : \"css\"](_set, o.animate);\n\n                if (oRange === \"min\" && this.orientation === \"horizontal\") {\n                    this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({width: valPercent + \"%\"}, o.animate);\n                }\n                if (oRange === \"max\" && this.orientation === \"horizontal\") {\n                    this.range[animate ? \"animate\" : \"css\"]({width: (100 - valPercent) + \"%\"}, {\n                        queue: false,\n                        duration: o.animate\n                    });\n                }\n                if (oRange === \"min\" && this.orientation === \"vertical\") {\n                    this.range.stop(1, 1)[animate ? \"animate\" : \"css\"]({height: valPercent + \"%\"}, o.animate);\n                }\n                if (oRange === \"max\" && this.orientation === \"vertical\") {\n                    this.range[animate ? \"animate\" : \"css\"]({height: (100 - valPercent) + \"%\"}, {\n                        queue: false,\n                        duration: o.animate\n                    });\n                }\n            }\n        },\n\n        _handleEvents: {\n            keydown: function (event) {\n                var allowed, curVal, newVal, step,\n                    index = $(event.target).data(\"ui-slider-handle-index\");\n\n                switch (event.keyCode) {\n                    case $.ui.keyCode.HOME:\n                    case $.ui.keyCode.END:\n                    case $.ui.keyCode.PAGE_UP:\n                    case $.ui.keyCode.PAGE_DOWN:\n                    case $.ui.keyCode.UP:\n                    case $.ui.keyCode.RIGHT:\n                    case $.ui.keyCode.DOWN:\n                    case $.ui.keyCode.LEFT:\n                        event.preventDefault();\n                        if (!this._keySliding) {\n                            this._keySliding = true;\n                            $(event.target).addClass(\"ui-state-active\");\n                            allowed = this._start(event, index);\n                            if (allowed === false) {\n                                return;\n                            }\n                        }\n                        break;\n                }\n\n                step = this.options.step;\n                if (this.options.values && this.options.values.length) {\n                    curVal = newVal = this.values(index);\n                } else {\n                    curVal = newVal = this.value();\n                }\n\n                switch (event.keyCode) {\n                    case $.ui.keyCode.HOME:\n                        newVal = this._valueMin();\n                        break;\n                    case $.ui.keyCode.END:\n                        newVal = this._valueMax();\n                        break;\n                    case $.ui.keyCode.PAGE_UP:\n                        newVal = this._trimAlignValue(curVal + ((this._valueMax() - this._valueMin()) / numPages));\n                        break;\n                    case $.ui.keyCode.PAGE_DOWN:\n                        newVal = this._trimAlignValue(curVal - ((this._valueMax() - this._valueMin()) / numPages));\n                        break;\n                    case $.ui.keyCode.UP:\n                    case $.ui.keyCode.RIGHT:\n                        if (curVal === this._valueMax()) {\n                            return;\n                        }\n                        newVal = this._trimAlignValue(curVal + step);\n                        break;\n                    case $.ui.keyCode.DOWN:\n                    case $.ui.keyCode.LEFT:\n                        if (curVal === this._valueMin()) {\n                            return;\n                        }\n                        newVal = this._trimAlignValue(curVal - step);\n                        break;\n                }\n\n                this._slide(event, index, newVal);\n            },\n            click: function (event) {\n                event.preventDefault();\n            },\n            keyup: function (event) {\n                var index = $(event.target).data(\"ui-slider-handle-index\");\n\n                if (this._keySliding) {\n                    this._keySliding = false;\n                    this._stop(event, index);\n                    this._change(event, index);\n                    $(event.target).removeClass(\"ui-state-active\");\n                }\n            }\n        }\n\n    });\n\n});\n","jquery/ui-modules/effect-clip.js":"/*!\n * jQuery UI Effects Clip - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/clip-effect/\n */\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.clip = function (o, done) {\n        // Create element\n        var el = $(this),\n            props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n            mode = $.effects.setMode(el, o.mode || \"hide\"),\n            show = mode === \"show\",\n            direction = o.direction || \"vertical\",\n            vert = direction === \"vertical\",\n            size = vert ? \"height\" : \"width\",\n            position = vert ? \"top\" : \"left\",\n            animation = {},\n            wrapper, animate, distance;\n\n        // Save & Show\n        $.effects.save(el, props);\n        el.show();\n\n        // Create Wrapper\n        wrapper = $.effects.createWrapper(el).css({\n            overflow: \"hidden\"\n        });\n        animate = (el[0].tagName === \"IMG\") ? wrapper : el;\n        distance = animate[size]();\n\n        // Shift\n        if (show) {\n            animate.css(size, 0);\n            animate.css(position, distance / 2);\n        }\n\n        // Create Animation Object:\n        animation[size] = show ? distance : 0;\n        animation[position] = show ? 0 : distance / 2;\n\n        // Animate\n        animate.animate(animation, {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: function () {\n                if (!show) {\n                    el.hide();\n                }\n                $.effects.restore(el, props);\n                $.effects.removeWrapper(el);\n                done();\n            }\n        });\n\n    };\n\n});\n","jquery/ui-modules/timepicker.js":"/*! jQuery Timepicker Addon - v1.4.3 - 2013-11-30\n* http://trentrichardson.com/examples/timepicker\n* Copyright (c) 2013 Trent Richardson; Licensed MIT */\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            \"jquery\",\n            \"jquery-ui-modules/datepicker\",\n            \"jquery-ui-modules/slider\"\n        ], factory);\n    } else {\n        factory(jQuery);\n    }\n}(function ($) {\n\n    /*\n    * Lets not redefine timepicker, Prevent \"Uncaught RangeError: Maximum call stack size exceeded\"\n    */\n    $.ui.timepicker = $.ui.timepicker || {};\n    if ($.ui.timepicker.version) {\n        return;\n    }\n\n    /*\n    * Extend jQueryUI, get it started with our version number\n    */\n    $.extend($.ui, {\n        timepicker: {\n            version: \"1.4.3\"\n        }\n    });\n\n    /*\n    * Timepicker manager.\n    * Use the singleton instance of this class, $.timepicker, to interact with the time picker.\n    * Settings for (groups of) time pickers are maintained in an instance object,\n    * allowing multiple different settings on the same page.\n    */\n    var Timepicker = function () {\n        this.regional = []; // Available regional settings, indexed by language code\n        this.regional[''] = { // Default regional settings\n            currentText: 'Now',\n            closeText: 'Done',\n            amNames: ['AM', 'A'],\n            pmNames: ['PM', 'P'],\n            timeFormat: 'HH:mm',\n            timeSuffix: '',\n            timeOnlyTitle: 'Choose Time',\n            timeText: 'Time',\n            hourText: 'Hour',\n            minuteText: 'Minute',\n            secondText: 'Second',\n            millisecText: 'Millisecond',\n            microsecText: 'Microsecond',\n            timezoneText: 'Time Zone',\n            isRTL: false\n        };\n        this._defaults = { // Global defaults for all the datetime picker instances\n            showButtonPanel: true,\n            timeOnly: false,\n            showHour: null,\n            showMinute: null,\n            showSecond: null,\n            showMillisec: null,\n            showMicrosec: null,\n            showTimezone: null,\n            showTime: true,\n            stepHour: 1,\n            stepMinute: 1,\n            stepSecond: 1,\n            stepMillisec: 1,\n            stepMicrosec: 1,\n            hour: 0,\n            minute: 0,\n            second: 0,\n            millisec: 0,\n            microsec: 0,\n            timezone: null,\n            hourMin: 0,\n            minuteMin: 0,\n            secondMin: 0,\n            millisecMin: 0,\n            microsecMin: 0,\n            hourMax: 23,\n            minuteMax: 59,\n            secondMax: 59,\n            millisecMax: 999,\n            microsecMax: 999,\n            minDateTime: null,\n            maxDateTime: null,\n            onSelect: null,\n            hourGrid: 0,\n            minuteGrid: 0,\n            secondGrid: 0,\n            millisecGrid: 0,\n            microsecGrid: 0,\n            alwaysSetTime: true,\n            separator: ' ',\n            altFieldTimeOnly: true,\n            altTimeFormat: null,\n            altSeparator: null,\n            altTimeSuffix: null,\n            pickerTimeFormat: null,\n            pickerTimeSuffix: null,\n            showTimepicker: true,\n            timezoneList: null,\n            addSliderAccess: false,\n            sliderAccessArgs: null,\n            controlType: 'slider',\n            defaultValue: null,\n            parse: 'strict'\n        };\n        $.extend(this._defaults, this.regional['']);\n    };\n\n    $.extend(Timepicker.prototype, {\n        $input: null,\n        $altInput: null,\n        $timeObj: null,\n        inst: null,\n        hour_slider: null,\n        minute_slider: null,\n        second_slider: null,\n        millisec_slider: null,\n        microsec_slider: null,\n        timezone_select: null,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisec: 0,\n        microsec: 0,\n        timezone: null,\n        hourMinOriginal: null,\n        minuteMinOriginal: null,\n        secondMinOriginal: null,\n        millisecMinOriginal: null,\n        microsecMinOriginal: null,\n        hourMaxOriginal: null,\n        minuteMaxOriginal: null,\n        secondMaxOriginal: null,\n        millisecMaxOriginal: null,\n        microsecMaxOriginal: null,\n        ampm: '',\n        formattedDate: '',\n        formattedTime: '',\n        formattedDateTime: '',\n        timezoneList: null,\n        units: ['hour', 'minute', 'second', 'millisec', 'microsec'],\n        support: {},\n        control: null,\n\n        /*\n        * Override the default settings for all instances of the time picker.\n        * @param  {Object} settings  object - the new settings to use as defaults (anonymous object)\n        * @return {Object} the manager object\n        */\n        setDefaults: function (settings) {\n            extendRemove(this._defaults, settings || {});\n            return this;\n        },\n\n        /*\n        * Create a new Timepicker instance\n        */\n        _newInst: function ($input, opts) {\n            var tp_inst = new Timepicker(),\n                inlineSettings = {},\n                fns = {},\n                overrides, i;\n\n            for (var attrName in this._defaults) {\n                if (this._defaults.hasOwnProperty(attrName)) {\n                    var attrValue = $input.attr('time:' + attrName);\n                    if (attrValue) {\n                        try {\n                            inlineSettings[attrName] = eval(attrValue);\n                        } catch (err) {\n                            inlineSettings[attrName] = attrValue;\n                        }\n                    }\n                }\n            }\n\n            overrides = {\n                beforeShow: function (input, dp_inst) {\n                    if ($.isFunction(tp_inst._defaults.evnts.beforeShow)) {\n                        return tp_inst._defaults.evnts.beforeShow.call($input[0], input, dp_inst, tp_inst);\n                    }\n                },\n                onChangeMonthYear: function (year, month, dp_inst) {\n                    // Update the time as well : this prevents the time from disappearing from the $input field.\n                    tp_inst._updateDateTime(dp_inst);\n                    if ($.isFunction(tp_inst._defaults.evnts.onChangeMonthYear)) {\n                        tp_inst._defaults.evnts.onChangeMonthYear.call($input[0], year, month, dp_inst, tp_inst);\n                    }\n                },\n                onClose: function (dateText, dp_inst) {\n                    if (tp_inst.timeDefined === true && $input.val() !== '') {\n                        tp_inst._updateDateTime(dp_inst);\n                    }\n                    if ($.isFunction(tp_inst._defaults.evnts.onClose)) {\n                        tp_inst._defaults.evnts.onClose.call($input[0], dateText, dp_inst, tp_inst);\n                    }\n                }\n            };\n            for (i in overrides) {\n                if (overrides.hasOwnProperty(i)) {\n                    fns[i] = opts[i] || null;\n                }\n            }\n\n            tp_inst._defaults = $.extend({}, this._defaults, inlineSettings, opts, overrides, {\n                evnts: fns,\n                timepicker: tp_inst // add timepicker as a property of datepicker: $.datepicker._get(dp_inst, 'timepicker');\n            });\n            tp_inst.amNames = $.map(tp_inst._defaults.amNames, function (val) {\n                return val.toUpperCase();\n            });\n            tp_inst.pmNames = $.map(tp_inst._defaults.pmNames, function (val) {\n                return val.toUpperCase();\n            });\n\n            // detect which units are supported\n            tp_inst.support = detectSupport(\n                tp_inst._defaults.timeFormat +\n                (tp_inst._defaults.pickerTimeFormat ? tp_inst._defaults.pickerTimeFormat : '') +\n                (tp_inst._defaults.altTimeFormat ? tp_inst._defaults.altTimeFormat : ''));\n\n            // controlType is string - key to our this._controls\n            if (typeof (tp_inst._defaults.controlType) === 'string') {\n                if (tp_inst._defaults.controlType === 'slider' && typeof ($.ui.slider) === 'undefined') {\n                    tp_inst._defaults.controlType = 'select';\n                }\n                tp_inst.control = tp_inst._controls[tp_inst._defaults.controlType];\n            }\n            // controlType is an object and must implement create, options, value methods\n            else {\n                tp_inst.control = tp_inst._defaults.controlType;\n            }\n\n            // prep the timezone options\n            var timezoneList = [-720, -660, -600, -570, -540, -480, -420, -360, -300, -270, -240, -210, -180, -120, -60,\n                0, 60, 120, 180, 210, 240, 270, 300, 330, 345, 360, 390, 420, 480, 525, 540, 570, 600, 630, 660, 690, 720, 765, 780, 840];\n            if (tp_inst._defaults.timezoneList !== null) {\n                timezoneList = tp_inst._defaults.timezoneList;\n            }\n            var tzl = timezoneList.length, tzi = 0, tzv = null;\n            if (tzl > 0 && typeof timezoneList[0] !== 'object') {\n                for (; tzi < tzl; tzi++) {\n                    tzv = timezoneList[tzi];\n                    timezoneList[tzi] = {\n                        value: tzv,\n                        label: $.timepicker.timezoneOffsetString(tzv, tp_inst.support.iso8601)\n                    };\n                }\n            }\n            tp_inst._defaults.timezoneList = timezoneList;\n\n            // set the default units\n            tp_inst.timezone = tp_inst._defaults.timezone !== null ? $.timepicker.timezoneOffsetNumber(tp_inst._defaults.timezone) :\n                ((new Date()).getTimezoneOffset() * -1);\n            tp_inst.hour = tp_inst._defaults.hour < tp_inst._defaults.hourMin ? tp_inst._defaults.hourMin :\n                tp_inst._defaults.hour > tp_inst._defaults.hourMax ? tp_inst._defaults.hourMax : tp_inst._defaults.hour;\n            tp_inst.minute = tp_inst._defaults.minute < tp_inst._defaults.minuteMin ? tp_inst._defaults.minuteMin :\n                tp_inst._defaults.minute > tp_inst._defaults.minuteMax ? tp_inst._defaults.minuteMax : tp_inst._defaults.minute;\n            tp_inst.second = tp_inst._defaults.second < tp_inst._defaults.secondMin ? tp_inst._defaults.secondMin :\n                tp_inst._defaults.second > tp_inst._defaults.secondMax ? tp_inst._defaults.secondMax : tp_inst._defaults.second;\n            tp_inst.millisec = tp_inst._defaults.millisec < tp_inst._defaults.millisecMin ? tp_inst._defaults.millisecMin :\n                tp_inst._defaults.millisec > tp_inst._defaults.millisecMax ? tp_inst._defaults.millisecMax : tp_inst._defaults.millisec;\n            tp_inst.microsec = tp_inst._defaults.microsec < tp_inst._defaults.microsecMin ? tp_inst._defaults.microsecMin :\n                tp_inst._defaults.microsec > tp_inst._defaults.microsecMax ? tp_inst._defaults.microsecMax : tp_inst._defaults.microsec;\n            tp_inst.ampm = '';\n            tp_inst.$input = $input;\n\n            if (tp_inst._defaults.altField) {\n                tp_inst.$altInput = $(tp_inst._defaults.altField).css({\n                    cursor: 'pointer'\n                }).focus(function () {\n                    $input.trigger(\"focus\");\n                });\n            }\n\n            if (tp_inst._defaults.minDate === 0 || tp_inst._defaults.minDateTime === 0) {\n                tp_inst._defaults.minDate = new Date();\n            }\n            if (tp_inst._defaults.maxDate === 0 || tp_inst._defaults.maxDateTime === 0) {\n                tp_inst._defaults.maxDate = new Date();\n            }\n\n            // datepicker needs minDate/maxDate, timepicker needs minDateTime/maxDateTime..\n            if (tp_inst._defaults.minDate !== undefined && tp_inst._defaults.minDate instanceof Date) {\n                tp_inst._defaults.minDateTime = new Date(tp_inst._defaults.minDate.getTime());\n            }\n            if (tp_inst._defaults.minDateTime !== undefined && tp_inst._defaults.minDateTime instanceof Date) {\n                tp_inst._defaults.minDate = new Date(tp_inst._defaults.minDateTime.getTime());\n            }\n            if (tp_inst._defaults.maxDate !== undefined && tp_inst._defaults.maxDate instanceof Date) {\n                tp_inst._defaults.maxDateTime = new Date(tp_inst._defaults.maxDate.getTime());\n            }\n            if (tp_inst._defaults.maxDateTime !== undefined && tp_inst._defaults.maxDateTime instanceof Date) {\n                tp_inst._defaults.maxDate = new Date(tp_inst._defaults.maxDateTime.getTime());\n            }\n            tp_inst.$input.bind('focus', function () {\n                tp_inst._onFocus();\n            });\n\n            return tp_inst;\n        },\n\n        /*\n        * add our sliders to the calendar\n        */\n        _addTimePicker: function (dp_inst) {\n            var currDT = (this.$altInput && this._defaults.altFieldTimeOnly) ? this.$input.val() + ' ' + this.$altInput.val() : this.$input.val();\n\n            this.timeDefined = this._parseTime(currDT);\n            this._limitMinMaxDateTime(dp_inst, false);\n            this._injectTimePicker();\n        },\n\n        /*\n        * parse the time string from input value or _setTime\n        */\n        _parseTime: function (timeString, withDate) {\n            if (!this.inst) {\n                this.inst = $.datepicker._getInst(this.$input[0]);\n            }\n\n            if (withDate || !this._defaults.timeOnly) {\n                var dp_dateFormat = $.datepicker._get(this.inst, 'dateFormat');\n                try {\n                    var parseRes = parseDateTimeInternal(dp_dateFormat, this._defaults.timeFormat, timeString, $.datepicker._getFormatConfig(this.inst), this._defaults);\n                    if (!parseRes.timeObj) {\n                        return false;\n                    }\n                    $.extend(this, parseRes.timeObj);\n                } catch (err) {\n                    $.timepicker.log(\"Error parsing the date/time string: \" + err +\n                        \"\\ndate/time string = \" + timeString +\n                        \"\\ntimeFormat = \" + this._defaults.timeFormat +\n                        \"\\ndateFormat = \" + dp_dateFormat);\n                    return false;\n                }\n                return true;\n            } else {\n                var timeObj = $.datepicker.parseTime(this._defaults.timeFormat, timeString, this._defaults);\n                if (!timeObj) {\n                    return false;\n                }\n                $.extend(this, timeObj);\n                return true;\n            }\n        },\n\n        /*\n        * generate and inject html for timepicker into ui datepicker\n        */\n        _injectTimePicker: function () {\n            var $dp = this.inst.dpDiv,\n                o = this.inst.settings,\n                tp_inst = this,\n                litem = '',\n                uitem = '',\n                show = null,\n                max = {},\n                gridSize = {},\n                size = null,\n                i = 0,\n                l = 0;\n\n            // Prevent displaying twice\n            if ($dp.find(\"div.ui-timepicker-div\").length === 0 && o.showTimepicker) {\n                var noDisplay = ' style=\"display:none;\"',\n                    html = '<div class=\"ui-timepicker-div' + (o.isRTL ? ' ui-timepicker-rtl' : '') + '\"><dl>' + '<dt class=\"ui_tpicker_time_label\"' + ((o.showTime) ? '' : noDisplay) + '>' + o.timeText + '</dt>' +\n                        '<dd class=\"ui_tpicker_time\"' + ((o.showTime) ? '' : noDisplay) + '></dd>';\n\n                // Create the markup\n                for (i = 0, l = this.units.length; i < l; i++) {\n                    litem = this.units[i];\n                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);\n                    show = o['show' + uitem] !== null ? o['show' + uitem] : this.support[litem];\n\n                    // Added by Peter Medeiros:\n                    // - Figure out what the hour/minute/second max should be based on the step values.\n                    // - Example: if stepMinute is 15, then minMax is 45.\n                    max[litem] = parseInt((o[litem + 'Max'] - ((o[litem + 'Max'] - o[litem + 'Min']) % o['step' + uitem])), 10);\n                    gridSize[litem] = 0;\n\n                    html += '<dt class=\"ui_tpicker_' + litem + '_label\"' + (show ? '' : noDisplay) + '>' + o[litem + 'Text'] + '</dt>' +\n                        '<dd class=\"ui_tpicker_' + litem + '\"><div class=\"ui_tpicker_' + litem + '_slider\"' + (show ? '' : noDisplay) + '></div>';\n\n                    if (show && o[litem + 'Grid'] > 0) {\n                        html += '<div style=\"padding-left: 1px\"><table class=\"ui-tpicker-grid-label\"><tr>';\n\n                        if (litem === 'hour') {\n                            for (var h = o[litem + 'Min']; h <= max[litem]; h += parseInt(o[litem + 'Grid'], 10)) {\n                                gridSize[litem]++;\n                                var tmph = $.datepicker.formatTime(this.support.ampm ? 'hht' : 'HH', {hour: h}, o);\n                                html += '<td data-for=\"' + litem + '\">' + tmph + '</td>';\n                            }\n                        } else {\n                            for (var m = o[litem + 'Min']; m <= max[litem]; m += parseInt(o[litem + 'Grid'], 10)) {\n                                gridSize[litem]++;\n                                html += '<td data-for=\"' + litem + '\">' + ((m < 10) ? '0' : '') + m + '</td>';\n                            }\n                        }\n\n                        html += '</tr></table></div>';\n                    }\n                    html += '</dd>';\n                }\n\n                // Timezone\n                var showTz = o.showTimezone !== null ? o.showTimezone : this.support.timezone;\n                html += '<dt class=\"ui_tpicker_timezone_label\"' + (showTz ? '' : noDisplay) + '>' + o.timezoneText + '</dt>';\n                html += '<dd class=\"ui_tpicker_timezone\" ' + (showTz ? '' : noDisplay) + '></dd>';\n\n                // Create the elements from string\n                html += '</dl></div>';\n                var $tp = $(html);\n\n                // if we only want time picker...\n                if (o.timeOnly === true) {\n                    $tp.prepend('<div class=\"ui-widget-header ui-helper-clearfix ui-corner-all\">' + '<div class=\"ui-datepicker-title\">' + o.timeOnlyTitle + '</div>' + '</div>');\n                    $dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();\n                }\n\n                // add sliders, adjust grids, add events\n                for (i = 0, l = tp_inst.units.length; i < l; i++) {\n                    litem = tp_inst.units[i];\n                    uitem = litem.substr(0, 1).toUpperCase() + litem.substr(1);\n                    show = o['show' + uitem] !== null ? o['show' + uitem] : this.support[litem];\n\n                    // add the slider\n                    tp_inst[litem + '_slider'] = tp_inst.control.create(tp_inst, $tp.find('.ui_tpicker_' + litem + '_slider'), litem, tp_inst[litem], o[litem + 'Min'], max[litem], o['step' + uitem]);\n\n                    // adjust the grid and add click event\n                    if (show && o[litem + 'Grid'] > 0) {\n                        size = 100 * gridSize[litem] * o[litem + 'Grid'] / (max[litem] - o[litem + 'Min']);\n                        $tp.find('.ui_tpicker_' + litem + ' table').css({\n                            width: size + \"%\",\n                            marginLeft: o.isRTL ? '0' : ((size / (-2 * gridSize[litem])) + \"%\"),\n                            marginRight: o.isRTL ? ((size / (-2 * gridSize[litem])) + \"%\") : '0',\n                            borderCollapse: 'collapse'\n                        }).find(\"td\").click(function (e) {\n                            var $t = $(this),\n                                h = $t.html(),\n                                n = parseInt(h.replace(/[^0-9]/g), 10),\n                                ap = h.replace(/[^apm]/ig),\n                                f = $t.data('for'); // loses scope, so we use data-for\n\n                            if (f === 'hour') {\n                                if (ap.indexOf('p') !== -1 && n < 12) {\n                                    n += 12;\n                                } else {\n                                    if (ap.indexOf('a') !== -1 && n === 12) {\n                                        n = 0;\n                                    }\n                                }\n                            }\n\n                            tp_inst.control.value(tp_inst, tp_inst[f + '_slider'], litem, n);\n\n                            tp_inst._onTimeChange();\n                            tp_inst._onSelectHandler();\n                        }).css({\n                            cursor: 'pointer',\n                            width: (100 / gridSize[litem]) + '%',\n                            textAlign: 'center',\n                            overflow: 'hidden'\n                        });\n                    } // end if grid > 0\n                } // end for loop\n\n                // Add timezone options\n                this.timezone_select = $tp.find('.ui_tpicker_timezone').append('<select></select>').find(\"select\");\n                $.fn.append.apply(this.timezone_select,\n                    $.map(o.timezoneList, function (val, idx) {\n                        return $(\"<option />\").val(typeof val === \"object\" ? val.value : val).text(typeof val === \"object\" ? val.label : val);\n                    }));\n                if (typeof (this.timezone) !== \"undefined\" && this.timezone !== null && this.timezone !== \"\") {\n                    var local_timezone = (new Date(this.inst.selectedYear, this.inst.selectedMonth, this.inst.selectedDay, 12)).getTimezoneOffset() * -1;\n                    if (local_timezone === this.timezone) {\n                        selectLocalTimezone(tp_inst);\n                    } else {\n                        this.timezone_select.val(this.timezone);\n                    }\n                } else {\n                    if (typeof (this.hour) !== \"undefined\" && this.hour !== null && this.hour !== \"\") {\n                        this.timezone_select.val(o.timezone);\n                    } else {\n                        selectLocalTimezone(tp_inst);\n                    }\n                }\n                this.timezone_select.change(function () {\n                    tp_inst._onTimeChange();\n                    tp_inst._onSelectHandler();\n                });\n                // End timezone options\n\n                // inject timepicker into datepicker\n                var $buttonPanel = $dp.find('.ui-datepicker-buttonpane');\n                if ($buttonPanel.length) {\n                    $buttonPanel.before($tp);\n                } else {\n                    $dp.append($tp);\n                }\n\n                this.$timeObj = $tp.find('.ui_tpicker_time');\n\n                if (this.inst !== null) {\n                    var timeDefined = this.timeDefined;\n                    this._onTimeChange();\n                    this.timeDefined = timeDefined;\n                }\n\n                // slideAccess integration: http://trentrichardson.com/2011/11/11/jquery-ui-sliders-and-touch-accessibility/\n                if (this._defaults.addSliderAccess) {\n                    var sliderAccessArgs = this._defaults.sliderAccessArgs,\n                        rtl = this._defaults.isRTL;\n                    sliderAccessArgs.isRTL = rtl;\n\n                    setTimeout(function () { // fix for inline mode\n                        if ($tp.find('.ui-slider-access').length === 0) {\n                            $tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);\n\n                            // fix any grids since sliders are shorter\n                            var sliderAccessWidth = $tp.find('.ui-slider-access:eq(0)').outerWidth(true);\n                            if (sliderAccessWidth) {\n                                $tp.find('table:visible').each(function () {\n                                    var $g = $(this),\n                                        oldWidth = $g.outerWidth(),\n                                        oldMarginLeft = $g.css(rtl ? 'marginRight' : 'marginLeft').toString().replace('%', ''),\n                                        newWidth = oldWidth - sliderAccessWidth,\n                                        newMarginLeft = ((oldMarginLeft * newWidth) / oldWidth) + '%',\n                                        css = {width: newWidth, marginRight: 0, marginLeft: 0};\n                                    css[rtl ? 'marginRight' : 'marginLeft'] = newMarginLeft;\n                                    $g.css(css);\n                                });\n                            }\n                        }\n                    }, 10);\n                }\n                // end slideAccess integration\n\n                tp_inst._limitMinMaxDateTime(this.inst, true);\n            }\n        },\n\n        /*\n        * This function tries to limit the ability to go outside the\n        * min/max date range\n        */\n        _limitMinMaxDateTime: function (dp_inst, adjustSliders) {\n            var o = this._defaults,\n                dp_date = new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay);\n\n            if (!this._defaults.showTimepicker) {\n                return;\n            } // No time so nothing to check here\n\n            if ($.datepicker._get(dp_inst, 'minDateTime') !== null && $.datepicker._get(dp_inst, 'minDateTime') !== undefined && dp_date) {\n                var minDateTime = $.datepicker._get(dp_inst, 'minDateTime'),\n                    minDateTimeDate = new Date(minDateTime.getFullYear(), minDateTime.getMonth(), minDateTime.getDate(), 0, 0, 0, 0);\n\n                if (this.hourMinOriginal === null || this.minuteMinOriginal === null || this.secondMinOriginal === null || this.millisecMinOriginal === null || this.microsecMinOriginal === null) {\n                    this.hourMinOriginal = o.hourMin;\n                    this.minuteMinOriginal = o.minuteMin;\n                    this.secondMinOriginal = o.secondMin;\n                    this.millisecMinOriginal = o.millisecMin;\n                    this.microsecMinOriginal = o.microsecMin;\n                }\n\n                if (dp_inst.settings.timeOnly || minDateTimeDate.getTime() === dp_date.getTime()) {\n                    this._defaults.hourMin = minDateTime.getHours();\n                    if (this.hour <= this._defaults.hourMin) {\n                        this.hour = this._defaults.hourMin;\n                        this._defaults.minuteMin = minDateTime.getMinutes();\n                        if (this.minute <= this._defaults.minuteMin) {\n                            this.minute = this._defaults.minuteMin;\n                            this._defaults.secondMin = minDateTime.getSeconds();\n                            if (this.second <= this._defaults.secondMin) {\n                                this.second = this._defaults.secondMin;\n                                this._defaults.millisecMin = minDateTime.getMilliseconds();\n                                if (this.millisec <= this._defaults.millisecMin) {\n                                    this.millisec = this._defaults.millisecMin;\n                                    this._defaults.microsecMin = minDateTime.getMicroseconds();\n                                } else {\n                                    if (this.microsec < this._defaults.microsecMin) {\n                                        this.microsec = this._defaults.microsecMin;\n                                    }\n                                    this._defaults.microsecMin = this.microsecMinOriginal;\n                                }\n                            } else {\n                                this._defaults.millisecMin = this.millisecMinOriginal;\n                                this._defaults.microsecMin = this.microsecMinOriginal;\n                            }\n                        } else {\n                            this._defaults.secondMin = this.secondMinOriginal;\n                            this._defaults.millisecMin = this.millisecMinOriginal;\n                            this._defaults.microsecMin = this.microsecMinOriginal;\n                        }\n                    } else {\n                        this._defaults.minuteMin = this.minuteMinOriginal;\n                        this._defaults.secondMin = this.secondMinOriginal;\n                        this._defaults.millisecMin = this.millisecMinOriginal;\n                        this._defaults.microsecMin = this.microsecMinOriginal;\n                    }\n                } else {\n                    this._defaults.hourMin = this.hourMinOriginal;\n                    this._defaults.minuteMin = this.minuteMinOriginal;\n                    this._defaults.secondMin = this.secondMinOriginal;\n                    this._defaults.millisecMin = this.millisecMinOriginal;\n                    this._defaults.microsecMin = this.microsecMinOriginal;\n                }\n            }\n\n            if ($.datepicker._get(dp_inst, 'maxDateTime') !== null && $.datepicker._get(dp_inst, 'maxDateTime') !== undefined && dp_date) {\n                var maxDateTime = $.datepicker._get(dp_inst, 'maxDateTime'),\n                    maxDateTimeDate = new Date(maxDateTime.getFullYear(), maxDateTime.getMonth(), maxDateTime.getDate(), 0, 0, 0, 0);\n\n                if (this.hourMaxOriginal === null || this.minuteMaxOriginal === null || this.secondMaxOriginal === null || this.millisecMaxOriginal === null) {\n                    this.hourMaxOriginal = o.hourMax;\n                    this.minuteMaxOriginal = o.minuteMax;\n                    this.secondMaxOriginal = o.secondMax;\n                    this.millisecMaxOriginal = o.millisecMax;\n                    this.microsecMaxOriginal = o.microsecMax;\n                }\n\n                if (dp_inst.settings.timeOnly || maxDateTimeDate.getTime() === dp_date.getTime()) {\n                    this._defaults.hourMax = maxDateTime.getHours();\n                    if (this.hour >= this._defaults.hourMax) {\n                        this.hour = this._defaults.hourMax;\n                        this._defaults.minuteMax = maxDateTime.getMinutes();\n                        if (this.minute >= this._defaults.minuteMax) {\n                            this.minute = this._defaults.minuteMax;\n                            this._defaults.secondMax = maxDateTime.getSeconds();\n                            if (this.second >= this._defaults.secondMax) {\n                                this.second = this._defaults.secondMax;\n                                this._defaults.millisecMax = maxDateTime.getMilliseconds();\n                                if (this.millisec >= this._defaults.millisecMax) {\n                                    this.millisec = this._defaults.millisecMax;\n                                    this._defaults.microsecMax = maxDateTime.getMicroseconds();\n                                } else {\n                                    if (this.microsec > this._defaults.microsecMax) {\n                                        this.microsec = this._defaults.microsecMax;\n                                    }\n                                    this._defaults.microsecMax = this.microsecMaxOriginal;\n                                }\n                            } else {\n                                this._defaults.millisecMax = this.millisecMaxOriginal;\n                                this._defaults.microsecMax = this.microsecMaxOriginal;\n                            }\n                        } else {\n                            this._defaults.secondMax = this.secondMaxOriginal;\n                            this._defaults.millisecMax = this.millisecMaxOriginal;\n                            this._defaults.microsecMax = this.microsecMaxOriginal;\n                        }\n                    } else {\n                        this._defaults.minuteMax = this.minuteMaxOriginal;\n                        this._defaults.secondMax = this.secondMaxOriginal;\n                        this._defaults.millisecMax = this.millisecMaxOriginal;\n                        this._defaults.microsecMax = this.microsecMaxOriginal;\n                    }\n                } else {\n                    this._defaults.hourMax = this.hourMaxOriginal;\n                    this._defaults.minuteMax = this.minuteMaxOriginal;\n                    this._defaults.secondMax = this.secondMaxOriginal;\n                    this._defaults.millisecMax = this.millisecMaxOriginal;\n                    this._defaults.microsecMax = this.microsecMaxOriginal;\n                }\n            }\n\n            if (adjustSliders !== undefined && adjustSliders === true) {\n                var hourMax = parseInt((this._defaults.hourMax - ((this._defaults.hourMax - this._defaults.hourMin) % this._defaults.stepHour)), 10),\n                    minMax = parseInt((this._defaults.minuteMax - ((this._defaults.minuteMax - this._defaults.minuteMin) % this._defaults.stepMinute)), 10),\n                    secMax = parseInt((this._defaults.secondMax - ((this._defaults.secondMax - this._defaults.secondMin) % this._defaults.stepSecond)), 10),\n                    millisecMax = parseInt((this._defaults.millisecMax - ((this._defaults.millisecMax - this._defaults.millisecMin) % this._defaults.stepMillisec)), 10),\n                    microsecMax = parseInt((this._defaults.microsecMax - ((this._defaults.microsecMax - this._defaults.microsecMin) % this._defaults.stepMicrosec)), 10);\n\n                if (this.hour_slider) {\n                    this.control.options(this, this.hour_slider, 'hour', {min: this._defaults.hourMin, max: hourMax});\n                    this.control.value(this, this.hour_slider, 'hour', this.hour - (this.hour % this._defaults.stepHour));\n                }\n                if (this.minute_slider) {\n                    this.control.options(this, this.minute_slider, 'minute', {\n                        min: this._defaults.minuteMin,\n                        max: minMax\n                    });\n                    this.control.value(this, this.minute_slider, 'minute', this.minute - (this.minute % this._defaults.stepMinute));\n                }\n                if (this.second_slider) {\n                    this.control.options(this, this.second_slider, 'second', {\n                        min: this._defaults.secondMin,\n                        max: secMax\n                    });\n                    this.control.value(this, this.second_slider, 'second', this.second - (this.second % this._defaults.stepSecond));\n                }\n                if (this.millisec_slider) {\n                    this.control.options(this, this.millisec_slider, 'millisec', {\n                        min: this._defaults.millisecMin,\n                        max: millisecMax\n                    });\n                    this.control.value(this, this.millisec_slider, 'millisec', this.millisec - (this.millisec % this._defaults.stepMillisec));\n                }\n                if (this.microsec_slider) {\n                    this.control.options(this, this.microsec_slider, 'microsec', {\n                        min: this._defaults.microsecMin,\n                        max: microsecMax\n                    });\n                    this.control.value(this, this.microsec_slider, 'microsec', this.microsec - (this.microsec % this._defaults.stepMicrosec));\n                }\n            }\n\n        },\n\n        /*\n        * when a slider moves, set the internal time...\n        * on time change is also called when the time is updated in the text field\n        */\n        _onTimeChange: function () {\n            if (!this._defaults.showTimepicker) {\n                return;\n            }\n            var hour = (this.hour_slider) ? this.control.value(this, this.hour_slider, 'hour') : false,\n                minute = (this.minute_slider) ? this.control.value(this, this.minute_slider, 'minute') : false,\n                second = (this.second_slider) ? this.control.value(this, this.second_slider, 'second') : false,\n                millisec = (this.millisec_slider) ? this.control.value(this, this.millisec_slider, 'millisec') : false,\n                microsec = (this.microsec_slider) ? this.control.value(this, this.microsec_slider, 'microsec') : false,\n                timezone = (this.timezone_select) ? this.timezone_select.val() : false,\n                o = this._defaults,\n                pickerTimeFormat = o.pickerTimeFormat || o.timeFormat,\n                pickerTimeSuffix = o.pickerTimeSuffix || o.timeSuffix;\n\n            if (typeof (hour) === 'object') {\n                hour = false;\n            }\n            if (typeof (minute) === 'object') {\n                minute = false;\n            }\n            if (typeof (second) === 'object') {\n                second = false;\n            }\n            if (typeof (millisec) === 'object') {\n                millisec = false;\n            }\n            if (typeof (microsec) === 'object') {\n                microsec = false;\n            }\n            if (typeof (timezone) === 'object') {\n                timezone = false;\n            }\n\n            if (hour !== false) {\n                hour = parseInt(hour, 10);\n            }\n            if (minute !== false) {\n                minute = parseInt(minute, 10);\n            }\n            if (second !== false) {\n                second = parseInt(second, 10);\n            }\n            if (millisec !== false) {\n                millisec = parseInt(millisec, 10);\n            }\n            if (microsec !== false) {\n                microsec = parseInt(microsec, 10);\n            }\n            if (timezone !== false) {\n                timezone = timezone.toString();\n            }\n\n            var ampm = o[hour < 12 ? 'amNames' : 'pmNames'][0];\n\n            // If the update was done in the input field, the input field should not be updated.\n            // If the update was done using the sliders, update the input field.\n            var hasChanged = (\n                hour !== parseInt(this.hour, 10) || // sliders should all be numeric\n                minute !== parseInt(this.minute, 10) ||\n                second !== parseInt(this.second, 10) ||\n                millisec !== parseInt(this.millisec, 10) ||\n                microsec !== parseInt(this.microsec, 10) ||\n                (this.ampm.length > 0 && (hour < 12) !== ($.inArray(this.ampm.toUpperCase(), this.amNames) !== -1)) ||\n                (this.timezone !== null && timezone !== this.timezone.toString()) // could be numeric or \"EST\" format, so use toString()\n            );\n\n            if (hasChanged) {\n\n                if (hour !== false) {\n                    this.hour = hour;\n                }\n                if (minute !== false) {\n                    this.minute = minute;\n                }\n                if (second !== false) {\n                    this.second = second;\n                }\n                if (millisec !== false) {\n                    this.millisec = millisec;\n                }\n                if (microsec !== false) {\n                    this.microsec = microsec;\n                }\n                if (timezone !== false) {\n                    this.timezone = timezone;\n                }\n\n                if (!this.inst) {\n                    this.inst = $.datepicker._getInst(this.$input[0]);\n                }\n\n                this._limitMinMaxDateTime(this.inst, true);\n            }\n            if (this.support.ampm) {\n                this.ampm = ampm;\n            }\n\n            // Updates the time within the timepicker\n            this.formattedTime = $.datepicker.formatTime(o.timeFormat, this, o);\n            if (this.$timeObj) {\n                if (pickerTimeFormat === o.timeFormat) {\n                    this.$timeObj.text(this.formattedTime + pickerTimeSuffix);\n                } else {\n                    this.$timeObj.text($.datepicker.formatTime(pickerTimeFormat, this, o) + pickerTimeSuffix);\n                }\n            }\n\n            this.timeDefined = true;\n            if (hasChanged) {\n                this._updateDateTime();\n                this.$input.focus();\n            }\n        },\n\n        /*\n        * call custom onSelect.\n        * bind to sliders slidestop, and grid click.\n        */\n        _onSelectHandler: function () {\n            var onSelect = this._defaults.onSelect || this.inst.settings.onSelect;\n            var inputEl = this.$input ? this.$input[0] : null;\n            if (onSelect && inputEl) {\n                onSelect.apply(inputEl, [this.formattedDateTime, this]);\n            }\n        },\n\n        /*\n        * update our input with the new date time..\n        */\n        _updateDateTime: function (dp_inst) {\n            dp_inst = this.inst || dp_inst;\n            var dtTmp = (dp_inst.currentYear > 0 ?\n                new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay) :\n                new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\n                dt = $.datepicker._daylightSavingAdjust(dtTmp),\n                //dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear, dp_inst.selectedMonth, dp_inst.selectedDay)),\n                //dt = $.datepicker._daylightSavingAdjust(new Date(dp_inst.currentYear, dp_inst.currentMonth, dp_inst.currentDay)),\n                dateFmt = $.datepicker._get(dp_inst, 'dateFormat'),\n                formatCfg = $.datepicker._getFormatConfig(dp_inst),\n                timeAvailable = dt !== null && this.timeDefined;\n            this.formattedDate = $.datepicker.formatDate(dateFmt, (dt === null ? new Date() : dt), formatCfg);\n            var formattedDateTime = this.formattedDate;\n\n            // if a slider was changed but datepicker doesn't have a value yet, set it\n            if (dp_inst.lastVal === \"\") {\n                dp_inst.currentYear = dp_inst.selectedYear;\n                dp_inst.currentMonth = dp_inst.selectedMonth;\n                dp_inst.currentDay = dp_inst.selectedDay;\n            }\n\n            /*\n            * remove following lines to force every changes in date picker to change the input value\n            * Bug descriptions: when an input field has a default value, and click on the field to pop up the date picker.\n            * If the user manually empty the value in the input field, the date picker will never change selected value.\n            */\n            //if (dp_inst.lastVal !== undefined && (dp_inst.lastVal.length > 0 && this.$input.val().length === 0)) {\n            //\treturn;\n            //}\n\n            if (this._defaults.timeOnly === true) {\n                formattedDateTime = this.formattedTime;\n            } else if (this._defaults.timeOnly !== true && (this._defaults.alwaysSetTime || timeAvailable)) {\n                formattedDateTime += this._defaults.separator + this.formattedTime + this._defaults.timeSuffix;\n            }\n\n            this.formattedDateTime = formattedDateTime;\n\n            if (!this._defaults.showTimepicker) {\n                this.$input.val(this.formattedDate);\n            } else if (this.$altInput && this._defaults.timeOnly === false && this._defaults.altFieldTimeOnly === true) {\n                this.$altInput.val(this.formattedTime);\n                this.$input.val(this.formattedDate);\n            } else if (this.$altInput) {\n                this.$input.val(formattedDateTime);\n                var altFormattedDateTime = '',\n                    altSeparator = this._defaults.altSeparator ? this._defaults.altSeparator : this._defaults.separator,\n                    altTimeSuffix = this._defaults.altTimeSuffix ? this._defaults.altTimeSuffix : this._defaults.timeSuffix;\n\n                if (!this._defaults.timeOnly) {\n                    if (this._defaults.altFormat) {\n                        altFormattedDateTime = $.datepicker.formatDate(this._defaults.altFormat, (dt === null ? new Date() : dt), formatCfg);\n                    } else {\n                        altFormattedDateTime = this.formattedDate;\n                    }\n\n                    if (altFormattedDateTime) {\n                        altFormattedDateTime += altSeparator;\n                    }\n                }\n\n                if (this._defaults.altTimeFormat) {\n                    altFormattedDateTime += $.datepicker.formatTime(this._defaults.altTimeFormat, this, this._defaults) + altTimeSuffix;\n                } else {\n                    altFormattedDateTime += this.formattedTime + altTimeSuffix;\n                }\n                this.$altInput.val(altFormattedDateTime);\n            } else {\n                this.$input.val(formattedDateTime);\n            }\n\n            this.$input.trigger(\"change\");\n        },\n\n        _onFocus: function () {\n            if (!this.$input.val() && this._defaults.defaultValue) {\n                this.$input.val(this._defaults.defaultValue);\n                var inst = $.datepicker._getInst(this.$input.get(0)),\n                    tp_inst = $.datepicker._get(inst, 'timepicker');\n                if (tp_inst) {\n                    if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {\n                        try {\n                            $.datepicker._updateDatepicker(inst);\n                        } catch (err) {\n                            $.timepicker.log(err);\n                        }\n                    }\n                }\n            }\n        },\n\n        /*\n        * Small abstraction to control types\n        * We can add more, just be sure to follow the pattern: create, options, value\n        */\n        _controls: {\n            // slider methods\n            slider: {\n                create: function (tp_inst, obj, unit, val, min, max, step) {\n                    var rtl = tp_inst._defaults.isRTL; // if rtl go -60->0 instead of 0->60\n                    return obj.prop('slide', null).slider({\n                        orientation: \"horizontal\",\n                        value: rtl ? val * -1 : val,\n                        min: rtl ? max * -1 : min,\n                        max: rtl ? min * -1 : max,\n                        step: step,\n                        slide: function (event, ui) {\n                            tp_inst.control.value(tp_inst, $(this), unit, rtl ? ui.value * -1 : ui.value);\n                            tp_inst._onTimeChange();\n                        },\n                        stop: function (event, ui) {\n                            tp_inst._onSelectHandler();\n                        }\n                    });\n                },\n                options: function (tp_inst, obj, unit, opts, val) {\n                    if (tp_inst._defaults.isRTL) {\n                        if (typeof (opts) === 'string') {\n                            if (opts === 'min' || opts === 'max') {\n                                if (val !== undefined) {\n                                    return obj.slider(opts, val * -1);\n                                }\n                                return Math.abs(obj.slider(opts));\n                            }\n                            return obj.slider(opts);\n                        }\n                        var min = opts.min,\n                            max = opts.max;\n                        opts.min = opts.max = null;\n                        if (min !== undefined) {\n                            opts.max = min * -1;\n                        }\n                        if (max !== undefined) {\n                            opts.min = max * -1;\n                        }\n                        return obj.slider(opts);\n                    }\n                    if (typeof (opts) === 'string' && val !== undefined) {\n                        return obj.slider(opts, val);\n                    }\n                    return obj.slider(opts);\n                },\n                value: function (tp_inst, obj, unit, val) {\n                    if (tp_inst._defaults.isRTL) {\n                        if (val !== undefined) {\n                            return obj.slider('value', val * -1);\n                        }\n                        return Math.abs(obj.slider('value'));\n                    }\n                    if (val !== undefined) {\n                        return obj.slider('value', val);\n                    }\n                    return obj.slider('value');\n                }\n            },\n            // select methods\n            select: {\n                create: function (tp_inst, obj, unit, val, min, max, step) {\n                    var sel = '<select class=\"ui-timepicker-select\" data-unit=\"' + unit + '\" data-min=\"' + min + '\" data-max=\"' + max + '\" data-step=\"' + step + '\">',\n                        format = tp_inst._defaults.pickerTimeFormat || tp_inst._defaults.timeFormat;\n\n                    for (var i = min; i <= max; i += step) {\n                        sel += '<option value=\"' + i + '\"' + (i === val ? ' selected' : '') + '>';\n                        if (unit === 'hour') {\n                            sel += $.datepicker.formatTime($.trim(format.replace(/[^ht ]/ig, '')), {hour: i}, tp_inst._defaults);\n                        } else if (unit === 'millisec' || unit === 'microsec' || i >= 10) {\n                            sel += i;\n                        } else {\n                            sel += '0' + i.toString();\n                        }\n                        sel += '</option>';\n                    }\n                    sel += '</select>';\n\n                    obj.children('select').remove();\n\n                    $(sel).appendTo(obj).change(function (e) {\n                        tp_inst._onTimeChange();\n                        tp_inst._onSelectHandler();\n                    });\n\n                    return obj;\n                },\n                options: function (tp_inst, obj, unit, opts, val) {\n                    var o = {},\n                        $t = obj.children('select');\n                    if (typeof (opts) === 'string') {\n                        if (val === undefined) {\n                            return $t.data(opts);\n                        }\n                        o[opts] = val;\n                    } else {\n                        o = opts;\n                    }\n                    return tp_inst.control.create(tp_inst, obj, $t.data('unit'), $t.val(), o.min || $t.data('min'), o.max || $t.data('max'), o.step || $t.data('step'));\n                },\n                value: function (tp_inst, obj, unit, val) {\n                    var $t = obj.children('select');\n                    if (val !== undefined) {\n                        return $t.val(val);\n                    }\n                    return $t.val();\n                }\n            }\n        } // end _controls\n\n    });\n\n    $.fn.extend({\n        /*\n        * shorthand just to use timepicker.\n        */\n        timepicker: function (o) {\n            o = o || {};\n            var tmp_args = Array.prototype.slice.call(arguments);\n\n            if (typeof o === 'object') {\n                tmp_args[0] = $.extend(o, {\n                    timeOnly: true\n                });\n            }\n\n            return $(this).each(function () {\n                $.fn.datetimepicker.apply($(this), tmp_args);\n            });\n        },\n\n        /*\n        * extend timepicker to datepicker\n        */\n        datetimepicker: function (o) {\n            o = o || {};\n            var tmp_args = arguments;\n\n            if (typeof (o) === 'string') {\n                if (o === 'getDate') {\n                    return $.fn.datepicker.apply($(this[0]), tmp_args);\n                } else {\n                    return this.each(function () {\n                        var $t = $(this);\n                        $t.datepicker.apply($t, tmp_args);\n                    });\n                }\n            } else {\n                return this.each(function () {\n                    var $t = $(this);\n                    $t.datepicker($.timepicker._newInst($t, o)._defaults);\n                });\n            }\n        }\n    });\n\n    /*\n    * Public Utility to parse date and time\n    */\n    $.datepicker.parseDateTime = function (dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\n        var parseRes = parseDateTimeInternal(dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings);\n        if (parseRes.timeObj) {\n            var t = parseRes.timeObj;\n            parseRes.date.setHours(t.hour, t.minute, t.second, t.millisec);\n            parseRes.date.setMicroseconds(t.microsec);\n        }\n\n        return parseRes.date;\n    };\n\n    /*\n    * Public utility to parse time\n    */\n    $.datepicker.parseTime = function (timeFormat, timeString, options) {\n        var o = extendRemove(extendRemove({}, $.timepicker._defaults), options || {}),\n            iso8601 = (timeFormat.replace(/\\'.*?\\'/g, '').indexOf('Z') !== -1);\n\n        // Strict parse requires the timeString to match the timeFormat exactly\n        var strictParse = function (f, s, o) {\n\n            // pattern for standard and localized AM/PM markers\n            var getPatternAmpm = function (amNames, pmNames) {\n                var markers = [];\n                if (amNames) {\n                    $.merge(markers, amNames);\n                }\n                if (pmNames) {\n                    $.merge(markers, pmNames);\n                }\n                markers = $.map(markers, function (val) {\n                    return val.replace(/[.*+?|()\\[\\]{}\\\\]/g, '\\\\$&');\n                });\n                return '(' + markers.join('|') + ')?';\n            };\n\n            // figure out position of time elements.. cause js cant do named captures\n            var getFormatPositions = function (timeFormat) {\n                var finds = timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|c{1}|t{1,2}|z|'.*?')/g),\n                    orders = {\n                        h: -1,\n                        m: -1,\n                        s: -1,\n                        l: -1,\n                        c: -1,\n                        t: -1,\n                        z: -1\n                    };\n\n                if (finds) {\n                    for (var i = 0; i < finds.length; i++) {\n                        if (orders[finds[i].toString().charAt(0)] === -1) {\n                            orders[finds[i].toString().charAt(0)] = i + 1;\n                        }\n                    }\n                }\n                return orders;\n            };\n\n            var regstr = '^' + f.toString()\n                    .replace(/([hH]{1,2}|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {\n                        var ml = match.length;\n                        switch (match.charAt(0).toLowerCase()) {\n                            case 'h':\n                                return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\n                            case 'm':\n                                return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\n                            case 's':\n                                return ml === 1 ? '(\\\\d?\\\\d)' : '(\\\\d{' + ml + '})';\n                            case 'l':\n                                return '(\\\\d?\\\\d?\\\\d)';\n                            case 'c':\n                                return '(\\\\d?\\\\d?\\\\d)';\n                            case 'z':\n                                return '(z|[-+]\\\\d\\\\d:?\\\\d\\\\d|\\\\S+)?';\n                            case 't':\n                                return getPatternAmpm(o.amNames, o.pmNames);\n                            default:    // literal escaped in quotes\n                                return '(' + match.replace(/\\'/g, \"\").replace(/(\\.|\\$|\\^|\\\\|\\/|\\(|\\)|\\[|\\]|\\?|\\+|\\*)/g, function (m) {\n                                    return \"\\\\\" + m;\n                                }) + ')?';\n                        }\n                    })\n                    .replace(/\\s/g, '\\\\s?') +\n                o.timeSuffix + '$',\n                order = getFormatPositions(f),\n                ampm = '',\n                treg;\n\n            treg = s.match(new RegExp(regstr, 'i'));\n\n            var resTime = {\n                hour: 0,\n                minute: 0,\n                second: 0,\n                millisec: 0,\n                microsec: 0\n            };\n\n            if (treg) {\n                if (order.t !== -1) {\n                    if (treg[order.t] === undefined || treg[order.t].length === 0) {\n                        ampm = '';\n                        resTime.ampm = '';\n                    } else {\n                        ampm = $.inArray(treg[order.t].toUpperCase(), o.amNames) !== -1 ? 'AM' : 'PM';\n                        resTime.ampm = o[ampm === 'AM' ? 'amNames' : 'pmNames'][0];\n                    }\n                }\n\n                if (order.h !== -1) {\n                    if (ampm === 'AM' && treg[order.h] === '12') {\n                        resTime.hour = 0; // 12am = 0 hour\n                    } else {\n                        if (ampm === 'PM' && treg[order.h] !== '12') {\n                            resTime.hour = parseInt(treg[order.h], 10) + 12; // 12pm = 12 hour, any other pm = hour + 12\n                        } else {\n                            resTime.hour = Number(treg[order.h]);\n                        }\n                    }\n                }\n\n                if (order.m !== -1) {\n                    resTime.minute = Number(treg[order.m]);\n                }\n                if (order.s !== -1) {\n                    resTime.second = Number(treg[order.s]);\n                }\n                if (order.l !== -1) {\n                    resTime.millisec = Number(treg[order.l]);\n                }\n                if (order.c !== -1) {\n                    resTime.microsec = Number(treg[order.c]);\n                }\n                if (order.z !== -1 && treg[order.z] !== undefined) {\n                    resTime.timezone = $.timepicker.timezoneOffsetNumber(treg[order.z]);\n                }\n\n\n                return resTime;\n            }\n            return false;\n        };// end strictParse\n\n        // First try JS Date, if that fails, use strictParse\n        var looseParse = function (f, s, o) {\n            try {\n                var d = new Date('2012-01-01 ' + s);\n                if (isNaN(d.getTime())) {\n                    d = new Date('2012-01-01T' + s);\n                    if (isNaN(d.getTime())) {\n                        d = new Date('01/01/2012 ' + s);\n                        if (isNaN(d.getTime())) {\n                            throw \"Unable to parse time with native Date: \" + s;\n                        }\n                    }\n                }\n\n                return {\n                    hour: d.getHours(),\n                    minute: d.getMinutes(),\n                    second: d.getSeconds(),\n                    millisec: d.getMilliseconds(),\n                    microsec: d.getMicroseconds(),\n                    timezone: d.getTimezoneOffset() * -1\n                };\n            } catch (err) {\n                try {\n                    return strictParse(f, s, o);\n                } catch (err2) {\n                    $.timepicker.log(\"Unable to parse \\ntimeString: \" + s + \"\\ntimeFormat: \" + f);\n                }\n            }\n            return false;\n        }; // end looseParse\n\n        if (typeof o.parse === \"function\") {\n            return o.parse(timeFormat, timeString, o);\n        }\n        if (o.parse === 'loose') {\n            return looseParse(timeFormat, timeString, o);\n        }\n        return strictParse(timeFormat, timeString, o);\n    };\n\n    /**\n     * Public utility to format the time\n     * @param {string} format format of the time\n     * @param {Object} time Object not a Date for timezones\n     * @param {Object} [options] essentially the regional[].. amNames, pmNames, ampm\n     * @returns {string} the formatted time\n     */\n    $.datepicker.formatTime = function (format, time, options) {\n        options = options || {};\n        options = $.extend({}, $.timepicker._defaults, options);\n        time = $.extend({\n            hour: 0,\n            minute: 0,\n            second: 0,\n            millisec: 0,\n            microsec: 0,\n            timezone: null\n        }, time);\n\n        var tmptime = format,\n            ampmName = options.amNames[0],\n            hour = parseInt(time.hour, 10);\n\n        if (hour > 11) {\n            ampmName = options.pmNames[0];\n        }\n\n        tmptime = tmptime.replace(/(?:HH?|hh?|mm?|ss?|[tT]{1,2}|[zZ]|[lc]|'.*?')/g, function (match) {\n            switch (match) {\n                case 'HH':\n                    return ('0' + hour).slice(-2);\n                case 'H':\n                    return hour;\n                case 'hh':\n                    return ('0' + convert24to12(hour)).slice(-2);\n                case 'h':\n                    return convert24to12(hour);\n                case 'mm':\n                    return ('0' + time.minute).slice(-2);\n                case 'm':\n                    return time.minute;\n                case 'ss':\n                    return ('0' + time.second).slice(-2);\n                case 's':\n                    return time.second;\n                case 'l':\n                    return ('00' + time.millisec).slice(-3);\n                case 'c':\n                    return ('00' + time.microsec).slice(-3);\n                case 'z':\n                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, false);\n                case 'Z':\n                    return $.timepicker.timezoneOffsetString(time.timezone === null ? options.timezone : time.timezone, true);\n                case 'T':\n                    return ampmName.charAt(0).toUpperCase();\n                case 'TT':\n                    return ampmName.toUpperCase();\n                case 't':\n                    return ampmName.charAt(0).toLowerCase();\n                case 'tt':\n                    return ampmName.toLowerCase();\n                default:\n                    return match.replace(/'/g, \"\");\n            }\n        });\n\n        return tmptime;\n    };\n\n    /*\n    * the bad hack :/ override datepicker so it doesn't close on select\n    // inspired: http://stackoverflow.com/questions/1252512/jquery-datepicker-prevent-closing-picker-when-clicking-a-date/1762378#1762378\n    */\n    $.datepicker._base_selectDate = $.datepicker._selectDate;\n    $.datepicker._selectDate = function (id, dateStr) {\n        var inst = this._getInst($(id)[0]),\n            tp_inst = this._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            tp_inst._limitMinMaxDateTime(inst, true);\n            inst.inline = inst.stay_open = true;\n            //This way the onSelect handler called from calendarpicker get the full dateTime\n            this._base_selectDate(id, dateStr);\n            inst.inline = inst.stay_open = false;\n            this._notifyChange(inst);\n            this._updateDatepicker(inst);\n        } else {\n            this._base_selectDate(id, dateStr);\n        }\n    };\n\n    /*\n    * second bad hack :/ override datepicker so it triggers an event when changing the input field\n    * and does not redraw the datepicker on every selectDate event\n    */\n    $.datepicker._base_updateDatepicker = $.datepicker._updateDatepicker;\n    $.datepicker._updateDatepicker = function (inst) {\n\n        // don't popup the datepicker if there is another instance already opened\n        var input = inst.input[0];\n        if ($.datepicker._curInst && $.datepicker._curInst !== inst && $.datepicker._datepickerShowing && $.datepicker._lastInput !== input) {\n            return;\n        }\n\n        if (typeof (inst.stay_open) !== 'boolean' || inst.stay_open === false) {\n\n            this._base_updateDatepicker(inst);\n\n            // Reload the time control when changing something in the input text field.\n            var tp_inst = this._get(inst, 'timepicker');\n            if (tp_inst) {\n                tp_inst._addTimePicker(inst);\n            }\n        }\n    };\n\n    /*\n    * third bad hack :/ override datepicker so it allows spaces and colon in the input field\n    */\n    $.datepicker._base_doKeyPress = $.datepicker._doKeyPress;\n    $.datepicker._doKeyPress = function (event) {\n        var inst = $.datepicker._getInst(event.target),\n            tp_inst = $.datepicker._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            if ($.datepicker._get(inst, 'constrainInput')) {\n                var ampm = tp_inst.support.ampm,\n                    tz = tp_inst._defaults.showTimezone !== null ? tp_inst._defaults.showTimezone : tp_inst.support.timezone,\n                    dateChars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat')),\n                    datetimeChars = tp_inst._defaults.timeFormat.toString()\n                            .replace(/[hms]/g, '')\n                            .replace(/TT/g, ampm ? 'APM' : '')\n                            .replace(/Tt/g, ampm ? 'AaPpMm' : '')\n                            .replace(/tT/g, ampm ? 'AaPpMm' : '')\n                            .replace(/T/g, ampm ? 'AP' : '')\n                            .replace(/tt/g, ampm ? 'apm' : '')\n                            .replace(/t/g, ampm ? 'ap' : '') +\n                        \" \" + tp_inst._defaults.separator +\n                        tp_inst._defaults.timeSuffix +\n                        (tz ? tp_inst._defaults.timezoneList.join('') : '') +\n                        (tp_inst._defaults.amNames.join('')) + (tp_inst._defaults.pmNames.join('')) +\n                        dateChars,\n                    chr = String.fromCharCode(event.charCode === undefined ? event.keyCode : event.charCode);\n                return event.ctrlKey || (chr < ' ' || !dateChars || datetimeChars.indexOf(chr) > -1);\n            }\n        }\n\n        return $.datepicker._base_doKeyPress(event);\n    };\n\n    /*\n    * Fourth bad hack :/ override _updateAlternate function used in inline mode to init altField\n    * Update any alternate field to synchronise with the main field.\n    */\n    $.datepicker._base_updateAlternate = $.datepicker._updateAlternate;\n    $.datepicker._updateAlternate = function (inst) {\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            var altField = tp_inst._defaults.altField;\n            if (altField) { // update alternate field too\n                var altFormat = tp_inst._defaults.altFormat || tp_inst._defaults.dateFormat,\n                    date = this._getDate(inst),\n                    formatCfg = $.datepicker._getFormatConfig(inst),\n                    altFormattedDateTime = '',\n                    altSeparator = tp_inst._defaults.altSeparator ? tp_inst._defaults.altSeparator : tp_inst._defaults.separator,\n                    altTimeSuffix = tp_inst._defaults.altTimeSuffix ? tp_inst._defaults.altTimeSuffix : tp_inst._defaults.timeSuffix,\n                    altTimeFormat = tp_inst._defaults.altTimeFormat !== null ? tp_inst._defaults.altTimeFormat : tp_inst._defaults.timeFormat;\n\n                altFormattedDateTime += $.datepicker.formatTime(altTimeFormat, tp_inst, tp_inst._defaults) + altTimeSuffix;\n                if (!tp_inst._defaults.timeOnly && !tp_inst._defaults.altFieldTimeOnly && date !== null) {\n                    if (tp_inst._defaults.altFormat) {\n                        altFormattedDateTime = $.datepicker.formatDate(tp_inst._defaults.altFormat, date, formatCfg) + altSeparator + altFormattedDateTime;\n                    } else {\n                        altFormattedDateTime = tp_inst.formattedDate + altSeparator + altFormattedDateTime;\n                    }\n                }\n                $(altField).val(altFormattedDateTime);\n            }\n        } else {\n            $.datepicker._base_updateAlternate(inst);\n        }\n    };\n\n    /*\n    * Override key up event to sync manual input changes.\n    */\n    $.datepicker._base_doKeyUp = $.datepicker._doKeyUp;\n    $.datepicker._doKeyUp = function (event) {\n        var inst = $.datepicker._getInst(event.target),\n            tp_inst = $.datepicker._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            if (tp_inst._defaults.timeOnly && (inst.input.val() !== inst.lastVal)) {\n                try {\n                    $.datepicker._updateDatepicker(inst);\n                } catch (err) {\n                    $.timepicker.log(err);\n                }\n            }\n        }\n\n        return $.datepicker._base_doKeyUp(event);\n    };\n\n    /*\n    * override \"Today\" button to also grab the time.\n    */\n    $.datepicker._base_gotoToday = $.datepicker._gotoToday;\n    $.datepicker._gotoToday = function (id) {\n        var inst = this._getInst($(id)[0]),\n            $dp = inst.dpDiv;\n        this._base_gotoToday(id);\n        var tp_inst = this._get(inst, 'timepicker');\n        selectLocalTimezone(tp_inst);\n        var now = new Date();\n        this._setTime(inst, now);\n        $('.ui-datepicker-today', $dp).click();\n    };\n\n    /*\n    * Disable & enable the Time in the datetimepicker\n    */\n    $.datepicker._disableTimepickerDatepicker = function (target) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        $(target).datepicker('getDate'); // Init selected[Year|Month|Day]\n        if (tp_inst) {\n            inst.settings.showTimepicker = false;\n            tp_inst._defaults.showTimepicker = false;\n            tp_inst._updateDateTime(inst);\n        }\n    };\n\n    $.datepicker._enableTimepickerDatepicker = function (target) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        $(target).datepicker('getDate'); // Init selected[Year|Month|Day]\n        if (tp_inst) {\n            inst.settings.showTimepicker = true;\n            tp_inst._defaults.showTimepicker = true;\n            tp_inst._addTimePicker(inst); // Could be disabled on page load\n            tp_inst._updateDateTime(inst);\n        }\n    };\n\n    /*\n    * Create our own set time function\n    */\n    $.datepicker._setTime = function (inst, date) {\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            var defaults = tp_inst._defaults;\n\n            // calling _setTime with no date sets time to defaults\n            tp_inst.hour = date ? date.getHours() : defaults.hour;\n            tp_inst.minute = date ? date.getMinutes() : defaults.minute;\n            tp_inst.second = date ? date.getSeconds() : defaults.second;\n            tp_inst.millisec = date ? date.getMilliseconds() : defaults.millisec;\n            tp_inst.microsec = date ? date.getMicroseconds() : defaults.microsec;\n\n            //check if within min/max times..\n            tp_inst._limitMinMaxDateTime(inst, true);\n\n            tp_inst._onTimeChange();\n            tp_inst._updateDateTime(inst);\n        }\n    };\n\n    /*\n    * Create new public method to set only time, callable as $().datepicker('setTime', date)\n    */\n    $.datepicker._setTimeDatepicker = function (target, date, withDate) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            this._setDateFromField(inst);\n            var tp_date;\n            if (date) {\n                if (typeof date === \"string\") {\n                    tp_inst._parseTime(date, withDate);\n                    tp_date = new Date();\n                    tp_date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\n                    tp_date.setMicroseconds(tp_inst.microsec);\n                } else {\n                    tp_date = new Date(date.getTime());\n                    tp_date.setMicroseconds(date.getMicroseconds());\n                }\n                if (tp_date.toString() === 'Invalid Date') {\n                    tp_date = undefined;\n                }\n                this._setTime(inst, tp_date);\n            }\n        }\n\n    };\n\n    /*\n    * override setDate() to allow setting time too within Date object\n    */\n    $.datepicker._base_setDateDatepicker = $.datepicker._setDateDatepicker;\n    $.datepicker._setDateDatepicker = function (target, date) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        if (typeof (date) === 'string') {\n            date = new Date(date);\n            if (!date.getTime()) {\n                $.timepicker.log(\"Error creating Date object from string.\");\n            }\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        var tp_date;\n        if (date instanceof Date) {\n            tp_date = new Date(date.getTime());\n            tp_date.setMicroseconds(date.getMicroseconds());\n        } else {\n            tp_date = date;\n        }\n\n        // This is important if you are using the timezone option, javascript's Date\n        // object will only return the timezone offset for the current locale, so we\n        // adjust it accordingly.  If not using timezone option this won't matter..\n        // If a timezone is different in tp, keep the timezone as is\n        if (tp_inst && tp_date) {\n            // look out for DST if tz wasn't specified\n            if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {\n                tp_inst.timezone = tp_date.getTimezoneOffset() * -1;\n            }\n            date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\n            tp_date = $.timepicker.timezoneAdjust(tp_date, tp_inst.timezone);\n        }\n\n        this._updateDatepicker(inst);\n        this._base_setDateDatepicker.apply(this, arguments);\n        this._setTimeDatepicker(target, tp_date, true);\n    };\n\n    /*\n    * override getDate() to allow getting time too within Date object\n    */\n    $.datepicker._base_getDateDatepicker = $.datepicker._getDateDatepicker;\n    $.datepicker._getDateDatepicker = function (target, noDefault) {\n        var inst = this._getInst(target);\n        if (!inst) {\n            return;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n\n        if (tp_inst) {\n            // if it hasn't yet been defined, grab from field\n            if (inst.lastVal === undefined) {\n                this._setDateFromField(inst, noDefault);\n            }\n\n            var date = this._getDate(inst);\n            if (date && tp_inst._parseTime($(target).val(), tp_inst.timeOnly)) {\n                date.setHours(tp_inst.hour, tp_inst.minute, tp_inst.second, tp_inst.millisec);\n                date.setMicroseconds(tp_inst.microsec);\n\n                // This is important if you are using the timezone option, javascript's Date\n                // object will only return the timezone offset for the current locale, so we\n                // adjust it accordingly.  If not using timezone option this won't matter..\n                if (tp_inst.timezone != null) {\n                    // look out for DST if tz wasn't specified\n                    if (!tp_inst.support.timezone && tp_inst._defaults.timezone === null) {\n                        tp_inst.timezone = date.getTimezoneOffset() * -1;\n                    }\n                    date = $.timepicker.timezoneAdjust(date, tp_inst.timezone);\n                }\n            }\n            return date;\n        }\n        return this._base_getDateDatepicker(target, noDefault);\n    };\n\n    /*\n    * override parseDate() because UI 1.8.14 throws an error about \"Extra characters\"\n    * An option in datapicker to ignore extra format characters would be nicer.\n    */\n    $.datepicker._base_parseDate = $.datepicker.parseDate;\n    $.datepicker.parseDate = function (format, value, settings) {\n        var date;\n        try {\n            date = this._base_parseDate(format, value, settings);\n        } catch (err) {\n            // Hack!  The error message ends with a colon, a space, and\n            // the \"extra\" characters.  We rely on that instead of\n            // attempting to perfectly reproduce the parsing algorithm.\n            if (err.indexOf(\":\") >= 0) {\n                date = this._base_parseDate(format, value.substring(0, value.length - (err.length - err.indexOf(':') - 2)), settings);\n                $.timepicker.log(\"Error parsing the date string: \" + err + \"\\ndate string = \" + value + \"\\ndate format = \" + format);\n            } else {\n                throw err;\n            }\n        }\n        return date;\n    };\n\n    /*\n    * override formatDate to set date with time to the input\n    */\n    $.datepicker._base_formatDate = $.datepicker._formatDate;\n    $.datepicker._formatDate = function (inst, day, month, year) {\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            tp_inst._updateDateTime(inst);\n            return tp_inst.$input.val();\n        }\n        return this._base_formatDate(inst);\n    };\n\n    /*\n    * override options setter to add time to maxDate(Time) and minDate(Time). MaxDate\n    */\n    $.datepicker._base_optionDatepicker = $.datepicker._optionDatepicker;\n    $.datepicker._optionDatepicker = function (target, name, value) {\n        var inst = this._getInst(target),\n            name_clone;\n        if (!inst) {\n            return null;\n        }\n\n        var tp_inst = this._get(inst, 'timepicker');\n        if (tp_inst) {\n            var min = null,\n                max = null,\n                onselect = null,\n                overrides = tp_inst._defaults.evnts,\n                fns = {},\n                prop;\n            if (typeof name === 'string') { // if min/max was set with the string\n                if (name === 'minDate' || name === 'minDateTime') {\n                    min = value;\n                } else if (name === 'maxDate' || name === 'maxDateTime') {\n                    max = value;\n                } else if (name === 'onSelect') {\n                    onselect = value;\n                } else if (overrides.hasOwnProperty(name)) {\n                    if (typeof (value) === 'undefined') {\n                        return overrides[name];\n                    }\n                    fns[name] = value;\n                    name_clone = {}; //empty results in exiting function after overrides updated\n                }\n            } else if (typeof name === 'object') { //if min/max was set with the JSON\n                if (name.minDate) {\n                    min = name.minDate;\n                } else if (name.minDateTime) {\n                    min = name.minDateTime;\n                } else if (name.maxDate) {\n                    max = name.maxDate;\n                } else if (name.maxDateTime) {\n                    max = name.maxDateTime;\n                }\n                for (prop in overrides) {\n                    if (overrides.hasOwnProperty(prop) && name[prop]) {\n                        fns[prop] = name[prop];\n                    }\n                }\n            }\n            for (prop in fns) {\n                if (fns.hasOwnProperty(prop)) {\n                    overrides[prop] = fns[prop];\n                    if (!name_clone) {\n                        name_clone = $.extend({}, name);\n                    }\n                    delete name_clone[prop];\n                }\n            }\n            if (name_clone && isEmptyObject(name_clone)) {\n                return;\n            }\n            if (min) { //if min was set\n                if (min === 0) {\n                    min = new Date();\n                } else {\n                    min = new Date(min);\n                }\n                tp_inst._defaults.minDate = min;\n                tp_inst._defaults.minDateTime = min;\n            } else if (max) { //if max was set\n                if (max === 0) {\n                    max = new Date();\n                } else {\n                    max = new Date(max);\n                }\n                tp_inst._defaults.maxDate = max;\n                tp_inst._defaults.maxDateTime = max;\n            } else if (onselect) {\n                tp_inst._defaults.onSelect = onselect;\n            }\n        }\n        if (value === undefined) {\n            return this._base_optionDatepicker.call($.datepicker, target, name);\n        }\n        return this._base_optionDatepicker.call($.datepicker, target, name_clone || name, value);\n    };\n\n    /*\n    * jQuery isEmptyObject does not check hasOwnProperty - if someone has added to the object prototype,\n    * it will return false for all objects\n    */\n    var isEmptyObject = function (obj) {\n        var prop;\n        for (prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    /*\n    * jQuery extend now ignores nulls!\n    */\n    var extendRemove = function (target, props) {\n        $.extend(target, props);\n        for (var name in props) {\n            if (props[name] === null || props[name] === undefined) {\n                target[name] = props[name];\n            }\n        }\n        return target;\n    };\n\n    /*\n    * Determine by the time format which units are supported\n    * Returns an object of booleans for each unit\n    */\n    var detectSupport = function (timeFormat) {\n        var tf = timeFormat.replace(/'.*?'/g, '').toLowerCase(), // removes literals\n            isIn = function (f, t) { // does the format contain the token?\n                return f.indexOf(t) !== -1 ? true : false;\n            };\n        return {\n            hour: isIn(tf, 'h'),\n            minute: isIn(tf, 'm'),\n            second: isIn(tf, 's'),\n            millisec: isIn(tf, 'l'),\n            microsec: isIn(tf, 'c'),\n            timezone: isIn(tf, 'z'),\n            ampm: isIn(tf, 't') && isIn(timeFormat, 'h'),\n            iso8601: isIn(timeFormat, 'Z')\n        };\n    };\n\n    /*\n    * Converts 24 hour format into 12 hour\n    * Returns 12 hour without leading 0\n    */\n    var convert24to12 = function (hour) {\n        hour %= 12;\n\n        if (hour === 0) {\n            hour = 12;\n        }\n\n        return String(hour);\n    };\n\n    var computeEffectiveSetting = function (settings, property) {\n        return settings && settings[property] ? settings[property] : $.timepicker._defaults[property];\n    };\n\n    /*\n    * Splits datetime string into date and time substrings.\n    * Throws exception when date can't be parsed\n    * Returns {dateString: dateString, timeString: timeString}\n    */\n    var splitDateTime = function (dateTimeString, timeSettings) {\n        // The idea is to get the number separator occurrences in datetime and the time format requested (since time has\n        // fewer unknowns, mostly numbers and am/pm). We will use the time pattern to split.\n        var separator = computeEffectiveSetting(timeSettings, 'separator'),\n            format = computeEffectiveSetting(timeSettings, 'timeFormat'),\n            timeParts = format.split(separator), // how many occurrences of separator may be in our format?\n            timePartsLen = timeParts.length,\n            allParts = dateTimeString.split(separator),\n            allPartsLen = allParts.length;\n\n        if (allPartsLen > 1) {\n            return {\n                dateString: allParts.splice(0, allPartsLen - timePartsLen).join(separator),\n                timeString: allParts.splice(0, timePartsLen).join(separator)\n            };\n        }\n\n        return {\n            dateString: dateTimeString,\n            timeString: ''\n        };\n    };\n\n    /*\n    * Internal function to parse datetime interval\n    * Returns: {date: Date, timeObj: Object}, where\n    *   date - parsed date without time (type Date)\n    *   timeObj = {hour: , minute: , second: , millisec: , microsec: } - parsed time. Optional\n    */\n    var parseDateTimeInternal = function (dateFormat, timeFormat, dateTimeString, dateSettings, timeSettings) {\n        var date,\n            parts,\n            parsedTime;\n\n        parts = splitDateTime(dateTimeString, timeSettings);\n        date = $.datepicker._base_parseDate(dateFormat, parts.dateString, dateSettings);\n\n        if (parts.timeString === '') {\n            return {\n                date: date\n            };\n        }\n\n        parsedTime = $.datepicker.parseTime(timeFormat, parts.timeString, timeSettings);\n\n        if (!parsedTime) {\n            throw 'Wrong time format';\n        }\n\n        return {\n            date: date,\n            timeObj: parsedTime\n        };\n    };\n\n    /*\n    * Internal function to set timezone_select to the local timezone\n    */\n    var selectLocalTimezone = function (tp_inst, date) {\n        if (tp_inst && tp_inst.timezone_select) {\n            var now = date || new Date();\n            tp_inst.timezone_select.val(-now.getTimezoneOffset());\n        }\n    };\n\n    /*\n    * Create a Singleton Instance\n    */\n    $.timepicker = new Timepicker();\n\n    /**\n     * Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)\n     * @param {number} tzMinutes if not a number, less than -720 (-1200), or greater than 840 (+1400) this value is returned\n     * @param {boolean} iso8601 if true formats in accordance to iso8601 \"+12:45\"\n     * @return {string}\n     */\n    $.timepicker.timezoneOffsetString = function (tzMinutes, iso8601) {\n        if (isNaN(tzMinutes) || tzMinutes > 840 || tzMinutes < -720) {\n            return tzMinutes;\n        }\n\n        var off = tzMinutes,\n            minutes = off % 60,\n            hours = (off - minutes) / 60,\n            iso = iso8601 ? ':' : '',\n            tz = (off >= 0 ? '+' : '-') + ('0' + Math.abs(hours)).slice(-2) + iso + ('0' + Math.abs(minutes)).slice(-2);\n\n        if (tz === '+00:00') {\n            return 'Z';\n        }\n        return tz;\n    };\n\n    /**\n     * Get the number in minutes that represents a timezone string\n     * @param  {string} tzString formatted like \"+0500\", \"-1245\", \"Z\"\n     * @return {number} the offset minutes or the original string if it doesn't match expectations\n     */\n    $.timepicker.timezoneOffsetNumber = function (tzString) {\n        var normalized = tzString.toString().replace(':', ''); // excuse any iso8601, end up with \"+1245\"\n\n        if (normalized.toUpperCase() === 'Z') { // if iso8601 with Z, its 0 minute offset\n            return 0;\n        }\n\n        if (!/^(\\-|\\+)\\d{4}$/.test(normalized)) { // possibly a user defined tz, so just give it back\n            return tzString;\n        }\n\n        return ((normalized.substr(0, 1) === '-' ? -1 : 1) * // plus or minus\n            ((parseInt(normalized.substr(1, 2), 10) * 60) + // hours (converted to minutes)\n                parseInt(normalized.substr(3, 2), 10))); // minutes\n    };\n\n    /**\n     * No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)\n     * @param  {Date} date\n     * @param  {string} toTimezone formatted like \"+0500\", \"-1245\"\n     * @return {Date}\n     */\n    $.timepicker.timezoneAdjust = function (date, toTimezone) {\n        var toTz = $.timepicker.timezoneOffsetNumber(toTimezone);\n        if (!isNaN(toTz)) {\n            date.setMinutes(date.getMinutes() + -date.getTimezoneOffset() - toTz);\n        }\n        return date;\n    };\n\n    /**\n     * Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * n.b. The input value must be correctly formatted (reformatting is not supported)\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the timepicker() call\n     * @return {jQuery}\n     */\n    $.timepicker.timeRange = function (startTime, endTime, options) {\n        return $.timepicker.handleRange('timepicker', startTime, endTime, options);\n    };\n\n    /**\n     * Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n     * @param  {string} method Can be used to specify the type of picker to be added\n     * @return {jQuery}\n     */\n    $.timepicker.datetimeRange = function (startTime, endTime, options) {\n        $.timepicker.handleRange('datetimepicker', startTime, endTime, options);\n    };\n\n    /**\n     * Calls `datepicker` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n     * @return {jQuery}\n     */\n    $.timepicker.dateRange = function (startTime, endTime, options) {\n        $.timepicker.handleRange('datepicker', startTime, endTime, options);\n    };\n\n    /**\n     * Calls `method` on the `startTime` and `endTime` elements, and configures them to\n     * enforce date range limits.\n     * @param  {string} method Can be used to specify the type of picker to be added\n     * @param  {Element} startTime\n     * @param  {Element} endTime\n     * @param  {Object} options Options for the `timepicker()` call. Also supports `reformat`,\n     *   a boolean value that can be used to reformat the input values to the `dateFormat`.\n     * @return {jQuery}\n     */\n    $.timepicker.handleRange = function (method, startTime, endTime, options) {\n        options = $.extend({}, {\n            minInterval: 0, // min allowed interval in milliseconds\n            maxInterval: 0, // max allowed interval in milliseconds\n            start: {},      // options for start picker\n            end: {}         // options for end picker\n        }, options);\n\n        function checkDates(changed, other) {\n            var startdt = startTime[method]('getDate'),\n                enddt = endTime[method]('getDate'),\n                changeddt = changed[method]('getDate');\n\n            if (startdt !== null) {\n                var minDate = new Date(startdt.getTime()),\n                    maxDate = new Date(startdt.getTime());\n\n                minDate.setMilliseconds(minDate.getMilliseconds() + options.minInterval);\n                maxDate.setMilliseconds(maxDate.getMilliseconds() + options.maxInterval);\n\n                if (options.minInterval > 0 && minDate > enddt) { // minInterval check\n                    endTime[method]('setDate', minDate);\n                } else if (options.maxInterval > 0 && maxDate < enddt) { // max interval check\n                    endTime[method]('setDate', maxDate);\n                } else if (startdt > enddt) {\n                    other[method]('setDate', changeddt);\n                }\n            }\n        }\n\n        function selected(changed, other, option) {\n            if (!changed.val()) {\n                return;\n            }\n            var date = changed[method].call(changed, 'getDate');\n            if (date !== null && options.minInterval > 0) {\n                if (option === 'minDate') {\n                    date.setMilliseconds(date.getMilliseconds() + options.minInterval);\n                }\n                if (option === 'maxDate') {\n                    date.setMilliseconds(date.getMilliseconds() - options.minInterval);\n                }\n            }\n            if (date.getTime) {\n                other[method].call(other, 'option', option, date);\n            }\n        }\n\n        $.fn[method].call(startTime, $.extend({\n            onClose: function (dateText, inst) {\n                checkDates($(this), endTime);\n            },\n            onSelect: function (selectedDateTime) {\n                selected($(this), endTime, 'minDate');\n            }\n        }, options, options.start));\n        $.fn[method].call(endTime, $.extend({\n            onClose: function (dateText, inst) {\n                checkDates($(this), startTime);\n            },\n            onSelect: function (selectedDateTime) {\n                selected($(this), startTime, 'maxDate');\n            }\n        }, options, options.end));\n\n        checkDates(startTime, endTime);\n        selected(startTime, endTime, 'minDate');\n        selected(endTime, startTime, 'maxDate');\n        return $([startTime.get(0), endTime.get(0)]);\n    };\n\n    /**\n     * Log error or data to the console during error or debugging\n     * @param  {Object} err pass any type object to log to the console during error or debugging\n     * @return {void}\n     */\n    $.timepicker.log = function (err) {\n        if (window.console) {\n            window.console.log(err);\n        }\n    };\n\n    /*\n     * Add util object to allow access to private methods for testability.\n     */\n    $.timepicker._util = {\n        _extendRemove: extendRemove,\n        _isEmptyObject: isEmptyObject,\n        _convert24to12: convert24to12,\n        _detectSupport: detectSupport,\n        _selectLocalTimezone: selectLocalTimezone,\n        _computeEffectiveSetting: computeEffectiveSetting,\n        _splitDateTime: splitDateTime,\n        _parseDateTimeInternal: parseDateTimeInternal\n    };\n\n    /*\n    * Microsecond support\n    */\n    if (!Date.prototype.getMicroseconds) {\n        Date.prototype.microseconds = 0;\n        Date.prototype.getMicroseconds = function () {\n            return this.microseconds;\n        };\n        Date.prototype.setMicroseconds = function (m) {\n            this.setMilliseconds(this.getMilliseconds() + Math.floor(m / 1000));\n            this.microseconds = m % 1000;\n            return this;\n        };\n    }\n\n    /*\n    * Keep up with the version\n    */\n    $.timepicker.version = \"1.4.3\";\n\n}));\n","jquery/ui-modules/mouse.js":"/*!\n * jQuery UI Mouse - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/mouse/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n], function ($, undefined) {\n\n    var mouseHandled = false;\n    $(document).mouseup(function () {\n        mouseHandled = false;\n    });\n\n    $.widget(\"ui.mouse\", {\n        version: \"1.10.4\",\n        options: {\n            cancel: \"input,textarea,button,select,option\",\n            distance: 1,\n            delay: 0\n        },\n        _mouseInit: function () {\n            var that = this;\n\n            this.element\n                .bind(\"mousedown.\" + this.widgetName, function (event) {\n                    return that._mouseDown(event);\n                })\n                .bind(\"click.\" + this.widgetName, function (event) {\n                    if (true === $.data(event.target, that.widgetName + \".preventClickEvent\")) {\n                        $.removeData(event.target, that.widgetName + \".preventClickEvent\");\n                        event.stopImmediatePropagation();\n                        return false;\n                    }\n                });\n\n            this.started = false;\n        },\n\n        // TODO: make sure destroying one instance of mouse doesn't mess with\n        // other instances of mouse\n        _mouseDestroy: function () {\n            this.element.unbind(\".\" + this.widgetName);\n            if (this._mouseMoveDelegate) {\n                $(document)\n                    .unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate)\n                    .unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n            }\n        },\n\n        _mouseDown: function (event) {\n            // don't let more than one widget handle mouseStart\n            if (mouseHandled) {\n                return;\n            }\n\n            // we may have missed mouseup (out of window)\n            (this._mouseStarted && this._mouseUp(event));\n\n            this._mouseDownEvent = event;\n\n            var that = this,\n                btnIsLeft = (event.which === 1),\n                // event.target.nodeName works around a bug in IE 8 with\n                // disabled inputs (#7620)\n                elIsCancel = (typeof this.options.cancel === \"string\" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false);\n            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {\n                return true;\n            }\n\n            this.mouseDelayMet = !this.options.delay;\n            if (!this.mouseDelayMet) {\n                this._mouseDelayTimer = setTimeout(function () {\n                    that.mouseDelayMet = true;\n                }, this.options.delay);\n            }\n\n            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n                this._mouseStarted = (this._mouseStart(event) !== false);\n                if (!this._mouseStarted) {\n                    event.preventDefault();\n                    return true;\n                }\n            }\n\n            // Click event may never have fired (Gecko & Opera)\n            if (true === $.data(event.target, this.widgetName + \".preventClickEvent\")) {\n                $.removeData(event.target, this.widgetName + \".preventClickEvent\");\n            }\n\n            // these delegates are required to keep context\n            this._mouseMoveDelegate = function (event) {\n                return that._mouseMove(event);\n            };\n            this._mouseUpDelegate = function (event) {\n                return that._mouseUp(event);\n            };\n            $(document)\n                .bind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate)\n                .bind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n            event.preventDefault();\n\n            mouseHandled = true;\n            return true;\n        },\n\n        _mouseMove: function (event) {\n            // IE mouseup check - mouseup happened when mouse was out of window\n            if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {\n                return this._mouseUp(event);\n            }\n\n            if (this._mouseStarted) {\n                this._mouseDrag(event);\n                return event.preventDefault();\n            }\n\n            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {\n                this._mouseStarted =\n                    (this._mouseStart(this._mouseDownEvent, event) !== false);\n                (this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event));\n            }\n\n            return !this._mouseStarted;\n        },\n\n        _mouseUp: function (event) {\n            $(document)\n                .unbind(\"mousemove.\" + this.widgetName, this._mouseMoveDelegate)\n                .unbind(\"mouseup.\" + this.widgetName, this._mouseUpDelegate);\n\n            if (this._mouseStarted) {\n                this._mouseStarted = false;\n\n                if (event.target === this._mouseDownEvent.target) {\n                    $.data(event.target, this.widgetName + \".preventClickEvent\", true);\n                }\n\n                this._mouseStop(event);\n            }\n\n            return false;\n        },\n\n        _mouseDistanceMet: function (event) {\n            return (Math.max(\n                    Math.abs(this._mouseDownEvent.pageX - event.pageX),\n                    Math.abs(this._mouseDownEvent.pageY - event.pageY)\n                ) >= this.options.distance\n            );\n        },\n\n        _mouseDelayMet: function (/* event */) {\n            return this.mouseDelayMet;\n        },\n\n        // These are placeholder methods, to be overridden by extending plugin\n        _mouseStart: function (/* event */) {\n        },\n        _mouseDrag: function (/* event */) {\n        },\n        _mouseStop: function (/* event */) {\n        },\n        _mouseCapture: function (/* event */) {\n            return true;\n        }\n    });\n\n});\n","jquery/ui-modules/effect-bounce.js":"/*!\n * jQuery UI Effects Bounce - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/bounce-effect/\n *\n * Depends:\n *\tjquery.ui.effect.js\n */\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.bounce = function (o, done) {\n        var el = $(this),\n            props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n\n            // defaults:\n            mode = $.effects.setMode(el, o.mode || \"effect\"),\n            hide = mode === \"hide\",\n            show = mode === \"show\",\n            direction = o.direction || \"up\",\n            distance = o.distance,\n            times = o.times || 5,\n\n            // number of internal animations\n            anims = times * 2 + (show || hide ? 1 : 0),\n            speed = o.duration / anims,\n            easing = o.easing,\n\n            // utility:\n            ref = (direction === \"up\" || direction === \"down\") ? \"top\" : \"left\",\n            motion = (direction === \"up\" || direction === \"left\"),\n            i,\n            upAnim,\n            downAnim,\n\n            // we will need to re-assemble the queue to stack our animations in place\n            queue = el.queue(),\n            queuelen = queue.length;\n\n        // Avoid touching opacity to prevent clearType and PNG issues in IE\n        if (show || hide) {\n            props.push(\"opacity\");\n        }\n\n        $.effects.save(el, props);\n        el.show();\n        $.effects.createWrapper(el); // Create Wrapper\n\n        // default distance for the BIGGEST bounce is the outer Distance / 3\n        if (!distance) {\n            distance = el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"]() / 3;\n        }\n\n        if (show) {\n            downAnim = {opacity: 1};\n            downAnim[ref] = 0;\n\n            // if we are showing, force opacity 0 and set the initial position\n            // then do the \"first\" animation\n            el.css(\"opacity\", 0)\n                .css(ref, motion ? -distance * 2 : distance * 2)\n                .animate(downAnim, speed, easing);\n        }\n\n        // start at the smallest distance if we are hiding\n        if (hide) {\n            distance = distance / Math.pow(2, times - 1);\n        }\n\n        downAnim = {};\n        downAnim[ref] = 0;\n        // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\n        for (i = 0; i < times; i++) {\n            upAnim = {};\n            upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n\n            el.animate(upAnim, speed, easing)\n                .animate(downAnim, speed, easing);\n\n            distance = hide ? distance * 2 : distance / 2;\n        }\n\n        // Last Bounce when Hiding\n        if (hide) {\n            upAnim = {opacity: 0};\n            upAnim[ref] = (motion ? \"-=\" : \"+=\") + distance;\n\n            el.animate(upAnim, speed, easing);\n        }\n\n        el.queue(function () {\n            if (hide) {\n                el.hide();\n            }\n            $.effects.restore(el, props);\n            $.effects.removeWrapper(el);\n            done();\n        });\n\n        // inject all the animations we just queued to be first in line (after \"inprogress\")\n        if (queuelen > 1) {\n            queue.splice.apply(queue,\n                [1, 0].concat(queue.splice(queuelen, anims + 1)));\n        }\n        el.dequeue();\n\n    };\n\n});\n","jquery/ui-modules/effect-drop.js":"/*!\n * jQuery UI Effects Drop - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/drop-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.drop = function (o, done) {\n\n        var el = $(this),\n            props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"opacity\", \"height\", \"width\"],\n            mode = $.effects.setMode(el, o.mode || \"hide\"),\n            show = mode === \"show\",\n            direction = o.direction || \"left\",\n            ref = (direction === \"up\" || direction === \"down\") ? \"top\" : \"left\",\n            motion = (direction === \"up\" || direction === \"left\") ? \"pos\" : \"neg\",\n            animation = {\n                opacity: show ? 1 : 0\n            },\n            distance;\n\n        // Adjust\n        $.effects.save(el, props);\n        el.show();\n        $.effects.createWrapper(el);\n\n        distance = o.distance || el[ref === \"top\" ? \"outerHeight\" : \"outerWidth\"](true) / 2;\n\n        if (show) {\n            el\n                .css(\"opacity\", 0)\n                .css(ref, motion === \"pos\" ? -distance : distance);\n        }\n\n        // Animation\n        animation[ref] = (show ?\n            (motion === \"pos\" ? \"+=\" : \"-=\") :\n            (motion === \"pos\" ? \"-=\" : \"+=\")) +\n            distance;\n\n        // Animate\n        el.animate(animation, {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: function () {\n                if (mode === \"hide\") {\n                    el.hide();\n                }\n                $.effects.restore(el, props);\n                $.effects.removeWrapper(el);\n                done();\n            }\n        });\n    };\n\n});\n","jquery/ui-modules/dialog.js":"/*!\n * jQuery UI Dialog - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/dialog/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/button',\n    'jquery-ui-modules/draggable',\n    'jquery-ui-modules/position',\n    'jquery-ui-modules/resizable'\n], function ($, undefined) {\n\n    var sizeRelatedOptions = {\n            buttons: true,\n            height: true,\n            maxHeight: true,\n            maxWidth: true,\n            minHeight: true,\n            minWidth: true,\n            width: true\n        },\n        resizableRelatedOptions = {\n            maxHeight: true,\n            maxWidth: true,\n            minHeight: true,\n            minWidth: true\n        };\n\n    $.widget(\"ui.dialog\", {\n        version: \"1.10.4\",\n        options: {\n            appendTo: \"body\",\n            autoOpen: true,\n            buttons: [],\n            closeOnEscape: true,\n            closeText: \"close\",\n            dialogClass: \"\",\n            draggable: true,\n            hide: null,\n            height: \"auto\",\n            maxHeight: null,\n            maxWidth: null,\n            minHeight: 150,\n            minWidth: 150,\n            modal: false,\n            position: {\n                my: \"center\",\n                at: \"center\",\n                of: window,\n                collision: \"fit\",\n                // Ensure the titlebar is always visible\n                using: function (pos) {\n                    var topOffset = $(this).css(pos).offset().top;\n                    if (topOffset < 0) {\n                        $(this).css(\"top\", pos.top - topOffset);\n                    }\n                }\n            },\n            resizable: true,\n            show: null,\n            title: null,\n            width: 300,\n\n            // callbacks\n            beforeClose: null,\n            close: null,\n            drag: null,\n            dragStart: null,\n            dragStop: null,\n            focus: null,\n            open: null,\n            resize: null,\n            resizeStart: null,\n            resizeStop: null\n        },\n\n        _create: function () {\n            this.originalCss = {\n                display: this.element[0].style.display,\n                width: this.element[0].style.width,\n                minHeight: this.element[0].style.minHeight,\n                maxHeight: this.element[0].style.maxHeight,\n                height: this.element[0].style.height\n            };\n            this.originalPosition = {\n                parent: this.element.parent(),\n                index: this.element.parent().children().index(this.element)\n            };\n            this.originalTitle = this.element.attr(\"title\");\n            this.options.title = this.options.title || this.originalTitle;\n\n            this._createWrapper();\n\n            this.element\n                .show()\n                .removeAttr(\"title\")\n                .addClass(\"ui-dialog-content ui-widget-content\")\n                .appendTo(this.uiDialog);\n\n            this._createTitlebar();\n            this._createButtonPane();\n\n            if (this.options.draggable && $.fn.draggable) {\n                this._makeDraggable();\n            }\n            if (this.options.resizable && $.fn.resizable) {\n                this._makeResizable();\n            }\n\n            this._isOpen = false;\n        },\n\n        _init: function () {\n            if (this.options.autoOpen) {\n                this.open();\n            }\n        },\n\n        _appendTo: function () {\n            var element = this.options.appendTo;\n            if (element && (element.jquery || element.nodeType)) {\n                return $(element);\n            }\n            return this.document.find(element || \"body\").eq(0);\n        },\n\n        _destroy: function () {\n            var next,\n                originalPosition = this.originalPosition;\n\n            this._destroyOverlay();\n\n            this.element\n                .removeUniqueId()\n                .removeClass(\"ui-dialog-content ui-widget-content\")\n                .css(this.originalCss)\n                // Without detaching first, the following becomes really slow\n                .detach();\n\n            this.uiDialog.stop(true, true).remove();\n\n            if (this.originalTitle) {\n                this.element.attr(\"title\", this.originalTitle);\n            }\n\n            next = originalPosition.parent.children().eq(originalPosition.index);\n            // Don't try to place the dialog next to itself (#8613)\n            if (next.length && next[0] !== this.element[0]) {\n                next.before(this.element);\n            } else {\n                originalPosition.parent.append(this.element);\n            }\n        },\n\n        widget: function () {\n            return this.uiDialog;\n        },\n\n        disable: $.noop,\n        enable: $.noop,\n\n        close: function (event) {\n            var activeElement,\n                that = this;\n\n            if (!this._isOpen || this._trigger(\"beforeClose\", event) === false) {\n                return;\n            }\n\n            this._isOpen = false;\n            this._destroyOverlay();\n\n            if (!this.opener.filter(\":focusable\").focus().length) {\n\n                // support: IE9\n                // IE9 throws an \"Unspecified error\" accessing document.activeElement from an <iframe>\n                try {\n                    activeElement = this.document[0].activeElement;\n\n                    // Support: IE9, IE10\n                    // If the <body> is blurred, IE will switch windows, see #4520\n                    if (activeElement && activeElement.nodeName.toLowerCase() !== \"body\") {\n\n                        // Hiding a focused element doesn't trigger blur in WebKit\n                        // so in case we have nothing to focus on, explicitly blur the active element\n                        // https://bugs.webkit.org/show_bug.cgi?id=47182\n                        $(activeElement).blur();\n                    }\n                } catch (error) {\n                }\n            }\n\n            this._hide(this.uiDialog, this.options.hide, function () {\n                that._trigger(\"close\", event);\n            });\n        },\n\n        isOpen: function () {\n            return this._isOpen;\n        },\n\n        moveToTop: function () {\n            this._moveToTop();\n        },\n\n        _moveToTop: function (event, silent) {\n            var moved = !!this.uiDialog.nextAll(\":visible\").insertBefore(this.uiDialog).length;\n            if (moved && !silent) {\n                this._trigger(\"focus\", event);\n            }\n            return moved;\n        },\n\n        open: function () {\n            var that = this;\n            if (this._isOpen) {\n                if (this._moveToTop()) {\n                    this._focusTabbable();\n                }\n                return;\n            }\n\n            this._isOpen = true;\n            this.opener = $(this.document[0].activeElement);\n\n            this._size();\n            this._position();\n            this._createOverlay();\n            this._moveToTop(null, true);\n            this._show(this.uiDialog, this.options.show, function () {\n                that._focusTabbable();\n                that._trigger(\"focus\");\n            });\n\n            this._trigger(\"open\");\n        },\n\n        _focusTabbable: function () {\n            // Set focus to the first match:\n            // 1. First element inside the dialog matching [autofocus]\n            // 2. Tabbable element inside the content element\n            // 3. Tabbable element inside the buttonpane\n            // 4. The close button\n            // 5. The dialog itself\n            var hasFocus = this.element.find(\"[autofocus]\");\n            if (!hasFocus.length) {\n                hasFocus = this.element.find(\":tabbable\");\n            }\n            if (!hasFocus.length) {\n                hasFocus = this.uiDialogButtonPane.find(\":tabbable\");\n            }\n            if (!hasFocus.length) {\n                hasFocus = this.uiDialogTitlebarClose.filter(\":tabbable\");\n            }\n            if (!hasFocus.length) {\n                hasFocus = this.uiDialog;\n            }\n            hasFocus.eq(0).focus();\n        },\n\n        _keepFocus: function (event) {\n            function checkFocus() {\n                var activeElement = this.document[0].activeElement,\n                    isActive = this.uiDialog[0] === activeElement ||\n                        $.contains(this.uiDialog[0], activeElement);\n                if (!isActive) {\n                    this._focusTabbable();\n                }\n            }\n\n            event.preventDefault();\n            checkFocus.call(this);\n            // support: IE\n            // IE <= 8 doesn't prevent moving focus even with event.preventDefault()\n            // so we check again later\n            this._delay(checkFocus);\n        },\n\n        _createWrapper: function () {\n            this.uiDialog = $(\"<div>\")\n                .addClass(\"ui-dialog ui-widget ui-widget-content ui-corner-all ui-front \" +\n                    this.options.dialogClass)\n                .hide()\n                .attr({\n                    // Setting tabIndex makes the div focusable\n                    tabIndex: -1,\n                    role: \"dialog\"\n                })\n                .appendTo(this._appendTo());\n\n            this._on(this.uiDialog, {\n                keydown: function (event) {\n                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode &&\n                        event.keyCode === $.ui.keyCode.ESCAPE) {\n                        event.preventDefault();\n                        this.close(event);\n                        return;\n                    }\n\n                    // prevent tabbing out of dialogs\n                    if (event.keyCode !== $.ui.keyCode.TAB) {\n                        return;\n                    }\n                    var tabbables = this.uiDialog.find(\":tabbable\"),\n                        first = tabbables.filter(\":first\"),\n                        last = tabbables.filter(\":last\");\n\n                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {\n                        first.focus(1);\n                        event.preventDefault();\n                    } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {\n                        last.focus(1);\n                        event.preventDefault();\n                    }\n                },\n                mousedown: function (event) {\n                    if (this._moveToTop(event)) {\n                        this._focusTabbable();\n                    }\n                }\n            });\n\n            // We assume that any existing aria-describedby attribute means\n            // that the dialog content is marked up properly\n            // otherwise we brute force the content as the description\n            if (!this.element.find(\"[aria-describedby]\").length) {\n                this.uiDialog.attr({\n                    \"aria-describedby\": this.element.uniqueId().attr(\"id\")\n                });\n            }\n        },\n\n        _createTitlebar: function () {\n            var uiDialogTitle;\n\n            this.uiDialogTitlebar = $(\"<div>\")\n                .addClass(\"ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix\")\n                .prependTo(this.uiDialog);\n            this._on(this.uiDialogTitlebar, {\n                mousedown: function (event) {\n                    // Don't prevent click on close button (#8838)\n                    // Focusing a dialog that is partially scrolled out of view\n                    // causes the browser to scroll it into view, preventing the click event\n                    if (!$(event.target).closest(\".ui-dialog-titlebar-close\")) {\n                        // Dialog isn't getting focus when dragging (#8063)\n                        this.uiDialog.focus();\n                    }\n                }\n            });\n\n            // support: IE\n            // Use type=\"button\" to prevent enter keypresses in textboxes from closing the\n            // dialog in IE (#9312)\n            this.uiDialogTitlebarClose = $(\"<button type='button'></button>\")\n                .button({\n                    label: this.options.closeText,\n                    icons: {\n                        primary: \"ui-icon-closethick\"\n                    },\n                    text: false\n                })\n                .addClass(\"ui-dialog-titlebar-close\")\n                .appendTo(this.uiDialogTitlebar);\n            this._on(this.uiDialogTitlebarClose, {\n                click: function (event) {\n                    event.preventDefault();\n                    this.close(event);\n                }\n            });\n\n            uiDialogTitle = $(\"<span>\")\n                .uniqueId()\n                .addClass(\"ui-dialog-title\")\n                .prependTo(this.uiDialogTitlebar);\n            this._title(uiDialogTitle);\n\n            this.uiDialog.attr({\n                \"aria-labelledby\": uiDialogTitle.attr(\"id\")\n            });\n        },\n\n        _title: function (title) {\n            if (!this.options.title) {\n                title.html(\"&#160;\");\n            }\n            title.text(this.options.title);\n        },\n\n        _createButtonPane: function () {\n            this.uiDialogButtonPane = $(\"<div>\")\n                .addClass(\"ui-dialog-buttonpane ui-widget-content ui-helper-clearfix\");\n\n            this.uiButtonSet = $(\"<div>\")\n                .addClass(\"ui-dialog-buttonset\")\n                .appendTo(this.uiDialogButtonPane);\n\n            this._createButtons();\n        },\n\n        _createButtons: function () {\n            var that = this,\n                buttons = this.options.buttons;\n\n            // if we already have a button pane, remove it\n            this.uiDialogButtonPane.remove();\n            this.uiButtonSet.empty();\n\n            if ($.isEmptyObject(buttons) || ($.isArray(buttons) && !buttons.length)) {\n                this.uiDialog.removeClass(\"ui-dialog-buttons\");\n                return;\n            }\n\n            $.each(buttons, function (name, props) {\n                var click, buttonOptions;\n                props = $.isFunction(props) ?\n                    {click: props, text: name} :\n                    props;\n                // Default to a non-submitting button\n                props = $.extend({type: \"button\"}, props);\n                // Change the context for the click callback to be the main element\n                click = props.click;\n                props.click = function () {\n                    click.apply(that.element[0], arguments);\n                };\n                buttonOptions = {\n                    icons: props.icons,\n                    text: props.showText\n                };\n                delete props.icons;\n                delete props.showText;\n                $(\"<button></button>\", props)\n                    .button(buttonOptions)\n                    .appendTo(that.uiButtonSet);\n            });\n            this.uiDialog.addClass(\"ui-dialog-buttons\");\n            this.uiDialogButtonPane.appendTo(this.uiDialog);\n        },\n\n        _makeDraggable: function () {\n            var that = this,\n                options = this.options;\n\n            function filteredUi(ui) {\n                return {\n                    position: ui.position,\n                    offset: ui.offset\n                };\n            }\n\n            this.uiDialog.draggable({\n                cancel: \".ui-dialog-content, .ui-dialog-titlebar-close\",\n                handle: \".ui-dialog-titlebar\",\n                containment: \"document\",\n                start: function (event, ui) {\n                    $(this).addClass(\"ui-dialog-dragging\");\n                    that._blockFrames();\n                    that._trigger(\"dragStart\", event, filteredUi(ui));\n                },\n                drag: function (event, ui) {\n                    that._trigger(\"drag\", event, filteredUi(ui));\n                },\n                stop: function (event, ui) {\n                    options.position = [\n                        ui.position.left - that.document.scrollLeft(),\n                        ui.position.top - that.document.scrollTop()\n                    ];\n                    $(this).removeClass(\"ui-dialog-dragging\");\n                    that._unblockFrames();\n                    that._trigger(\"dragStop\", event, filteredUi(ui));\n                }\n            });\n        },\n\n        _makeResizable: function () {\n            var that = this,\n                options = this.options,\n                handles = options.resizable,\n                // .ui-resizable has position: relative defined in the stylesheet\n                // but dialogs have to use absolute or fixed positioning\n                position = this.uiDialog.css(\"position\"),\n                resizeHandles = typeof handles === \"string\" ?\n                    handles :\n                    \"n,e,s,w,se,sw,ne,nw\";\n\n            function filteredUi(ui) {\n                return {\n                    originalPosition: ui.originalPosition,\n                    originalSize: ui.originalSize,\n                    position: ui.position,\n                    size: ui.size\n                };\n            }\n\n            this.uiDialog.resizable({\n                cancel: \".ui-dialog-content\",\n                containment: \"document\",\n                alsoResize: this.element,\n                maxWidth: options.maxWidth,\n                maxHeight: options.maxHeight,\n                minWidth: options.minWidth,\n                minHeight: this._minHeight(),\n                handles: resizeHandles,\n                start: function (event, ui) {\n                    $(this).addClass(\"ui-dialog-resizing\");\n                    that._blockFrames();\n                    that._trigger(\"resizeStart\", event, filteredUi(ui));\n                },\n                resize: function (event, ui) {\n                    that._trigger(\"resize\", event, filteredUi(ui));\n                },\n                stop: function (event, ui) {\n                    options.height = $(this).height();\n                    options.width = $(this).width();\n                    $(this).removeClass(\"ui-dialog-resizing\");\n                    that._unblockFrames();\n                    that._trigger(\"resizeStop\", event, filteredUi(ui));\n                }\n            })\n                .css(\"position\", position);\n        },\n\n        _minHeight: function () {\n            var options = this.options;\n\n            return options.height === \"auto\" ?\n                options.minHeight :\n                Math.min(options.minHeight, options.height);\n        },\n\n        _position: function () {\n            // Need to show the dialog to get the actual offset in the position plugin\n            var isVisible = this.uiDialog.is(\":visible\");\n            if (!isVisible) {\n                this.uiDialog.show();\n            }\n            this.uiDialog.position(this.options.position);\n            if (!isVisible) {\n                this.uiDialog.hide();\n            }\n        },\n\n        _setOptions: function (options) {\n            var that = this,\n                resize = false,\n                resizableOptions = {};\n\n            $.each(options, function (key, value) {\n                that._setOption(key, value);\n\n                if (key in sizeRelatedOptions) {\n                    resize = true;\n                }\n                if (key in resizableRelatedOptions) {\n                    resizableOptions[key] = value;\n                }\n            });\n\n            if (resize) {\n                this._size();\n                this._position();\n            }\n            if (this.uiDialog.is(\":data(ui-resizable)\")) {\n                this.uiDialog.resizable(\"option\", resizableOptions);\n            }\n        },\n\n        _setOption: function (key, value) {\n            var isDraggable, isResizable,\n                uiDialog = this.uiDialog;\n\n            if (key === \"dialogClass\") {\n                uiDialog\n                    .removeClass(this.options.dialogClass)\n                    .addClass(value);\n            }\n\n            if (key === \"disabled\") {\n                return;\n            }\n\n            this._super(key, value);\n\n            if (key === \"appendTo\") {\n                this.uiDialog.appendTo(this._appendTo());\n            }\n\n            if (key === \"buttons\") {\n                this._createButtons();\n            }\n\n            if (key === \"closeText\") {\n                this.uiDialogTitlebarClose.button({\n                    // Ensure that we always pass a string\n                    label: \"\" + value\n                });\n            }\n\n            if (key === \"draggable\") {\n                isDraggable = uiDialog.is(\":data(ui-draggable)\");\n                if (isDraggable && !value) {\n                    uiDialog.draggable(\"destroy\");\n                }\n\n                if (!isDraggable && value) {\n                    this._makeDraggable();\n                }\n            }\n\n            if (key === \"position\") {\n                this._position();\n            }\n\n            if (key === \"resizable\") {\n                // currently resizable, becoming non-resizable\n                isResizable = uiDialog.is(\":data(ui-resizable)\");\n                if (isResizable && !value) {\n                    uiDialog.resizable(\"destroy\");\n                }\n\n                // currently resizable, changing handles\n                if (isResizable && typeof value === \"string\") {\n                    uiDialog.resizable(\"option\", \"handles\", value);\n                }\n\n                // currently non-resizable, becoming resizable\n                if (!isResizable && value !== false) {\n                    this._makeResizable();\n                }\n            }\n\n            if (key === \"title\") {\n                this._title(this.uiDialogTitlebar.find(\".ui-dialog-title\"));\n            }\n        },\n\n        _size: function () {\n            // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content\n            // divs will both have width and height set, so we need to reset them\n            var nonContentHeight, minContentHeight, maxContentHeight,\n                options = this.options;\n\n            // Reset content sizing\n            this.element.show().css({\n                width: \"auto\",\n                minHeight: 0,\n                maxHeight: \"none\",\n                height: 0\n            });\n\n            if (options.minWidth > options.width) {\n                options.width = options.minWidth;\n            }\n\n            // reset wrapper sizing\n            // determine the height of all the non-content elements\n            nonContentHeight = this.uiDialog.css({\n                height: \"auto\",\n                width: options.width\n            })\n                .outerHeight();\n            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);\n            maxContentHeight = typeof options.maxHeight === \"number\" ?\n                Math.max(0, options.maxHeight - nonContentHeight) :\n                \"none\";\n\n            if (options.height === \"auto\") {\n                this.element.css({\n                    minHeight: minContentHeight,\n                    maxHeight: maxContentHeight,\n                    height: \"auto\"\n                });\n            } else {\n                this.element.height(Math.max(0, options.height - nonContentHeight));\n            }\n\n            if (this.uiDialog.is(\":data(ui-resizable)\")) {\n                this.uiDialog.resizable(\"option\", \"minHeight\", this._minHeight());\n            }\n        },\n\n        _blockFrames: function () {\n            this.iframeBlocks = this.document.find(\"iframe\").map(function () {\n                var iframe = $(this);\n\n                return $(\"<div>\")\n                    .css({\n                        position: \"absolute\",\n                        width: iframe.outerWidth(),\n                        height: iframe.outerHeight()\n                    })\n                    .appendTo(iframe.parent())\n                    .offset(iframe.offset())[0];\n            });\n        },\n\n        _unblockFrames: function () {\n            if (this.iframeBlocks) {\n                this.iframeBlocks.remove();\n                delete this.iframeBlocks;\n            }\n        },\n\n        _allowInteraction: function (event) {\n            if ($(event.target).closest(\".ui-dialog\").length) {\n                return true;\n            }\n\n            // TODO: Remove hack when datepicker implements\n            // the .ui-front logic (#8989)\n            return !!$(event.target).closest(\".ui-datepicker\").length;\n        },\n\n        _createOverlay: function () {\n            if (!this.options.modal) {\n                return;\n            }\n\n            var that = this,\n                widgetFullName = this.widgetFullName;\n            if (!$.ui.dialog.overlayInstances) {\n                // Prevent use of anchors and inputs.\n                // We use a delay in case the overlay is created from an\n                // event that we're going to be cancelling. (#2804)\n                this._delay(function () {\n                    // Handle .dialog().dialog(\"close\") (#4065)\n                    if ($.ui.dialog.overlayInstances) {\n                        this.document.bind(\"focusin.dialog\", function (event) {\n                            if (!that._allowInteraction(event)) {\n                                event.preventDefault();\n                                $(\".ui-dialog:visible:last .ui-dialog-content\")\n                                    .data(widgetFullName)._focusTabbable();\n                            }\n                        });\n                    }\n                });\n            }\n\n            this.overlay = $(\"<div>\")\n                .addClass(\"ui-widget-overlay ui-front\")\n                .appendTo(this._appendTo());\n            this._on(this.overlay, {\n                mousedown: \"_keepFocus\"\n            });\n            $.ui.dialog.overlayInstances++;\n        },\n\n        _destroyOverlay: function () {\n            if (!this.options.modal) {\n                return;\n            }\n\n            if (this.overlay) {\n                $.ui.dialog.overlayInstances--;\n\n                if (!$.ui.dialog.overlayInstances) {\n                    this.document.unbind(\"focusin.dialog\");\n                }\n                this.overlay.remove();\n                this.overlay = null;\n            }\n        }\n    });\n\n    $.ui.dialog.overlayInstances = 0;\n\n// DEPRECATED\n    if ($.uiBackCompat !== false) {\n        // position option with array notation\n        // just override with old implementation\n        $.widget(\"ui.dialog\", $.ui.dialog, {\n            _position: function () {\n                var position = this.options.position,\n                    myAt = [],\n                    offset = [0, 0],\n                    isVisible;\n\n                if (position) {\n                    if (typeof position === \"string\" || (typeof position === \"object\" && \"0\" in position)) {\n                        myAt = position.split ? position.split(\" \") : [position[0], position[1]];\n                        if (myAt.length === 1) {\n                            myAt[1] = myAt[0];\n                        }\n\n                        $.each([\"left\", \"top\"], function (i, offsetPosition) {\n                            if (+myAt[i] === myAt[i]) {\n                                offset[i] = myAt[i];\n                                myAt[i] = offsetPosition;\n                            }\n                        });\n\n                        position = {\n                            my: myAt[0] + (offset[0] < 0 ? offset[0] : \"+\" + offset[0]) + \" \" +\n                                myAt[1] + (offset[1] < 0 ? offset[1] : \"+\" + offset[1]),\n                            at: myAt.join(\" \")\n                        };\n                    }\n\n                    position = $.extend({}, $.ui.dialog.prototype.options.position, position);\n                } else {\n                    position = $.ui.dialog.prototype.options.position;\n                }\n\n                // need to show the dialog to get the actual offset in the position plugin\n                isVisible = this.uiDialog.is(\":visible\");\n                if (!isVisible) {\n                    this.uiDialog.show();\n                }\n                this.uiDialog.position(position);\n                if (!isVisible) {\n                    this.uiDialog.hide();\n                }\n            }\n        });\n    }\n\n});\n","jquery/ui-modules/effect-scale.js":"/*!\n * jQuery UI Effects Scale - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/scale-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.puff = function (o, done) {\n        var elem = $(this),\n            mode = $.effects.setMode(elem, o.mode || \"hide\"),\n            hide = mode === \"hide\",\n            percent = parseInt(o.percent, 10) || 150,\n            factor = percent / 100,\n            original = {\n                height: elem.height(),\n                width: elem.width(),\n                outerHeight: elem.outerHeight(),\n                outerWidth: elem.outerWidth()\n            };\n\n        $.extend(o, {\n            effect: \"scale\",\n            queue: false,\n            fade: true,\n            mode: mode,\n            complete: done,\n            percent: hide ? percent : 100,\n            from: hide ?\n                original :\n                {\n                    height: original.height * factor,\n                    width: original.width * factor,\n                    outerHeight: original.outerHeight * factor,\n                    outerWidth: original.outerWidth * factor\n                }\n        });\n\n        elem.effect(o);\n    };\n\n    $.effects.effect.scale = function (o, done) {\n\n        // Create element\n        var el = $(this),\n            options = $.extend(true, {}, o),\n            mode = $.effects.setMode(el, o.mode || \"effect\"),\n            percent = parseInt(o.percent, 10) ||\n                (parseInt(o.percent, 10) === 0 ? 0 : (mode === \"hide\" ? 0 : 100)),\n            direction = o.direction || \"both\",\n            origin = o.origin,\n            original = {\n                height: el.height(),\n                width: el.width(),\n                outerHeight: el.outerHeight(),\n                outerWidth: el.outerWidth()\n            },\n            factor = {\n                y: direction !== \"horizontal\" ? (percent / 100) : 1,\n                x: direction !== \"vertical\" ? (percent / 100) : 1\n            };\n\n        // We are going to pass this effect to the size effect:\n        options.effect = \"size\";\n        options.queue = false;\n        options.complete = done;\n\n        // Set default origin and restore for show/hide\n        if (mode !== \"effect\") {\n            options.origin = origin || [\"middle\", \"center\"];\n            options.restore = true;\n        }\n\n        options.from = o.from || (mode === \"show\" ? {\n            height: 0,\n            width: 0,\n            outerHeight: 0,\n            outerWidth: 0\n        } : original);\n        options.to = {\n            height: original.height * factor.y,\n            width: original.width * factor.x,\n            outerHeight: original.outerHeight * factor.y,\n            outerWidth: original.outerWidth * factor.x\n        };\n\n        // Fade option to support puff\n        if (options.fade) {\n            if (mode === \"show\") {\n                options.from.opacity = 0;\n                options.to.opacity = 1;\n            }\n            if (mode === \"hide\") {\n                options.from.opacity = 1;\n                options.to.opacity = 0;\n            }\n        }\n\n        // Animate\n        el.effect(options);\n\n    };\n\n    $.effects.effect.size = function (o, done) {\n\n        // Create element\n        var original, baseline, factor,\n            el = $(this),\n            props0 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"width\", \"height\", \"overflow\", \"opacity\"],\n\n            // Always restore\n            props1 = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"overflow\", \"opacity\"],\n\n            // Copy for children\n            props2 = [\"width\", \"height\", \"overflow\"],\n            cProps = [\"fontSize\"],\n            vProps = [\"borderTopWidth\", \"borderBottomWidth\", \"paddingTop\", \"paddingBottom\"],\n            hProps = [\"borderLeftWidth\", \"borderRightWidth\", \"paddingLeft\", \"paddingRight\"],\n\n            // Set options\n            mode = $.effects.setMode(el, o.mode || \"effect\"),\n            restore = o.restore || mode !== \"effect\",\n            scale = o.scale || \"both\",\n            origin = o.origin || [\"middle\", \"center\"],\n            position = el.css(\"position\"),\n            props = restore ? props0 : props1,\n            zero = {\n                height: 0,\n                width: 0,\n                outerHeight: 0,\n                outerWidth: 0\n            };\n\n        if (mode === \"show\") {\n            el.show();\n        }\n        original = {\n            height: el.height(),\n            width: el.width(),\n            outerHeight: el.outerHeight(),\n            outerWidth: el.outerWidth()\n        };\n\n        if (o.mode === \"toggle\" && mode === \"show\") {\n            el.from = o.to || zero;\n            el.to = o.from || original;\n        } else {\n            el.from = o.from || (mode === \"show\" ? zero : original);\n            el.to = o.to || (mode === \"hide\" ? zero : original);\n        }\n\n        // Set scaling factor\n        factor = {\n            from: {\n                y: el.from.height / original.height,\n                x: el.from.width / original.width\n            },\n            to: {\n                y: el.to.height / original.height,\n                x: el.to.width / original.width\n            }\n        };\n\n        // Scale the css box\n        if (scale === \"box\" || scale === \"both\") {\n\n            // Vertical props scaling\n            if (factor.from.y !== factor.to.y) {\n                props = props.concat(vProps);\n                el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);\n                el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);\n            }\n\n            // Horizontal props scaling\n            if (factor.from.x !== factor.to.x) {\n                props = props.concat(hProps);\n                el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);\n                el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);\n            }\n        }\n\n        // Scale the content\n        if (scale === \"content\" || scale === \"both\") {\n\n            // Vertical props scaling\n            if (factor.from.y !== factor.to.y) {\n                props = props.concat(cProps).concat(props2);\n                el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);\n                el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);\n            }\n        }\n\n        $.effects.save(el, props);\n        el.show();\n        $.effects.createWrapper(el);\n        el.css(\"overflow\", \"hidden\").css(el.from);\n\n        // Adjust\n        if (origin) { // Calculate baseline shifts\n            baseline = $.effects.getBaseline(origin, original);\n            el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;\n            el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;\n            el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;\n            el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;\n        }\n        el.css(el.from); // set top & left\n\n        // Animate\n        if (scale === \"content\" || scale === \"both\") { // Scale the children\n\n            // Add margins/font-size\n            vProps = vProps.concat([\"marginTop\", \"marginBottom\"]).concat(cProps);\n            hProps = hProps.concat([\"marginLeft\", \"marginRight\"]);\n            props2 = props0.concat(vProps).concat(hProps);\n\n            el.find(\"*[width]\").each(function () {\n                var child = $(this),\n                    c_original = {\n                        height: child.height(),\n                        width: child.width(),\n                        outerHeight: child.outerHeight(),\n                        outerWidth: child.outerWidth()\n                    };\n                if (restore) {\n                    $.effects.save(child, props2);\n                }\n\n                child.from = {\n                    height: c_original.height * factor.from.y,\n                    width: c_original.width * factor.from.x,\n                    outerHeight: c_original.outerHeight * factor.from.y,\n                    outerWidth: c_original.outerWidth * factor.from.x\n                };\n                child.to = {\n                    height: c_original.height * factor.to.y,\n                    width: c_original.width * factor.to.x,\n                    outerHeight: c_original.height * factor.to.y,\n                    outerWidth: c_original.width * factor.to.x\n                };\n\n                // Vertical props scaling\n                if (factor.from.y !== factor.to.y) {\n                    child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);\n                    child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);\n                }\n\n                // Horizontal props scaling\n                if (factor.from.x !== factor.to.x) {\n                    child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);\n                    child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);\n                }\n\n                // Animate children\n                child.css(child.from);\n                child.animate(child.to, o.duration, o.easing, function () {\n\n                    // Restore children\n                    if (restore) {\n                        $.effects.restore(child, props2);\n                    }\n                });\n            });\n        }\n\n        // Animate\n        el.animate(el.to, {\n            queue: false,\n            duration: o.duration,\n            easing: o.easing,\n            complete: function () {\n                if (el.to.opacity === 0) {\n                    el.css(\"opacity\", el.from.opacity);\n                }\n                if (mode === \"hide\") {\n                    el.hide();\n                }\n                $.effects.restore(el, props);\n                if (!restore) {\n\n                    // we need to calculate our new positioning based on the scaling\n                    if (position === \"static\") {\n                        el.css({\n                            position: \"relative\",\n                            top: el.to.top,\n                            left: el.to.left\n                        });\n                    } else {\n                        $.each([\"top\", \"left\"], function (idx, pos) {\n                            el.css(pos, function (_, str) {\n                                var val = parseInt(str, 10),\n                                    toRef = idx ? el.to.left : el.to.top;\n\n                                // if original was \"auto\", recalculate the new value from wrapper\n                                if (str === \"auto\") {\n                                    return toRef + \"px\";\n                                }\n\n                                return val + toRef + \"px\";\n                            });\n                        });\n                    }\n                }\n\n                $.effects.removeWrapper(el);\n                done();\n            }\n        });\n\n    };\n\n});\n","jquery/ui-modules/effect-fold.js":"/*!\n * jQuery UI Effects Fold - v1.10.4\n * http://jqueryui.com\n *\n * Copyright 2014 jQuery Foundation and other contributors\n * Released under the MIT license.\n * http://jquery.org/license\n *\n * http://api.jqueryui.com/fold-effect/\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/effect'\n], function ($, undefined) {\n\n    $.effects.effect.fold = function (o, done) {\n\n        // Create element\n        var el = $(this),\n            props = [\"position\", \"top\", \"bottom\", \"left\", \"right\", \"height\", \"width\"],\n            mode = $.effects.setMode(el, o.mode || \"hide\"),\n            show = mode === \"show\",\n            hide = mode === \"hide\",\n            size = o.size || 15,\n            percent = /([0-9]+)%/.exec(size),\n            horizFirst = !!o.horizFirst,\n            widthFirst = show !== horizFirst,\n            ref = widthFirst ? [\"width\", \"height\"] : [\"height\", \"width\"],\n            duration = o.duration / 2,\n            wrapper, distance,\n            animation1 = {},\n            animation2 = {};\n\n        $.effects.save(el, props);\n        el.show();\n\n        // Create Wrapper\n        wrapper = $.effects.createWrapper(el).css({\n            overflow: \"hidden\"\n        });\n        distance = widthFirst ?\n            [wrapper.width(), wrapper.height()] :\n            [wrapper.height(), wrapper.width()];\n\n        if (percent) {\n            size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];\n        }\n        if (show) {\n            wrapper.css(horizFirst ? {\n                height: 0,\n                width: size\n            } : {\n                height: size,\n                width: 0\n            });\n        }\n\n        // Animation\n        animation1[ref[0]] = show ? distance[0] : size;\n        animation2[ref[1]] = show ? distance[1] : 0;\n\n        // Animate\n        wrapper\n            .animate(animation1, duration, o.easing)\n            .animate(animation2, duration, o.easing, function () {\n                if (hide) {\n                    el.hide();\n                }\n                $.effects.restore(el, props);\n                $.effects.removeWrapper(el);\n                done();\n            });\n    };\n\n});\n","jquery/patches/jquery.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    /**\n     * Patch for CVE-2015-9251 (XSS vulnerability).\n     * Can safely remove only when jQuery UI is upgraded to >= 3.3.x.\n     * https://www.cvedetails.com/cve/CVE-2015-9251/\n     */\n    function ajaxResponsePatch(jQuery) {\n        jQuery.ajaxPrefilter(function (s) {\n            if (s.crossDomain) {\n                s.contents.script = false;\n            }\n        });\n    }\n\n    return function ($) {\n        var majorVersion = $.fn.jquery.split('.')[0];\n\n        if (majorVersion >= 3) {\n            console.warn('jQuery patch for CVE-2015-9251 is no longer necessary, and should be removed');\n        }\n\n        ajaxResponsePatch($);\n\n        return $;\n    };\n});\n","jquery/patches/jquery-ui.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'jquery-ui-modules/widget'\n    // 'jquery-ui-modules/dialog' - do not enable this dependency because this is already a mixin for the dialog ui component\n], function ($) {\n    'use strict';\n\n    /**\n     * Patch for CVE-2016-7103 (XSS vulnerability).\n     * Can safely remove only when jQuery UI is upgraded to >= 1.12.x.\n     * https://www.cvedetails.com/cve/CVE-2016-7103/\n     */\n    function dialogPatch() {\n        $.widget('ui.dialog', $.ui.dialog, {\n            /** @inheritdoc */\n            _createTitlebar: function () {\n                this.options.closeText = $('<a>').text('' + this.options.closeText).html();\n\n                this._superApply();\n            },\n\n            /** @inheritdoc */\n            _setOption: function (key, value) {\n                if (key === 'closeText') {\n                    value = $('<a>').text('' + value).html();\n                }\n\n                this._super(key, value);\n            }\n        });\n    }\n\n    return function () {\n        var majorVersion = $.ui.version.split('.')[0],\n            minorVersion = $.ui.version.split('.')[1];\n\n        if (majorVersion === 1 && minorVersion >= 12 || majorVersion >= 2) {\n            console.warn('jQuery patch for CVE-2016-7103 is no longer necessary, and should be removed');\n        }\n\n        dialogPatch();\n    };\n});\n","fotorama/fotorama.js":"/*!\n * Fotorama 4.6.4 | http://fotorama.io/license/\n */\nfotoramaVersion = '4.6.4';\n(function (window, document, location, $, undefined) {\n    \"use strict\";\n    var _fotoramaClass = 'fotorama',\n        _fullscreenClass = 'fotorama__fullscreen',\n\n        wrapClass = _fotoramaClass + '__wrap',\n        wrapCss2Class = wrapClass + '--css2',\n        wrapCss3Class = wrapClass + '--css3',\n        wrapVideoClass = wrapClass + '--video',\n        wrapFadeClass = wrapClass + '--fade',\n        wrapSlideClass = wrapClass + '--slide',\n        wrapNoControlsClass = wrapClass + '--no-controls',\n        wrapNoShadowsClass = wrapClass + '--no-shadows',\n        wrapPanYClass = wrapClass + '--pan-y',\n        wrapRtlClass = wrapClass + '--rtl',\n        wrapOnlyActiveClass = wrapClass + '--only-active',\n        wrapNoCaptionsClass = wrapClass + '--no-captions',\n        wrapToggleArrowsClass = wrapClass + '--toggle-arrows',\n\n        stageClass = _fotoramaClass + '__stage',\n        stageFrameClass = stageClass + '__frame',\n        stageFrameVideoClass = stageFrameClass + '--video',\n        stageShaftClass = stageClass + '__shaft',\n\n        grabClass = _fotoramaClass + '__grab',\n        pointerClass = _fotoramaClass + '__pointer',\n\n        arrClass = _fotoramaClass + '__arr',\n        arrDisabledClass = arrClass + '--disabled',\n        arrPrevClass = arrClass + '--prev',\n        arrNextClass = arrClass + '--next',\n\n        navClass = _fotoramaClass + '__nav',\n        navWrapClass = navClass + '-wrap',\n        navShaftClass = navClass + '__shaft',\n        navShaftVerticalClass = navWrapClass + '--vertical',\n        navShaftListClass = navWrapClass + '--list',\n        navShafthorizontalClass = navWrapClass + '--horizontal',\n        navDotsClass = navClass + '--dots',\n        navThumbsClass = navClass + '--thumbs',\n        navFrameClass = navClass + '__frame',\n\n        fadeClass = _fotoramaClass + '__fade',\n        fadeFrontClass = fadeClass + '-front',\n        fadeRearClass = fadeClass + '-rear',\n\n        shadowClass = _fotoramaClass + '__shadow',\n        shadowsClass = shadowClass + 's',\n        shadowsLeftClass = shadowsClass + '--left',\n        shadowsRightClass = shadowsClass + '--right',\n        shadowsTopClass = shadowsClass + '--top',\n        shadowsBottomClass = shadowsClass + '--bottom',\n\n        activeClass = _fotoramaClass + '__active',\n        selectClass = _fotoramaClass + '__select',\n\n        hiddenClass = _fotoramaClass + '--hidden',\n\n        fullscreenClass = _fotoramaClass + '--fullscreen',\n        fullscreenIconClass = _fotoramaClass + '__fullscreen-icon',\n\n        errorClass = _fotoramaClass + '__error',\n        loadingClass = _fotoramaClass + '__loading',\n        loadedClass = _fotoramaClass + '__loaded',\n        loadedFullClass = loadedClass + '--full',\n        loadedImgClass = loadedClass + '--img',\n\n        grabbingClass = _fotoramaClass + '__grabbing',\n\n        imgClass = _fotoramaClass + '__img',\n        imgFullClass = imgClass + '--full',\n\n        thumbClass = _fotoramaClass + '__thumb',\n        thumbArrLeft = thumbClass + '__arr--left',\n        thumbArrRight = thumbClass + '__arr--right',\n        thumbBorderClass = thumbClass + '-border',\n\n        htmlClass = _fotoramaClass + '__html',\n\n        videoContainerClass = _fotoramaClass + '-video-container',\n        videoClass = _fotoramaClass + '__video',\n        videoPlayClass = videoClass + '-play',\n        videoCloseClass = videoClass + '-close',\n\n\n        horizontalImageClass = _fotoramaClass + '_horizontal_ratio',\n        verticalImageClass = _fotoramaClass + '_vertical_ratio',\n        fotoramaSpinnerClass = _fotoramaClass + '__spinner',\n        spinnerShowClass = fotoramaSpinnerClass + '--show';\n    var JQUERY_VERSION = $ && $.fn.jquery.split('.');\n\n    if (!JQUERY_VERSION\n        || JQUERY_VERSION[0] < 1\n        || (JQUERY_VERSION[0] == 1 && JQUERY_VERSION[1] < 8)) {\n        throw 'Fotorama requires jQuery 1.8 or later and will not run without it.';\n    }\n\n    var _ = {};\n    /* Modernizr 2.8.3 (Custom Build) | MIT & BSD\n     * Build: http://modernizr.com/download/#-csstransforms3d-csstransitions-touch-prefixed\n     */\n\n    var Modernizr = (function (window, document, undefined) {\n        var version = '2.8.3',\n            Modernizr = {},\n\n\n            docElement = document.documentElement,\n\n            mod = 'modernizr',\n            modElem = document.createElement(mod),\n            mStyle = modElem.style,\n            inputElem,\n\n\n            toString = {}.toString,\n\n            prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n\n\n            omPrefixes = 'Webkit Moz O ms',\n\n            cssomPrefixes = omPrefixes.split(' '),\n\n            domPrefixes = omPrefixes.toLowerCase().split(' '),\n\n\n            tests = {},\n            inputs = {},\n            attrs = {},\n\n            classes = [],\n\n            slice = classes.slice,\n\n            featureName,\n\n\n            injectElementWithStyles = function (rule, callback, nodes, testnames) {\n\n                var style, ret, node, docOverflow,\n                    div = document.createElement('div'),\n                    body = document.body,\n                    fakeBody = body || document.createElement('body');\n\n                if (parseInt(nodes, 10)) {\n                    while (nodes--) {\n                        node = document.createElement('div');\n                        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n                        div.appendChild(node);\n                    }\n                }\n\n                style = ['&#173;', '<style id=\"s', mod, '\">', rule, '</style>'].join('');\n                div.id = mod;\n                (body ? div : fakeBody).innerHTML += style;\n                fakeBody.appendChild(div);\n                if (!body) {\n                    fakeBody.style.background = '';\n                    fakeBody.style.overflow = 'hidden';\n                    docOverflow = docElement.style.overflow;\n                    docElement.style.overflow = 'hidden';\n                    docElement.appendChild(fakeBody);\n                }\n\n                ret = callback(div, rule);\n                if (!body) {\n                    fakeBody.parentNode.removeChild(fakeBody);\n                    docElement.style.overflow = docOverflow;\n                } else {\n                    div.parentNode.removeChild(div);\n                }\n\n                return !!ret;\n\n            },\n            _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\n        if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n            hasOwnProp = function (object, property) {\n                return _hasOwnProperty.call(object, property);\n            };\n        }\n        else {\n            hasOwnProp = function (object, property) {\n                return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n            };\n        }\n\n\n        if (!Function.prototype.bind) {\n            Function.prototype.bind = function bind(that) {\n\n                var target = this;\n\n                if (typeof target != \"function\") {\n                    throw new TypeError();\n                }\n\n                var args = slice.call(arguments, 1),\n                    bound = function () {\n\n                        if (this instanceof bound) {\n\n                            var F = function () {\n                            };\n                            F.prototype = target.prototype;\n                            var self = new F();\n\n                            var result = target.apply(\n                                self,\n                                args.concat(slice.call(arguments))\n                            );\n                            if (Object(result) === result) {\n                                return result;\n                            }\n                            return self;\n\n                        } else {\n\n                            return target.apply(\n                                that,\n                                args.concat(slice.call(arguments))\n                            );\n\n                        }\n\n                    };\n\n                return bound;\n            };\n        }\n\n        function setCss(str) {\n            mStyle.cssText = str;\n        }\n\n        function setCssAll(str1, str2) {\n            return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n        }\n\n        function is(obj, type) {\n            return typeof obj === type;\n        }\n\n        function contains(str, substr) {\n            return !!~('' + str).indexOf(substr);\n        }\n\n        function testProps(props, prefixed) {\n            for (var i in props) {\n                var prop = props[i];\n                if (!contains(prop, \"-\") && mStyle[prop] !== undefined) {\n                    return prefixed == 'pfx' ? prop : true;\n                }\n            }\n            return false;\n        }\n\n        function testDOMProps(props, obj, elem) {\n            for (var i in props) {\n                var item = obj[props[i]];\n                if (item !== undefined) {\n\n                    if (elem === false) return props[i];\n\n                    if (is(item, 'function')) {\n                        return item.bind(elem || obj);\n                    }\n\n                    return item;\n                }\n            }\n            return false;\n        }\n\n        function testPropsAll(prop, prefixed, elem) {\n\n            var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\n                props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n            if (is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n                return testProps(props, prefixed);\n\n            } else {\n                props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n                return testDOMProps(props, prefixed, elem);\n            }\n        }\n\n        tests['touch'] = function () {\n            var bool;\n\n            if (('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n                bool = true;\n            } else {\n                injectElementWithStyles(['@media (', prefixes.join('touch-enabled),('), mod, ')', '{#modernizr{top:9px;position:absolute}}'].join(''), function (node) {\n                    bool = node.offsetTop === 9;\n                });\n            }\n\n            return bool;\n        };\n        tests['csstransforms3d'] = function () {\n\n            var ret = !!testPropsAll('perspective');\n\n            if (ret && 'webkitPerspective' in docElement.style) {\n\n                injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function (node, rule) {\n                    ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n                });\n            }\n            return ret;\n        };\n\n\n        tests['csstransitions'] = function () {\n            return testPropsAll('transition');\n        };\n\n\n        for (var feature in tests) {\n            if (hasOwnProp(tests, feature)) {\n                featureName = feature.toLowerCase();\n                Modernizr[featureName] = tests[feature]();\n\n                classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n            }\n        }\n\n\n        Modernizr.addTest = function (feature, test) {\n            if (typeof feature == 'object') {\n                for (var key in feature) {\n                    if (hasOwnProp(feature, key)) {\n                        Modernizr.addTest(key, feature[key]);\n                    }\n                }\n            } else {\n\n                feature = feature.toLowerCase();\n\n                if (Modernizr[feature] !== undefined) {\n                    return Modernizr;\n                }\n\n                test = typeof test == 'function' ? test() : test;\n\n                if (typeof enableClasses !== \"undefined\" && enableClasses) {\n                    docElement.className += ' ' + (test ? '' : 'no-') + feature;\n                }\n                Modernizr[feature] = test;\n\n            }\n\n            return Modernizr;\n        };\n\n\n        setCss('');\n        modElem = inputElem = null;\n\n\n        Modernizr._version = version;\n\n        Modernizr._prefixes = prefixes;\n        Modernizr._domPrefixes = domPrefixes;\n        Modernizr._cssomPrefixes = cssomPrefixes;\n\n\n        Modernizr.testProp = function (prop) {\n            return testProps([prop]);\n        };\n\n        Modernizr.testAllProps = testPropsAll;\n        Modernizr.testStyles = injectElementWithStyles;\n        Modernizr.prefixed = function (prop, obj, elem) {\n            if (!obj) {\n                return testPropsAll(prop, 'pfx');\n            } else {\n                return testPropsAll(prop, obj, elem);\n            }\n        };\n        return Modernizr;\n    })(window, document);\n\n    var fullScreenApi = {\n            ok: false,\n            is: function () {\n                return false;\n            },\n            request: function () {\n            },\n            cancel: function () {\n            },\n            event: '',\n            prefix: ''\n        },\n        browserPrefixes = 'webkit moz o ms khtml'.split(' ');\n\n// check for native support\n    if (typeof document.cancelFullScreen != 'undefined') {\n        fullScreenApi.ok = true;\n    } else {\n        // check for fullscreen support by vendor prefix\n        for (var i = 0, il = browserPrefixes.length; i < il; i++) {\n            fullScreenApi.prefix = browserPrefixes[i];\n            if (typeof document[fullScreenApi.prefix + 'CancelFullScreen'] != 'undefined') {\n                fullScreenApi.ok = true;\n                break;\n            }\n        }\n    }\n\n// update methods to do something useful\n    if (fullScreenApi.ok) {\n        fullScreenApi.event = fullScreenApi.prefix + 'fullscreenchange';\n        fullScreenApi.is = function () {\n            switch (this.prefix) {\n                case '':\n                    return document.fullScreen;\n                case 'webkit':\n                    return document.webkitIsFullScreen;\n                default:\n                    return document[this.prefix + 'FullScreen'];\n            }\n        };\n        fullScreenApi.request = function (el) {\n            return (this.prefix === '') ? el.requestFullScreen() : el[this.prefix + 'RequestFullScreen']();\n        };\n        fullScreenApi.cancel = function (el) {\n            if (!this.is()) {\n                return false;\n            }\n            return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + 'CancelFullScreen']();\n        };\n    }\n    /* Bez v1.0.10-g5ae0136\n     * http://github.com/rdallasgray/bez\n     *\n     * A plugin to convert CSS3 cubic-bezier co-ordinates to jQuery-compatible easing functions\n     *\n     * With thanks to Nikolay Nemshilov for clarification on the cubic-bezier maths\n     * See http://st-on-it.blogspot.com/2011/05/calculating-cubic-bezier-function.html\n     *\n     * Copyright 2011 Robert Dallas Gray. All rights reserved.\n     * Provided under the FreeBSD license: https://github.com/rdallasgray/bez/blob/master/LICENSE.txt\n     */\n    function bez(coOrdArray) {\n        var encodedFuncName = \"bez_\" + $.makeArray(arguments).join(\"_\").replace(\".\", \"p\");\n        if (typeof $['easing'][encodedFuncName] !== \"function\") {\n            var polyBez = function (p1, p2) {\n                var A = [null, null],\n                    B = [null, null],\n                    C = [null, null],\n                    bezCoOrd = function (t, ax) {\n                        C[ax] = 3 * p1[ax];\n                        B[ax] = 3 * (p2[ax] - p1[ax]) - C[ax];\n                        A[ax] = 1 - C[ax] - B[ax];\n                        return t * (C[ax] + t * (B[ax] + t * A[ax]));\n                    },\n                    xDeriv = function (t) {\n                        return C[0] + t * (2 * B[0] + 3 * A[0] * t);\n                    },\n                    xForT = function (t) {\n                        var x = t, i = 0, z;\n                        while (++i < 14) {\n                            z = bezCoOrd(x, 0) - t;\n                            if (Math.abs(z) < 1e-3) break;\n                            x -= z / xDeriv(x);\n                        }\n                        return x;\n                    };\n                return function (t) {\n                    return bezCoOrd(xForT(t), 1);\n                }\n            };\n            $['easing'][encodedFuncName] = function (x, t, b, c, d) {\n                return c * polyBez([coOrdArray[0], coOrdArray[1]], [coOrdArray[2], coOrdArray[3]])(t / d) + b;\n            }\n        }\n        return encodedFuncName;\n    }\n\n    var $WINDOW = $(window),\n        $DOCUMENT = $(document),\n        $HTML,\n        $BODY,\n\n        QUIRKS_FORCE = location.hash.replace('#', '') === 'quirks',\n        TRANSFORMS3D = Modernizr.csstransforms3d,\n        CSS3 = TRANSFORMS3D && !QUIRKS_FORCE,\n        COMPAT = TRANSFORMS3D || document.compatMode === 'CSS1Compat',\n        FULLSCREEN = fullScreenApi.ok,\n\n        MOBILE = navigator.userAgent.match(/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i),\n        SLOW = !CSS3 || MOBILE,\n\n        MS_POINTER = navigator.msPointerEnabled,\n\n        WHEEL = \"onwheel\" in document.createElement(\"div\") ? \"wheel\" : document.onmousewheel !== undefined ? \"mousewheel\" : \"DOMMouseScroll\",\n\n        TOUCH_TIMEOUT = 250,\n        TRANSITION_DURATION = 300,\n\n        SCROLL_LOCK_TIMEOUT = 1400,\n\n        AUTOPLAY_INTERVAL = 5000,\n        MARGIN = 2,\n        THUMB_SIZE = 64,\n\n        WIDTH = 500,\n        HEIGHT = 333,\n\n        STAGE_FRAME_KEY = '$stageFrame',\n        NAV_DOT_FRAME_KEY = '$navDotFrame',\n        NAV_THUMB_FRAME_KEY = '$navThumbFrame',\n\n        AUTO = 'auto',\n\n        BEZIER = bez([.1, 0, .25, 1]),\n\n        MAX_WIDTH = 1200,\n\n        /**\n         * Number of thumbnails in slide. Calculated only on setOptions and resize.\n         * @type {number}\n         */\n        thumbsPerSlide = 1,\n\n        OPTIONS = {\n\n            /**\n             * Set width for gallery.\n             * Default value - width of first image\n             * Number - set value in px\n             * String - set value in quotes\n             *\n             */\n            width: null,\n\n            /**\n             * Set min-width for gallery\n             *\n             */\n            minwidth: null,\n\n            /**\n             * Set max-width for gallery\n             *\n             */\n            maxwidth: '100%',\n\n            /**\n             * Set height for gallery\n             * Default value - height of first image\n             * Number - set value in px\n             * String - set value in quotes\n             *\n             */\n            height: null,\n\n            /**\n             * Set min-height for gallery\n             *\n             */\n            minheight: null,\n\n            /**\n             * Set max-height for gallery\n             *\n             */\n            maxheight: null,\n\n            /**\n             * Set proportion ratio for gallery depends of image\n             *\n             */\n            ratio: null, // '16/9' || 500/333 || 1.5\n\n            margin: MARGIN,\n\n            nav: 'dots', // 'thumbs' || false\n            navposition: 'bottom', // 'top'\n            navwidth: null,\n            thumbwidth: THUMB_SIZE,\n            thumbheight: THUMB_SIZE,\n            thumbmargin: MARGIN,\n            thumbborderwidth: MARGIN,\n\n            allowfullscreen: false, // true || 'native'\n\n            transition: 'slide', // 'crossfade' || 'dissolve'\n            clicktransition: null,\n            transitionduration: TRANSITION_DURATION,\n\n            captions: true,\n\n            startindex: 0,\n\n            loop: false,\n\n            autoplay: false,\n            stopautoplayontouch: true,\n\n            keyboard: false,\n\n            arrows: true,\n            click: true,\n            swipe: false,\n            trackpad: false,\n\n            shuffle: false,\n\n            direction: 'ltr', // 'rtl'\n\n            shadows: true,\n\n            showcaption: true,\n\n            /**\n             * Set type of thumbnail navigation\n             */\n            navdir: 'horizontal',\n\n            /**\n             * Set configuration to show or hide arrows in thumb navigation\n             */\n            navarrows: true,\n\n            /**\n             * Set type of navigation. Can be thumbs or slides\n             */\n            navtype: 'thumbs'\n\n        },\n\n        KEYBOARD_OPTIONS = {\n            left: true,\n            right: true,\n            down: true,\n            up: true,\n            space: false,\n            home: false,\n            end: false\n        };\n\n    function noop() {\n    }\n\n    function minMaxLimit(value, min, max) {\n        return Math.max(isNaN(min) ? -Infinity : min, Math.min(isNaN(max) ? Infinity : max, value));\n    }\n\n    function readTransform(css, dir) {\n        return css.match(/ma/) && css.match(/-?\\d+(?!d)/g)[css.match(/3d/) ?\n                (dir === 'vertical' ? 13 : 12) : (dir === 'vertical' ? 5 : 4)\n                ]\n    }\n\n    function readPosition($el, dir) {\n        if (CSS3) {\n            return +readTransform($el.css('transform'), dir);\n        } else {\n            return +$el.css(dir === 'vertical' ? 'top' : 'left').replace('px', '');\n        }\n    }\n\n    function getTranslate(pos, direction) {\n        var obj = {};\n\n        if (CSS3) {\n\n            switch (direction) {\n                case 'vertical':\n                    obj.transform = 'translate3d(0, ' + (pos) + 'px,0)';\n                    break;\n                case 'list':\n                    break;\n                default :\n                    obj.transform = 'translate3d(' + (pos) + 'px,0,0)';\n                    break;\n            }\n        } else {\n            direction === 'vertical' ?\n                obj.top = pos :\n                obj.left = pos;\n        }\n        return obj;\n    }\n\n    function getDuration(time) {\n        return {'transition-duration': time + 'ms'};\n    }\n\n    function unlessNaN(value, alternative) {\n        return isNaN(value) ? alternative : value;\n    }\n\n    function numberFromMeasure(value, measure) {\n        return unlessNaN(+String(value).replace(measure || 'px', ''));\n    }\n\n    function numberFromPercent(value) {\n        return /%$/.test(value) ? numberFromMeasure(value, '%') : undefined;\n    }\n\n    function numberFromWhatever(value, whole) {\n        return unlessNaN(numberFromPercent(value) / 100 * whole, numberFromMeasure(value));\n    }\n\n    function measureIsValid(value) {\n        return (!isNaN(numberFromMeasure(value)) || !isNaN(numberFromMeasure(value, '%'))) && value;\n    }\n\n    function getPosByIndex(index, side, margin, baseIndex) {\n\n        return (index - (baseIndex || 0)) * (side + (margin || 0));\n    }\n\n    function getIndexByPos(pos, side, margin, baseIndex) {\n        return -Math.round(pos / (side + (margin || 0)) - (baseIndex || 0));\n    }\n\n    function bindTransitionEnd($el) {\n        var elData = $el.data();\n\n        if (elData.tEnd) return;\n\n        var el = $el[0],\n            transitionEndEvent = {\n                WebkitTransition: 'webkitTransitionEnd',\n                MozTransition: 'transitionend',\n                OTransition: 'oTransitionEnd otransitionend',\n                msTransition: 'MSTransitionEnd',\n                transition: 'transitionend'\n            };\n        addEvent(el, transitionEndEvent[Modernizr.prefixed('transition')], function (e) {\n            elData.tProp && e.propertyName.match(elData.tProp) && elData.onEndFn();\n        });\n        elData.tEnd = true;\n    }\n\n    function afterTransition($el, property, fn, time) {\n        var ok,\n            elData = $el.data();\n\n        if (elData) {\n            elData.onEndFn = function () {\n                if (ok) return;\n                ok = true;\n                clearTimeout(elData.tT);\n                fn();\n            };\n            elData.tProp = property;\n\n            // Passive call, just in case of fail of native transition-end event\n            clearTimeout(elData.tT);\n            elData.tT = setTimeout(function () {\n                elData.onEndFn();\n            }, time * 1.5);\n\n            bindTransitionEnd($el);\n        }\n    }\n\n\n    function stop($el, pos/*, _001*/) {\n        var dir = $el.navdir || 'horizontal';\n        if ($el.length) {\n            var elData = $el.data();\n            if (CSS3) {\n                $el.css(getDuration(0));\n                elData.onEndFn = noop;\n                clearTimeout(elData.tT);\n            } else {\n                $el.stop();\n            }\n            var lockedPos = getNumber(pos, function () {\n                return readPosition($el, dir);\n            });\n\n            $el.css(getTranslate(lockedPos, dir/*, _001*/));//.width(); // `.width()` for reflow\n            return lockedPos;\n        }\n    }\n\n    function getNumber() {\n        var number;\n        for (var _i = 0, _l = arguments.length; _i < _l; _i++) {\n            number = _i ? arguments[_i]() : arguments[_i];\n            if (typeof number === 'number') {\n                break;\n            }\n        }\n\n        return number;\n    }\n\n    function edgeResistance(pos, edge) {\n        return Math.round(pos + ((edge - pos) / 1.5));\n    }\n\n    function getProtocol() {\n        getProtocol.p = getProtocol.p || (location.protocol === 'https:' ? 'https://' : 'http://');\n        return getProtocol.p;\n    }\n\n    function parseHref(href) {\n        var a = document.createElement('a');\n        a.href = href;\n        return a;\n    }\n\n    function findVideoId(href, forceVideo) {\n        if (typeof href !== 'string') return href;\n        href = parseHref(href);\n\n        var id,\n            type;\n\n        if (href.host.match(/youtube\\.com/) && href.search) {\n            //.log();\n            id = href.search.split('v=')[1];\n            if (id) {\n                var ampersandPosition = id.indexOf('&');\n                if (ampersandPosition !== -1) {\n                    id = id.substring(0, ampersandPosition);\n                }\n                type = 'youtube';\n            }\n        } else if (href.host.match(/youtube\\.com|youtu\\.be|youtube-nocookie.com/)) {\n            id = href.pathname.replace(/^\\/(embed\\/|v\\/)?/, '').replace(/\\/.*/, '');\n            type = 'youtube';\n        } else if (href.host.match(/vimeo\\.com/)) {\n            type = 'vimeo';\n            id = href.pathname.replace(/^\\/(video\\/)?/, '').replace(/\\/.*/, '');\n        }\n\n        if ((!id || !type) && forceVideo) {\n            id = href.href;\n            type = 'custom';\n        }\n\n        return id ? {id: id, type: type, s: href.search.replace(/^\\?/, ''), p: getProtocol()} : false;\n    }\n\n    function getVideoThumbs(dataFrame, data, fotorama) {\n        var img, thumb, video = dataFrame.video;\n        if (video.type === 'youtube') {\n            thumb = getProtocol() + 'img.youtube.com/vi/' + video.id + '/default.jpg';\n            img = thumb.replace(/\\/default.jpg$/, '/hqdefault.jpg');\n            dataFrame.thumbsReady = true;\n        } else if (video.type === 'vimeo') {\n            $.ajax({\n                url: getProtocol() + 'vimeo.com/api/v2/video/' + video.id + '.json',\n                dataType: 'jsonp',\n                success: function (json) {\n                    dataFrame.thumbsReady = true;\n                    updateData(data, {\n                        img: json[0].thumbnail_large,\n                        thumb: json[0].thumbnail_small\n                    }, dataFrame.i, fotorama);\n                }\n            });\n        } else {\n            dataFrame.thumbsReady = true;\n        }\n\n        return {\n            img: img,\n            thumb: thumb\n        }\n    }\n\n    function updateData(data, _dataFrame, i, fotorama) {\n        for (var _i = 0, _l = data.length; _i < _l; _i++) {\n            var dataFrame = data[_i];\n\n            if (dataFrame.i === i && dataFrame.thumbsReady) {\n                var clear = {videoReady: true};\n                clear[STAGE_FRAME_KEY] = clear[NAV_THUMB_FRAME_KEY] = clear[NAV_DOT_FRAME_KEY] = false;\n\n                fotorama.splice(_i, 1, $.extend(\n                    {},\n                    dataFrame,\n                    clear,\n                    _dataFrame\n                ));\n\n                break;\n            }\n        }\n    }\n\n    function getDataFromHtml($el) {\n        var data = [];\n\n        function getDataFromImg($img, imgData, checkVideo) {\n            var $child = $img.children('img').eq(0),\n                _imgHref = $img.attr('href'),\n                _imgSrc = $img.attr('src'),\n                _thumbSrc = $child.attr('src'),\n                _video = imgData.video,\n                video = checkVideo ? findVideoId(_imgHref, _video === true) : false;\n\n            if (video) {\n                _imgHref = false;\n            } else {\n                video = _video;\n            }\n\n            getDimensions($img, $child, $.extend(imgData, {\n                video: video,\n                img: imgData.img || _imgHref || _imgSrc || _thumbSrc,\n                thumb: imgData.thumb || _thumbSrc || _imgSrc || _imgHref\n            }));\n        }\n\n        function getDimensions($img, $child, imgData) {\n            var separateThumbFLAG = imgData.thumb && imgData.img !== imgData.thumb,\n                width = numberFromMeasure(imgData.width || $img.attr('width')),\n                height = numberFromMeasure(imgData.height || $img.attr('height'));\n\n            $.extend(imgData, {\n                width: width,\n                height: height,\n                thumbratio: getRatio(imgData.thumbratio || (numberFromMeasure(imgData.thumbwidth || ($child && $child.attr('width')) || separateThumbFLAG || width) / numberFromMeasure(imgData.thumbheight || ($child && $child.attr('height')) || separateThumbFLAG || height)))\n            });\n        }\n\n        $el.children().each(function () {\n            var $this = $(this),\n                dataFrame = optionsToLowerCase($.extend($this.data(), {id: $this.attr('id')}));\n            if ($this.is('a, img')) {\n                getDataFromImg($this, dataFrame, true);\n            } else if (!$this.is(':empty')) {\n                getDimensions($this, null, $.extend(dataFrame, {\n                    html: this,\n                    _html: $this.html() // Because of IE\n                }));\n            } else return;\n\n            data.push(dataFrame);\n        });\n\n        return data;\n    }\n\n    function isHidden(el) {\n        return el.offsetWidth === 0 && el.offsetHeight === 0;\n    }\n\n    function isDetached(el) {\n        return !$.contains(document.documentElement, el);\n    }\n\n    function waitFor(test, fn, timeout, i) {\n        if (!waitFor.i) {\n            waitFor.i = 1;\n            waitFor.ii = [true];\n        }\n\n        i = i || waitFor.i;\n\n        if (typeof waitFor.ii[i] === 'undefined') {\n            waitFor.ii[i] = true;\n        }\n\n        if (test()) {\n            fn();\n        } else {\n            waitFor.ii[i] && setTimeout(function () {\n                waitFor.ii[i] && waitFor(test, fn, timeout, i);\n            }, timeout || 100);\n        }\n\n        return waitFor.i++;\n    }\n\n    waitFor.stop = function (i) {\n        waitFor.ii[i] = false;\n    };\n\n    function fit($el, measuresToFit) {\n        var elData = $el.data(),\n            measures = elData.measures;\n\n        if (measures && (!elData.l ||\n            elData.l.W !== measures.width ||\n            elData.l.H !== measures.height ||\n            elData.l.r !== measures.ratio ||\n            elData.l.w !== measuresToFit.w ||\n            elData.l.h !== measuresToFit.h)) {\n\n            var height = minMaxLimit(measuresToFit.h, 0, measures.height),\n                width = height * measures.ratio;\n\n            UTIL.setRatio($el, width, height);\n\n            elData.l = {\n                W: measures.width,\n                H: measures.height,\n                r: measures.ratio,\n                w: measuresToFit.w,\n                h: measuresToFit.h\n            };\n        }\n\n        return true;\n    }\n\n    function setStyle($el, style) {\n        var el = $el[0];\n        if (el.styleSheet) {\n            el.styleSheet.cssText = style;\n        } else {\n            $el.html(style);\n        }\n    }\n\n    function findShadowEdge(pos, min, max, dir) {\n        return min === max ? false :\n            dir === 'vertical' ?\n                (pos <= min ? 'top' : pos >= max ? 'bottom' : 'top bottom') :\n                (pos <= min ? 'left' : pos >= max ? 'right' : 'left right');\n    }\n\n    function smartClick($el, fn, _options) {\n        _options = _options || {};\n\n        $el.each(function () {\n            var $this = $(this),\n                thisData = $this.data(),\n                startEvent;\n\n            if (thisData.clickOn) return;\n\n            thisData.clickOn = true;\n\n            $.extend(touch($this, {\n                onStart: function (e) {\n                    startEvent = e;\n                    (_options.onStart || noop).call(this, e);\n                },\n                onMove: _options.onMove || noop,\n                onTouchEnd: _options.onTouchEnd || noop,\n                onEnd: function (result) {\n                    if (result.moved) return;\n                    fn.call(this, startEvent);\n                }\n            }), {noMove: true});\n        });\n    }\n\n    function div(classes, child) {\n        return '<div class=\"' + classes + '\">' + (child || '') + '</div>';\n    }\n\n\n    /**\n     * Function transforming into valid classname\n     * @param className - name of the class\n     * @returns {string} - dom format of class name\n     */\n    function cls(className) {\n        return \".\" + className;\n    }\n\n    /**\n     *\n     * @param {json-object} videoItem Parsed object from data.video item or href from link a in input dates\n     * @returns {string} DOM view of video iframe\n     */\n    function createVideoFrame(videoItem) {\n        var frame = '<iframe src=\"' + videoItem.p + videoItem.type + '.com/embed/' + videoItem.id + '\" frameborder=\"0\" allowfullscreen></iframe>';\n        return frame;\n    }\n\n// Fisher\u2013Yates Shuffle\n// http://bost.ocks.org/mike/shuffle/\n    function shuffle(array) {\n        // While there remain elements to shuffle\n        var l = array.length;\n        while (l) {\n            // Pick a remaining element\n            var i = Math.floor(Math.random() * l--);\n\n            // And swap it with the current element\n            var t = array[l];\n            array[l] = array[i];\n            array[i] = t;\n        }\n\n        return array;\n    }\n\n    function clone(array) {\n        return Object.prototype.toString.call(array) == '[object Array]'\n            && $.map(array, function (frame) {\n                return $.extend({}, frame);\n            });\n    }\n\n    function lockScroll($el, left, top) {\n        $el\n            .scrollLeft(left || 0)\n            .scrollTop(top || 0);\n    }\n\n    function optionsToLowerCase(options) {\n        if (options) {\n            var opts = {};\n            $.each(options, function (key, value) {\n                opts[key.toLowerCase()] = value;\n            });\n\n            return opts;\n        }\n    }\n\n    function getRatio(_ratio) {\n        if (!_ratio) return;\n        var ratio = +_ratio;\n        if (!isNaN(ratio)) {\n            return ratio;\n        } else {\n            ratio = _ratio.split('/');\n            return +ratio[0] / +ratio[1] || undefined;\n        }\n    }\n\n    function addEvent(el, e, fn, bool) {\n        if (!e) return;\n        el.addEventListener ? el.addEventListener(e, fn, !!bool) : el.attachEvent('on' + e, fn);\n    }\n\n    /**\n     *\n     * @param position guess position for navShaft\n     * @param restriction object contains min and max values for position\n     * @returns {*} filtered value of position\n     */\n    function validateRestrictions(position, restriction) {\n        if (position > restriction.max) {\n            position = restriction.max;\n        } else {\n            if (position < restriction.min) {\n                position = restriction.min;\n            }\n        }\n        return position;\n    }\n\n    function validateSlidePos(opt, navShaftTouchTail, guessIndex, offsetNav, $guessNavFrame, $navWrap, dir) {\n        var position,\n            size,\n            wrapSize;\n        if (dir === 'horizontal') {\n            size = opt.thumbwidth;\n            wrapSize = $navWrap.width();\n        } else {\n            size = opt.thumbheight;\n            wrapSize = $navWrap.height();\n        }\n        if ( (size + opt.margin) * (guessIndex + 1) >= (wrapSize - offsetNav) ) {\n            if (dir === 'horizontal') {\n                position = -$guessNavFrame.position().left;\n            } else {\n                position = -$guessNavFrame.position().top;\n            }\n        } else {\n            if ((size + opt.margin) * (guessIndex) <= Math.abs(offsetNav)) {\n                if (dir === 'horizontal') {\n                    position = -$guessNavFrame.position().left + wrapSize - (size + opt.margin);\n                } else {\n                    position = -$guessNavFrame.position().top + wrapSize - (size + opt.margin);\n                }\n            } else {\n                position = offsetNav;\n            }\n        }\n        position = validateRestrictions(position, navShaftTouchTail);\n\n        return position || 0;\n    }\n\n    function elIsDisabled(el) {\n        return !!el.getAttribute('disabled');\n    }\n\n    function disableAttr(FLAG, disable) {\n        if (disable) {\n            return {disabled: FLAG};\n        } else {\n            return {tabindex: FLAG * -1 + '', disabled: FLAG};\n\n        }\n    }\n\n    function addEnterUp(el, fn) {\n        addEvent(el, 'keyup', function (e) {\n            elIsDisabled(el) || e.keyCode == 13 && fn.call(el, e);\n        });\n    }\n\n    function addFocus(el, fn) {\n        addEvent(el, 'focus', el.onfocusin = function (e) {\n            fn.call(el, e);\n        }, true);\n    }\n\n    function stopEvent(e, stopPropagation) {\n        e.preventDefault ? e.preventDefault() : (e.returnValue = false);\n        stopPropagation && e.stopPropagation && e.stopPropagation();\n    }\n\n    function getDirectionSign(forward) {\n        return forward ? '>' : '<';\n    }\n\n    var UTIL = (function () {\n\n        function setRatioClass($el, wh, ht) {\n            var rateImg = wh / ht;\n\n            if (rateImg <= 1) {\n                $el.parent().removeClass(horizontalImageClass);\n                $el.parent().addClass(verticalImageClass);\n            } else {\n                $el.parent().removeClass(verticalImageClass);\n                $el.parent().addClass(horizontalImageClass);\n            }\n        }\n\n        /**\n         * Set specific attribute in thumbnail template\n         * @param $frame DOM item of specific thumbnail\n         * @param value Value which must be setted into specific attribute\n         * @param searchAttr Name of attribute where value must be included\n         */\n        function setThumbAttr($frame, value, searchAttr) {\n            var attr = searchAttr;\n\n            if (!$frame.attr(attr) && $frame.attr(attr) !== undefined) {\n                $frame.attr(attr, value);\n            }\n\n            if ($frame.find(\"[\" + attr + \"]\").length) {\n                $frame.find(\"[\" + attr + \"]\")\n                    .each(function () {\n                        $(this).attr(attr, value);\n                    });\n            }\n        }\n\n        /**\n         * Method describe behavior need to render caption on preview or not\n         * @param frameItem specific item from data\n         * @param isExpected {bool} if items with caption need render them or not\n         * @returns {boolean} if true then caption should be rendered\n         */\n        function isExpectedCaption(frameItem, isExpected, undefined) {\n            var expected = false,\n                frameExpected;\n\n            frameItem.showCaption === undefined || frameItem.showCaption === true ? frameExpected = true : frameExpected = false;\n\n            if (!isExpected) {\n                return false;\n            }\n\n            if (frameItem.caption && frameExpected) {\n                expected = true;\n            }\n\n            return expected;\n        }\n\n        return {\n            setRatio: setRatioClass,\n            setThumbAttr: setThumbAttr,\n            isExpectedCaption: isExpectedCaption\n        };\n\n    }(UTIL || {}, jQuery));\n\n    function slide($el, options) {\n        var elData = $el.data(),\n            elPos = Math.round(options.pos),\n            onEndFn = function () {\n                if (elData && elData.sliding) {\n                    elData.sliding = false;\n                }\n                (options.onEnd || noop)();\n            };\n\n        if (typeof options.overPos !== 'undefined' && options.overPos !== options.pos) {\n            elPos = options.overPos;\n        }\n\n        var translate = $.extend(getTranslate(elPos, options.direction), options.width && {width: options.width}, options.height && {height: options.height});\n        if (elData && elData.sliding) {\n            elData.sliding = true;\n        }\n\n        if (CSS3) {\n            $el.css($.extend(getDuration(options.time), translate));\n\n            if (options.time > 10) {\n                afterTransition($el, 'transform', onEndFn, options.time);\n            } else {\n                onEndFn();\n            }\n        } else {\n            $el.stop().animate(translate, options.time, BEZIER, onEndFn);\n        }\n    }\n\n    function fade($el1, $el2, $frames, options, fadeStack, chain) {\n        var chainedFLAG = typeof chain !== 'undefined';\n        if (!chainedFLAG) {\n            fadeStack.push(arguments);\n            Array.prototype.push.call(arguments, fadeStack.length);\n            if (fadeStack.length > 1) return;\n        }\n\n        $el1 = $el1 || $($el1);\n        $el2 = $el2 || $($el2);\n\n        var _$el1 = $el1[0],\n            _$el2 = $el2[0],\n            crossfadeFLAG = options.method === 'crossfade',\n            onEndFn = function () {\n                if (!onEndFn.done) {\n                    onEndFn.done = true;\n                    var args = (chainedFLAG || fadeStack.shift()) && fadeStack.shift();\n                    args && fade.apply(this, args);\n                    (options.onEnd || noop)(!!args);\n                }\n            },\n            time = options.time / (chain || 1);\n\n        $frames.removeClass(fadeRearClass + ' ' + fadeFrontClass);\n\n        $el1\n            .stop()\n            .addClass(fadeRearClass);\n        $el2\n            .stop()\n            .addClass(fadeFrontClass);\n\n        crossfadeFLAG && _$el2 && $el1.fadeTo(0, 0);\n\n        $el1.fadeTo(crossfadeFLAG ? time : 0, 1, crossfadeFLAG && onEndFn);\n        $el2.fadeTo(time, 0, onEndFn);\n\n        (_$el1 && crossfadeFLAG) || _$el2 || onEndFn();\n    }\n\n    var lastEvent,\n        moveEventType,\n        preventEvent,\n        preventEventTimeout,\n        dragDomEl;\n\n    function extendEvent(e) {\n        var touch = (e.touches || [])[0] || e;\n        e._x = touch.pageX || touch.originalEvent.pageX;\n        e._y = touch.clientY || touch.originalEvent.clientY;\n        e._now = $.now();\n    }\n\n    function touch($el, options) {\n        var el = $el[0],\n            tail = {},\n            touchEnabledFLAG,\n            startEvent,\n            $target,\n            controlTouch,\n            touchFLAG,\n            targetIsSelectFLAG,\n            targetIsLinkFlag,\n            isDisabledSwipe,\n            tolerance,\n            moved;\n\n        function onStart(e) {\n            $target = $(e.target);\n            tail.checked = targetIsSelectFLAG = targetIsLinkFlag = isDisabledSwipe = moved = false;\n\n            if (touchEnabledFLAG\n                || tail.flow\n                || (e.touches && e.touches.length > 1)\n                || e.which > 1\n                || (lastEvent && lastEvent.type !== e.type && preventEvent)\n                || (targetIsSelectFLAG = options.select && $target.is(options.select, el))) return targetIsSelectFLAG;\n\n            touchFLAG = e.type === 'touchstart';\n            targetIsLinkFlag = $target.is('a, a *', el);\n            isDisabledSwipe = $target.hasClass('disableSwipe');\n            controlTouch = tail.control;\n\n            tolerance = (tail.noMove || tail.noSwipe || controlTouch) ? 16 : !tail.snap ? 4 : 0;\n\n            extendEvent(e);\n\n            startEvent = lastEvent = e;\n            moveEventType = e.type.replace(/down|start/, 'move').replace(/Down/, 'Move');\n\n            (options.onStart || noop).call(el, e, {control: controlTouch, $target: $target});\n\n            touchEnabledFLAG = tail.flow = true;\n\n            if (!isDisabledSwipe && (!touchFLAG || tail.go)) stopEvent(e);\n        }\n\n        function onMove(e) {\n            if ((e.touches && e.touches.length > 1)\n                || (MS_POINTER && !e.isPrimary)\n                || moveEventType !== e.type\n                || !touchEnabledFLAG) {\n                touchEnabledFLAG && onEnd();\n                (options.onTouchEnd || noop)();\n                return;\n            }\n\n            isDisabledSwipe = $(e.target).hasClass('disableSwipe');\n\n            if (isDisabledSwipe) {\n                return;\n            }\n\n            extendEvent(e);\n\n            var xDiff = Math.abs(e._x - startEvent._x), // opt _x \u2192 _pageX\n                yDiff = Math.abs(e._y - startEvent._y),\n                xyDiff = xDiff - yDiff,\n                xWin = (tail.go || tail.x || xyDiff >= 0) && !tail.noSwipe,\n                yWin = xyDiff < 0;\n\n            if (touchFLAG && !tail.checked) {\n                if (touchEnabledFLAG = xWin) {\n                    stopEvent(e);\n                }\n            } else {\n                stopEvent(e);\n                if (movedEnough(xDiff,yDiff)) {\n                    (options.onMove || noop).call(el, e, {touch: touchFLAG});\n                }\n            }\n\n            if (!moved && movedEnough(xDiff, yDiff) && Math.sqrt(Math.pow(xDiff, 2) + Math.pow(yDiff, 2)) > tolerance) {\n                moved = true;\n            }\n\n            tail.checked = tail.checked || xWin || yWin;\n        }\n\n        function movedEnough(xDiff, yDiff) {\n            return xDiff > yDiff && xDiff > 1.5;\n        }\n\n        function onEnd(e) {\n            (options.onTouchEnd || noop)();\n\n            var _touchEnabledFLAG = touchEnabledFLAG;\n            tail.control = touchEnabledFLAG = false;\n\n            if (_touchEnabledFLAG) {\n                tail.flow = false;\n            }\n\n            if (!_touchEnabledFLAG || (targetIsLinkFlag && !tail.checked)) return;\n\n            e && stopEvent(e);\n\n            preventEvent = true;\n            clearTimeout(preventEventTimeout);\n            preventEventTimeout = setTimeout(function () {\n                preventEvent = false;\n            }, 1000);\n\n            (options.onEnd || noop).call(el, {\n                moved: moved,\n                $target: $target,\n                control: controlTouch,\n                touch: touchFLAG,\n                startEvent: startEvent,\n                aborted: !e || e.type === 'MSPointerCancel'\n            });\n        }\n\n        function onOtherStart() {\n            if (tail.flow) return;\n            tail.flow = true;\n        }\n\n        function onOtherEnd() {\n            if (!tail.flow) return;\n            tail.flow = false;\n        }\n\n        if (MS_POINTER) {\n            addEvent(el, 'MSPointerDown', onStart);\n            addEvent(document, 'MSPointerMove', onMove);\n            addEvent(document, 'MSPointerCancel', onEnd);\n            addEvent(document, 'MSPointerUp', onEnd);\n        } else {\n            addEvent(el, 'touchstart', onStart);\n            addEvent(el, 'touchmove', onMove);\n            addEvent(el, 'touchend', onEnd);\n\n            addEvent(document, 'touchstart', onOtherStart);\n            addEvent(document, 'touchend', onOtherEnd);\n            addEvent(document, 'touchcancel', onOtherEnd);\n\n            $WINDOW.on('scroll', onOtherEnd);\n\n            $el.on('mousedown', onStart);\n            $DOCUMENT\n                .on('mousemove', onMove)\n                .on('mouseup', onEnd);\n        }\n        if (Modernizr.touch) {\n            dragDomEl = 'a';\n        } else {\n            dragDomEl = 'div';\n        }\n        $el.on('click', dragDomEl, function (e) {\n            tail.checked && stopEvent(e);\n        });\n\n        return tail;\n    }\n\n    function moveOnTouch($el, options) {\n        var el = $el[0],\n            elData = $el.data(),\n            tail = {},\n            startCoo,\n            coo,\n            startElPos,\n            moveElPos,\n            edge,\n            moveTrack,\n            startTime,\n            endTime,\n            min,\n            max,\n            snap,\n            dir,\n            slowFLAG,\n            controlFLAG,\n            moved,\n            tracked;\n\n        function startTracking(e, noStop) {\n            tracked = true;\n            startCoo = coo = (dir === 'vertical') ? e._y : e._x;\n            startTime = e._now;\n\n            moveTrack = [\n                [startTime, startCoo]\n            ];\n\n            startElPos = moveElPos = tail.noMove || noStop ? 0 : stop($el, (options.getPos || noop)()/*, options._001*/);\n\n            (options.onStart || noop).call(el, e);\n        }\n\n        function onStart(e, result) {\n            min = tail.min;\n            max = tail.max;\n            snap = tail.snap,\n                dir = tail.direction || 'horizontal',\n                $el.navdir = dir;\n\n            slowFLAG = e.altKey;\n            tracked = moved = false;\n\n            controlFLAG = result.control;\n\n            if (!controlFLAG && !elData.sliding) {\n                startTracking(e);\n            }\n        }\n\n        function onMove(e, result) {\n            if (!tail.noSwipe) {\n                if (!tracked) {\n                    startTracking(e);\n                }\n                coo = (dir === 'vertical') ? e._y : e._x;\n\n                moveTrack.push([e._now, coo]);\n\n                moveElPos = startElPos - (startCoo - coo);\n\n                edge = findShadowEdge(moveElPos, min, max, dir);\n\n                if (moveElPos <= min) {\n                    moveElPos = edgeResistance(moveElPos, min);\n                } else if (moveElPos >= max) {\n                    moveElPos = edgeResistance(moveElPos, max);\n                }\n\n                if (!tail.noMove) {\n                    $el.css(getTranslate(moveElPos, dir));\n                    if (!moved) {\n                        moved = true;\n                        // only for mouse\n                        result.touch || MS_POINTER || $el.addClass(grabbingClass);\n                    }\n\n                    (options.onMove || noop).call(el, e, {pos: moveElPos, edge: edge});\n                }\n            }\n        }\n\n        function onEnd(result) {\n            if (tail.noSwipe && result.moved) return;\n\n            if (!tracked) {\n                startTracking(result.startEvent, true);\n            }\n\n            result.touch || MS_POINTER || $el.removeClass(grabbingClass);\n\n            endTime = $.now();\n\n            var _backTimeIdeal = endTime - TOUCH_TIMEOUT,\n                _backTime,\n                _timeDiff,\n                _timeDiffLast,\n                backTime = null,\n                backCoo,\n                virtualPos,\n                limitPos,\n                newPos,\n                overPos,\n                time = TRANSITION_DURATION,\n                speed,\n                friction = options.friction;\n\n            for (var _i = moveTrack.length - 1; _i >= 0; _i--) {\n                _backTime = moveTrack[_i][0];\n                _timeDiff = Math.abs(_backTime - _backTimeIdeal);\n                if (backTime === null || _timeDiff < _timeDiffLast) {\n                    backTime = _backTime;\n                    backCoo = moveTrack[_i][1];\n                } else if (backTime === _backTimeIdeal || _timeDiff > _timeDiffLast) {\n                    break;\n                }\n                _timeDiffLast = _timeDiff;\n            }\n\n            newPos = minMaxLimit(moveElPos, min, max);\n\n            var cooDiff = backCoo - coo,\n                forwardFLAG = cooDiff >= 0,\n                timeDiff = endTime - backTime,\n                longTouchFLAG = timeDiff > TOUCH_TIMEOUT,\n                swipeFLAG = !longTouchFLAG && moveElPos !== startElPos && newPos === moveElPos;\n\n            if (snap) {\n                newPos = minMaxLimit(Math[swipeFLAG ? (forwardFLAG ? 'floor' : 'ceil') : 'round'](moveElPos / snap) * snap, min, max);\n                min = max = newPos;\n            }\n\n            if (swipeFLAG && (snap || newPos === moveElPos)) {\n                speed = -(cooDiff / timeDiff);\n                time *= minMaxLimit(Math.abs(speed), options.timeLow, options.timeHigh);\n                virtualPos = Math.round(moveElPos + speed * time / friction);\n\n                if (!snap) {\n                    newPos = virtualPos;\n                }\n\n                if (!forwardFLAG && virtualPos > max || forwardFLAG && virtualPos < min) {\n                    limitPos = forwardFLAG ? min : max;\n                    overPos = virtualPos - limitPos;\n                    if (!snap) {\n                        newPos = limitPos;\n                    }\n                    overPos = minMaxLimit(newPos + overPos * .03, limitPos - 50, limitPos + 50);\n                    time = Math.abs((moveElPos - overPos) / (speed / friction));\n                }\n            }\n\n            time *= slowFLAG ? 10 : 1;\n\n            (options.onEnd || noop).call(el, $.extend(result, {\n                moved: result.moved || longTouchFLAG && snap,\n                pos: moveElPos,\n                newPos: newPos,\n                overPos: overPos,\n                time: time,\n                dir: dir\n            }));\n        }\n\n        tail = $.extend(touch(options.$wrap, $.extend({}, options, {\n            onStart: onStart,\n            onMove: onMove,\n            onEnd: onEnd\n        })), tail);\n\n        return tail;\n    }\n\n    function wheel($el, options) {\n        var el = $el[0],\n            lockFLAG,\n            lastDirection,\n            lastNow,\n            tail = {\n                prevent: {}\n            };\n\n        addEvent(el, WHEEL, function (e) {\n            var yDelta = e.wheelDeltaY || -1 * e.deltaY || 0,\n                xDelta = e.wheelDeltaX || -1 * e.deltaX || 0,\n                xWin = Math.abs(xDelta) && !Math.abs(yDelta),\n                direction = getDirectionSign(xDelta < 0),\n                sameDirection = lastDirection === direction,\n                now = $.now(),\n                tooFast = now - lastNow < TOUCH_TIMEOUT;\n\n            lastDirection = direction;\n            lastNow = now;\n\n            if (!xWin || !tail.ok || tail.prevent[direction] && !lockFLAG) {\n                return;\n            } else {\n                stopEvent(e, true);\n                if (lockFLAG && sameDirection && tooFast) {\n                    return;\n                }\n            }\n\n            if (options.shift) {\n                lockFLAG = true;\n                clearTimeout(tail.t);\n                tail.t = setTimeout(function () {\n                    lockFLAG = false;\n                }, SCROLL_LOCK_TIMEOUT);\n            }\n\n            (options.onEnd || noop)(e, options.shift ? direction : xDelta);\n\n        });\n\n        return tail;\n    }\n\n    jQuery.Fotorama = function ($fotorama, opts) {\n        $HTML = $('html');\n        $BODY = $('body');\n\n        var that = this,\n            stamp = $.now(),\n            stampClass = _fotoramaClass + stamp,\n            fotorama = $fotorama[0],\n            data,\n            dataFrameCount = 1,\n            fotoramaData = $fotorama.data(),\n            size,\n\n            $style = $('<style></style>'),\n\n            $anchor = $(div(hiddenClass)),\n            $wrap = $fotorama.find(cls(wrapClass)),\n            $stage = $wrap.find(cls(stageClass)),\n            stage = $stage[0],\n\n            $stageShaft = $fotorama.find(cls(stageShaftClass)),\n            $stageFrame = $(),\n            $arrPrev = $fotorama.find(cls(arrPrevClass)),\n            $arrNext = $fotorama.find(cls(arrNextClass)),\n            $arrs = $fotorama.find(cls(arrClass)),\n            $navWrap = $fotorama.find(cls(navWrapClass)),\n            $nav = $navWrap.find(cls(navClass)),\n            $navShaft = $nav.find(cls(navShaftClass)),\n            $navFrame,\n            $navDotFrame = $(),\n            $navThumbFrame = $(),\n\n            stageShaftData = $stageShaft.data(),\n            navShaftData = $navShaft.data(),\n\n            $thumbBorder = $fotorama.find(cls(thumbBorderClass)),\n            $thumbArrLeft = $fotorama.find(cls(thumbArrLeft)),\n            $thumbArrRight = $fotorama.find(cls(thumbArrRight)),\n\n            $fullscreenIcon = $fotorama.find(cls(fullscreenIconClass)),\n            fullscreenIcon = $fullscreenIcon[0],\n            $videoPlay = $(div(videoPlayClass)),\n            $videoClose = $fotorama.find(cls(videoCloseClass)),\n            videoClose = $videoClose[0],\n\n            $spinner = $fotorama.find(cls(fotoramaSpinnerClass)),\n\n            $videoPlaying,\n\n            activeIndex = false,\n            activeFrame,\n            activeIndexes,\n            repositionIndex,\n            dirtyIndex,\n            lastActiveIndex,\n            prevIndex,\n            nextIndex,\n            nextAutoplayIndex,\n            startIndex,\n\n            o_loop,\n            o_nav,\n            o_navThumbs,\n            o_navTop,\n            o_allowFullScreen,\n            o_nativeFullScreen,\n            o_fade,\n            o_thumbSide,\n            o_thumbSide2,\n            o_transitionDuration,\n            o_transition,\n            o_shadows,\n            o_rtl,\n            o_keyboard,\n            lastOptions = {},\n\n            measures = {},\n            measuresSetFLAG,\n\n            stageShaftTouchTail = {},\n            stageWheelTail = {},\n            navShaftTouchTail = {},\n            navWheelTail = {},\n\n            scrollTop,\n            scrollLeft,\n\n            showedFLAG,\n            pausedAutoplayFLAG,\n            stoppedAutoplayFLAG,\n\n            toDeactivate = {},\n            toDetach = {},\n\n            measuresStash,\n\n            touchedFLAG,\n\n            hoverFLAG,\n\n            navFrameKey,\n            stageLeft = 0,\n\n            fadeStack = [];\n\n        $wrap[STAGE_FRAME_KEY] = $('<div class=\"' + stageFrameClass + '\"></div>');\n        $wrap[NAV_THUMB_FRAME_KEY] = $($.Fotorama.jst.thumb());\n        $wrap[NAV_DOT_FRAME_KEY] = $($.Fotorama.jst.dots());\n\n        toDeactivate[STAGE_FRAME_KEY] = [];\n        toDeactivate[NAV_THUMB_FRAME_KEY] = [];\n        toDeactivate[NAV_DOT_FRAME_KEY] = [];\n        toDetach[STAGE_FRAME_KEY] = {};\n\n        $wrap.addClass(CSS3 ? wrapCss3Class : wrapCss2Class);\n\n        fotoramaData.fotorama = this;\n\n        /**\n         * Search video items in incoming data and transform object for video layout.\n         *\n         */\n        function checkForVideo() {\n            $.each(data, function (i, dataFrame) {\n                if (!dataFrame.i) {\n                    dataFrame.i = dataFrameCount++;\n                    var video = findVideoId(dataFrame.video, true);\n                    if (video) {\n                        var thumbs = {};\n                        dataFrame.video = video;\n                        if (!dataFrame.img && !dataFrame.thumb) {\n                            thumbs = getVideoThumbs(dataFrame, data, that);\n                        } else {\n                            dataFrame.thumbsReady = true;\n                        }\n                        updateData(data, {img: thumbs.img, thumb: thumbs.thumb}, dataFrame.i, that);\n                    }\n                }\n            });\n        }\n\n        function allowKey(key) {\n            return o_keyboard[key];\n        }\n\n        function setStagePosition() {\n            if ($stage !== undefined) {\n\n                if (opts.navdir == 'vertical') {\n                    var padding = opts.thumbwidth + opts.thumbmargin;\n\n                    $stage.css('left', padding);\n                    $arrNext.css('right', padding);\n                    $fullscreenIcon.css('right', padding);\n                    $wrap.css('width', $wrap.css('width') + padding);\n                    $stageShaft.css('max-width', $wrap.width() - padding);\n                } else {\n                    $stage.css('left', '');\n                    $arrNext.css('right', '');\n                    $fullscreenIcon.css('right', '');\n                    $wrap.css('width', $wrap.css('width') + padding);\n                    $stageShaft.css('max-width', '');\n                }\n            }\n        }\n\n        function bindGlobalEvents(FLAG) {\n            var keydownCommon = 'keydown.' + _fotoramaClass,\n                localStamp = _fotoramaClass + stamp,\n                keydownLocal = 'keydown.' + localStamp,\n                keyupLocal = 'keyup.' + localStamp,\n                resizeLocal = 'resize.' + localStamp + ' ' + 'orientationchange.' + localStamp,\n                showParams;\n\n            if (FLAG) {\n                $DOCUMENT\n                    .on(keydownLocal, function (e) {\n                        var catched,\n                            index;\n\n                        if ($videoPlaying && e.keyCode === 27) {\n                            catched = true;\n                            unloadVideo($videoPlaying, true, true);\n                        } else if (that.fullScreen || (opts.keyboard && !that.index)) {\n                            if (e.keyCode === 27) {\n                                catched = true;\n                                that.cancelFullScreen();\n                            } else if ((e.shiftKey && e.keyCode === 32 && allowKey('space')) || (!e.altKey && !e.metaKey && e.keyCode === 37 && allowKey('left')) || (e.keyCode === 38 && allowKey('up') && $(':focus').attr('data-gallery-role'))) {\n                                that.longPress.progress();\n                                index = '<';\n                            } else if ((e.keyCode === 32 && allowKey('space')) || (!e.altKey && !e.metaKey && e.keyCode === 39 && allowKey('right')) || (e.keyCode === 40 && allowKey('down') && $(':focus').attr('data-gallery-role'))) {\n                                that.longPress.progress();\n                                index = '>';\n                            } else if (e.keyCode === 36 && allowKey('home')) {\n                                that.longPress.progress();\n                                index = '<<';\n                            } else if (e.keyCode === 35 && allowKey('end')) {\n                                that.longPress.progress();\n                                index = '>>';\n                            }\n                        }\n\n                        (catched || index) && stopEvent(e);\n                        showParams = {index: index, slow: e.altKey, user: true};\n                        index && (that.longPress.inProgress ?\n                            that.showWhileLongPress(showParams) :\n                            that.show(showParams));\n                    });\n\n                if (FLAG) {\n                    $DOCUMENT\n                        .on(keyupLocal, function (e) {\n                            if (that.longPress.inProgress) {\n                                that.showEndLongPress({user: true});\n                            }\n                            that.longPress.reset();\n                        });\n                }\n\n                if (!that.index) {\n                    $DOCUMENT\n                        .off(keydownCommon)\n                        .on(keydownCommon, 'textarea, input, select', function (e) {\n                            !$BODY.hasClass(_fullscreenClass) && e.stopPropagation();\n                        });\n                }\n\n                $WINDOW.on(resizeLocal, that.resize);\n            } else {\n                $DOCUMENT.off(keydownLocal);\n                $WINDOW.off(resizeLocal);\n            }\n        }\n\n        function appendElements(FLAG) {\n            if (FLAG === appendElements.f) return;\n\n            if (FLAG) {\n                $fotorama\n                    .addClass(_fotoramaClass + ' ' + stampClass)\n                    .before($anchor)\n                    .before($style);\n                addInstance(that);\n            } else {\n                $anchor.detach();\n                $style.detach();\n                $fotorama\n                    .html(fotoramaData.urtext)\n                    .removeClass(stampClass);\n\n                hideInstance(that);\n            }\n\n            bindGlobalEvents(FLAG);\n            appendElements.f = FLAG;\n        }\n\n        /**\n         * Set and install data from incoming @param {JSON} options or takes data attr from data-\"name\"=... values.\n         */\n        function setData() {\n            data = that.data = data || clone(opts.data) || getDataFromHtml($fotorama);\n            size = that.size = data.length;\n\n            ready.ok && opts.shuffle && shuffle(data);\n\n            checkForVideo();\n\n            activeIndex = limitIndex(activeIndex);\n\n            size && appendElements(true);\n        }\n\n        function stageNoMove() {\n            var _noMove = size < 2 || $videoPlaying;\n            stageShaftTouchTail.noMove = _noMove || o_fade;\n            stageShaftTouchTail.noSwipe = _noMove || !opts.swipe;\n\n            !o_transition && $stageShaft.toggleClass(grabClass, !opts.click && !stageShaftTouchTail.noMove && !stageShaftTouchTail.noSwipe);\n            MS_POINTER && $wrap.toggleClass(wrapPanYClass, !stageShaftTouchTail.noSwipe);\n        }\n\n        function setAutoplayInterval(interval) {\n            if (interval === true) interval = '';\n            opts.autoplay = Math.max(+interval || AUTOPLAY_INTERVAL, o_transitionDuration * 1.5);\n        }\n\n        function updateThumbArrow(opt) {\n            if (opt.navarrows && opt.nav === 'thumbs') {\n                $thumbArrLeft.show();\n                $thumbArrRight.show();\n            } else {\n                $thumbArrLeft.hide();\n                $thumbArrRight.hide();\n            }\n\n        }\n\n        function getThumbsInSlide($el, opts) {\n            return Math.floor($wrap.width() / (opts.thumbwidth + opts.thumbmargin));\n        }\n\n        /**\n         * Options on the fly\n         * */\n        function setOptions() {\n            if (!opts.nav || opts.nav === 'dots') {\n                opts.navdir = 'horizontal'\n            }\n\n            that.options = opts = optionsToLowerCase(opts);\n            thumbsPerSlide = getThumbsInSlide($wrap, opts);\n\n            o_fade = (opts.transition === 'crossfade' || opts.transition === 'dissolve');\n\n            o_loop = opts.loop && (size > 2 || (o_fade && (!o_transition || o_transition !== 'slide')));\n\n            o_transitionDuration = +opts.transitionduration || TRANSITION_DURATION;\n\n            o_rtl = opts.direction === 'rtl';\n\n            o_keyboard = $.extend({}, opts.keyboard && KEYBOARD_OPTIONS, opts.keyboard);\n            updateThumbArrow(opts);\n            var classes = {add: [], remove: []};\n\n            function addOrRemoveClass(FLAG, value) {\n                classes[FLAG ? 'add' : 'remove'].push(value);\n            }\n\n            if (size > 1) {\n                o_nav = opts.nav;\n                o_navTop = opts.navposition === 'top';\n                classes.remove.push(selectClass);\n\n                $arrs.toggle(!!opts.arrows);\n            } else {\n                o_nav = false;\n                $arrs.hide();\n            }\n\n            arrsUpdate();\n            stageWheelUpdate();\n            thumbArrUpdate();\n            if (opts.autoplay) setAutoplayInterval(opts.autoplay);\n\n            o_thumbSide = numberFromMeasure(opts.thumbwidth) || THUMB_SIZE;\n            o_thumbSide2 = numberFromMeasure(opts.thumbheight) || THUMB_SIZE;\n\n            stageWheelTail.ok = navWheelTail.ok = opts.trackpad && !SLOW;\n\n            stageNoMove();\n\n            extendMeasures(opts, [measures]);\n\n            o_navThumbs = o_nav === 'thumbs';\n\n            if ($navWrap.filter(':hidden') && !!o_nav) {\n                $navWrap.show();\n            }\n            if (o_navThumbs) {\n                frameDraw(size, 'navThumb');\n\n                $navFrame = $navThumbFrame;\n                navFrameKey = NAV_THUMB_FRAME_KEY;\n\n                setStyle($style, $.Fotorama.jst.style({\n                    w: o_thumbSide,\n                    h: o_thumbSide2,\n                    b: opts.thumbborderwidth,\n                    m: opts.thumbmargin,\n                    s: stamp,\n                    q: !COMPAT\n                }));\n\n                $nav\n                    .addClass(navThumbsClass)\n                    .removeClass(navDotsClass);\n            } else if (o_nav === 'dots') {\n                frameDraw(size, 'navDot');\n\n                $navFrame = $navDotFrame;\n                navFrameKey = NAV_DOT_FRAME_KEY;\n\n                $nav\n                    .addClass(navDotsClass)\n                    .removeClass(navThumbsClass);\n            } else {\n                $navWrap.hide();\n                o_nav = false;\n                $nav.removeClass(navThumbsClass + ' ' + navDotsClass);\n            }\n\n            if (o_nav) {\n                if (o_navTop) {\n                    $navWrap.insertBefore($stage);\n                } else {\n                    $navWrap.insertAfter($stage);\n                }\n                frameAppend.nav = false;\n\n                frameAppend($navFrame, $navShaft, 'nav');\n            }\n\n            o_allowFullScreen = opts.allowfullscreen;\n\n            if (o_allowFullScreen) {\n                $fullscreenIcon.prependTo($stage);\n                o_nativeFullScreen = FULLSCREEN && o_allowFullScreen === 'native';\n            } else {\n                $fullscreenIcon.detach();\n                o_nativeFullScreen = false;\n            }\n\n            addOrRemoveClass(o_fade, wrapFadeClass);\n            addOrRemoveClass(!o_fade, wrapSlideClass);\n            addOrRemoveClass(!opts.captions, wrapNoCaptionsClass);\n            addOrRemoveClass(o_rtl, wrapRtlClass);\n            addOrRemoveClass(opts.arrows, wrapToggleArrowsClass);\n\n            o_shadows = opts.shadows && !SLOW;\n            addOrRemoveClass(!o_shadows, wrapNoShadowsClass);\n\n            $wrap\n                .addClass(classes.add.join(' '))\n                .removeClass(classes.remove.join(' '));\n\n            lastOptions = $.extend({}, opts);\n            setStagePosition();\n        }\n\n        function normalizeIndex(index) {\n            return index < 0 ? (size + (index % size)) % size : index >= size ? index % size : index;\n        }\n\n        function limitIndex(index) {\n            return minMaxLimit(index, 0, size - 1);\n        }\n\n        function edgeIndex(index) {\n            return o_loop ? normalizeIndex(index) : limitIndex(index);\n        }\n\n        function getPrevIndex(index) {\n            return index > 0 || o_loop ? index - 1 : false;\n        }\n\n        function getNextIndex(index) {\n            return index < size - 1 || o_loop ? index + 1 : false;\n        }\n\n        function setStageShaftMinmaxAndSnap() {\n            stageShaftTouchTail.min = o_loop ? -Infinity : -getPosByIndex(size - 1, measures.w, opts.margin, repositionIndex);\n            stageShaftTouchTail.max = o_loop ? Infinity : -getPosByIndex(0, measures.w, opts.margin, repositionIndex);\n            stageShaftTouchTail.snap = measures.w + opts.margin;\n        }\n\n        function setNavShaftMinMax() {\n\n            var isVerticalDir = (opts.navdir === 'vertical');\n            var param = isVerticalDir ? $navShaft.height() : $navShaft.width();\n            var mainParam = isVerticalDir ? measures.h : measures.nw;\n            navShaftTouchTail.min = Math.min(0, mainParam - param);\n            navShaftTouchTail.max = 0;\n            navShaftTouchTail.direction = opts.navdir;\n            $navShaft.toggleClass(grabClass, !(navShaftTouchTail.noMove = navShaftTouchTail.min === navShaftTouchTail.max));\n        }\n\n        function eachIndex(indexes, type, fn) {\n            if (typeof indexes === 'number') {\n                indexes = new Array(indexes);\n                var rangeFLAG = true;\n            }\n            return $.each(indexes, function (i, index) {\n                if (rangeFLAG) index = i;\n                if (typeof index === 'number') {\n                    var dataFrame = data[normalizeIndex(index)];\n\n                    if (dataFrame) {\n                        var key = '$' + type + 'Frame',\n                            $frame = dataFrame[key];\n\n                        fn.call(this, i, index, dataFrame, $frame, key, $frame && $frame.data());\n                    }\n                }\n            });\n        }\n\n        function setMeasures(width, height, ratio, index) {\n            if (!measuresSetFLAG || (measuresSetFLAG === '*' && index === startIndex)) {\n\n                width = measureIsValid(opts.width) || measureIsValid(width) || WIDTH;\n                height = measureIsValid(opts.height) || measureIsValid(height) || HEIGHT;\n                that.resize({\n                    width: width,\n                    ratio: opts.ratio || ratio || width / height\n                }, 0, index !== startIndex && '*');\n            }\n        }\n\n        function loadImg(indexes, type, specialMeasures, again) {\n\n            eachIndex(indexes, type, function (i, index, dataFrame, $frame, key, frameData) {\n\n                if (!$frame) return;\n\n                var fullFLAG = that.fullScreen && !frameData.$full && type === 'stage';\n\n                if (frameData.$img && !again && !fullFLAG) return;\n\n                var img = new Image(),\n                    $img = $(img),\n                    imgData = $img.data();\n\n                frameData[fullFLAG ? '$full' : '$img'] = $img;\n\n                var srcKey = type === 'stage' ? (fullFLAG ? 'full' : 'img') : 'thumb',\n                    src = dataFrame[srcKey],\n                    dummy = fullFLAG ? dataFrame['img'] : dataFrame[type === 'stage' ? 'thumb' : 'img'];\n\n                if (type === 'navThumb') $frame = frameData.$wrap;\n\n                function triggerTriggerEvent(event) {\n                    var _index = normalizeIndex(index);\n                    triggerEvent(event, {\n                        index: _index,\n                        src: src,\n                        frame: data[_index]\n                    });\n                }\n\n                function error() {\n                    $img.remove();\n\n                    $.Fotorama.cache[src] = 'error';\n\n                    if ((!dataFrame.html || type !== 'stage') && dummy && dummy !== src) {\n                        dataFrame[srcKey] = src = dummy;\n                        frameData.$full = null;\n                        loadImg([index], type, specialMeasures, true);\n                    } else {\n                        if (src && !dataFrame.html && !fullFLAG) {\n                            $frame\n                                .trigger('f:error')\n                                .removeClass(loadingClass)\n                                .addClass(errorClass);\n\n                            triggerTriggerEvent('error');\n                        } else if (type === 'stage') {\n                            $frame\n                                .trigger('f:load')\n                                .removeClass(loadingClass + ' ' + errorClass)\n                                .addClass(loadedClass);\n\n                            triggerTriggerEvent('load');\n                            setMeasures();\n                        }\n\n                        frameData.state = 'error';\n\n                        if (size > 1 && data[index] === dataFrame && !dataFrame.html && !dataFrame.deleted && !dataFrame.video && !fullFLAG) {\n                            dataFrame.deleted = true;\n                            that.splice(index, 1);\n                        }\n                    }\n                }\n\n                function loaded() {\n                    $.Fotorama.measures[src] = imgData.measures = $.Fotorama.measures[src] || {\n                            width: img.width,\n                            height: img.height,\n                            ratio: img.width / img.height\n                        };\n\n                    setMeasures(imgData.measures.width, imgData.measures.height, imgData.measures.ratio, index);\n\n                    $img\n                        .off('load error')\n                        .addClass('' + (fullFLAG ? imgFullClass: imgClass))\n                        .attr('aria-hidden', 'false')\n                        .prependTo($frame);\n\n                    if ($frame.hasClass(stageFrameClass) && !$frame.hasClass(videoContainerClass)) {\n                        $frame.attr(\"href\", $img.attr(\"src\"));\n                    }\n\n                    fit($img, (\n                            $.isFunction(specialMeasures) ? specialMeasures() : specialMeasures) || measures);\n\n                    $.Fotorama.cache[src] = frameData.state = 'loaded';\n\n                    setTimeout(function () {\n                        $frame\n                            .trigger('f:load')\n                            .removeClass(loadingClass + ' ' + errorClass)\n                            .addClass(loadedClass + ' ' + (fullFLAG ? loadedFullClass : loadedImgClass));\n\n                        if (type === 'stage') {\n                            triggerTriggerEvent('load');\n                        } else if (dataFrame.thumbratio === AUTO || !dataFrame.thumbratio && opts.thumbratio === AUTO) {\n                            // danger! reflow for all thumbnails\n                            dataFrame.thumbratio = imgData.measures.ratio;\n                            reset();\n                        }\n                    }, 0);\n                }\n\n                if (!src) {\n                    error();\n                    return;\n                }\n\n                function waitAndLoad() {\n                    var _i = 10;\n                    waitFor(function () {\n                        return !touchedFLAG || !_i-- && !SLOW;\n                    }, function () {\n                        loaded();\n                    });\n                }\n\n                if (!$.Fotorama.cache[src]) {\n                    $.Fotorama.cache[src] = '*';\n\n                    $img\n                        .on('load', waitAndLoad)\n                        .on('error', error);\n                } else {\n                    (function justWait() {\n                        if ($.Fotorama.cache[src] === 'error') {\n                            error();\n                        } else if ($.Fotorama.cache[src] === 'loaded') {\n                            setTimeout(waitAndLoad, 0);\n                        } else {\n                            setTimeout(justWait, 100);\n                        }\n                    })();\n                }\n\n                frameData.state = '';\n                img.src = src;\n\n                if (frameData.data.caption) {\n                    img.alt = frameData.data.caption || \"\";\n                }\n\n                if (frameData.data.full) {\n                    $(img).data('original', frameData.data.full);\n                }\n\n                if (UTIL.isExpectedCaption(dataFrame, opts.showcaption)) {\n                    $(img).attr('aria-labelledby', dataFrame.labelledby);\n                }\n            });\n        }\n\n        function updateFotoramaState() {\n            var $frame = activeFrame[STAGE_FRAME_KEY];\n\n            if ($frame && !$frame.data().state) {\n                $spinner.addClass(spinnerShowClass);\n                $frame.on('f:load f:error', function () {\n                    $frame.off('f:load f:error');\n                    $spinner.removeClass(spinnerShowClass);\n                });\n            }\n        }\n\n        function addNavFrameEvents(frame) {\n            addEnterUp(frame, onNavFrameClick);\n            addFocus(frame, function () {\n\n                setTimeout(function () {\n                    lockScroll($nav);\n                }, 0);\n                slideNavShaft({time: o_transitionDuration, guessIndex: $(this).data().eq, minMax: navShaftTouchTail});\n            });\n        }\n\n        function frameDraw(indexes, type) {\n            eachIndex(indexes, type, function (i, index, dataFrame, $frame, key, frameData) {\n                if ($frame) return;\n\n                $frame = dataFrame[key] = $wrap[key].clone();\n                frameData = $frame.data();\n                frameData.data = dataFrame;\n                var frame = $frame[0],\n                    labelledbyValue = \"labelledby\" + $.now();\n\n                if (type === 'stage') {\n\n                    if (dataFrame.html) {\n                        $('<div class=\"' + htmlClass + '\"></div>')\n                            .append(\n                            dataFrame._html ? $(dataFrame.html)\n                                .removeAttr('id')\n                                .html(dataFrame._html) // Because of IE\n                                : dataFrame.html\n                        )\n                            .appendTo($frame);\n                    }\n\n                    if (dataFrame.id) {\n                        labelledbyValue = dataFrame.id || labelledbyValue;\n                    }\n                    dataFrame.labelledby = labelledbyValue;\n\n                    if (UTIL.isExpectedCaption(dataFrame, opts.showcaption)) {\n                        $($.Fotorama.jst.frameCaption({\n                            caption: dataFrame.caption,\n                            labelledby: labelledbyValue\n                        })).appendTo($frame);\n                    }\n\n                    dataFrame.video && $frame\n                        .addClass(stageFrameVideoClass)\n                        .append($videoPlay.clone());\n\n                    // This solves tabbing problems\n                    addFocus(frame, function (e) {\n                        setTimeout(function () {\n                            lockScroll($stage);\n                        }, 0);\n                        clickToShow({index: frameData.eq, user: true}, e);\n                    });\n\n                    $stageFrame = $stageFrame.add($frame);\n                } else if (type === 'navDot') {\n                    addNavFrameEvents(frame);\n                    $navDotFrame = $navDotFrame.add($frame);\n                } else if (type === 'navThumb') {\n                    addNavFrameEvents(frame);\n                    frameData.$wrap = $frame.children(':first');\n\n                    $navThumbFrame = $navThumbFrame.add($frame);\n                    if (dataFrame.video) {\n                        frameData.$wrap.append($videoPlay.clone());\n                    }\n                }\n            });\n        }\n\n        function callFit($img, measuresToFit) {\n            return $img && $img.length && fit($img, measuresToFit);\n        }\n\n        function stageFramePosition(indexes) {\n            eachIndex(indexes, 'stage', function (i, index, dataFrame, $frame, key, frameData) {\n                if (!$frame) return;\n\n                var normalizedIndex = normalizeIndex(index);\n                frameData.eq = normalizedIndex;\n\n                toDetach[STAGE_FRAME_KEY][normalizedIndex] = $frame.css($.extend({left: o_fade ? 0 : getPosByIndex(index, measures.w, opts.margin, repositionIndex)}, o_fade && getDuration(0)));\n\n                if (isDetached($frame[0])) {\n                    $frame.appendTo($stageShaft);\n                    unloadVideo(dataFrame.$video);\n                }\n\n                callFit(frameData.$img, measures);\n                callFit(frameData.$full, measures);\n\n                if ($frame.hasClass(stageFrameClass) && !($frame.attr('aria-hidden') === \"false\" && $frame.hasClass(activeClass))) {\n                    $frame.attr('aria-hidden', 'true');\n                }\n            });\n        }\n\n        function thumbsDraw(pos, loadFLAG) {\n            var leftLimit,\n                rightLimit,\n                exceedLimit;\n\n\n            if (o_nav !== 'thumbs' || isNaN(pos)) return;\n\n            leftLimit = -pos;\n            rightLimit = -pos + measures.nw;\n\n            if (opts.navdir === 'vertical') {\n                pos = pos - opts.thumbheight;\n                rightLimit = -pos + measures.h;\n            }\n\n            $navThumbFrame.each(function () {\n                var $this = $(this),\n                    thisData = $this.data(),\n                    eq = thisData.eq,\n                    getSpecialMeasures = function () {\n                        return {\n                            h: o_thumbSide2,\n                            w: thisData.w\n                        }\n                    },\n                    specialMeasures = getSpecialMeasures(),\n                    exceedLimit = opts.navdir === 'vertical' ?\n                    thisData.t > rightLimit : thisData.l > rightLimit;\n                specialMeasures.w = thisData.w;\n\n                if ((opts.navdir !== 'vertical' && thisData.l + thisData.w < leftLimit)\n                    || exceedLimit\n                    || callFit(thisData.$img, specialMeasures)) return;\n\n                loadFLAG && loadImg([eq], 'navThumb', getSpecialMeasures);\n            });\n        }\n\n        function frameAppend($frames, $shaft, type) {\n            if (!frameAppend[type]) {\n\n                var thumbsFLAG = type === 'nav' && o_navThumbs,\n                    left = 0,\n                    top = 0;\n\n                $shaft.append(\n                    $frames\n                        .filter(function () {\n                            var actual,\n                                $this = $(this),\n                                frameData = $this.data();\n                            for (var _i = 0, _l = data.length; _i < _l; _i++) {\n                                if (frameData.data === data[_i]) {\n                                    actual = true;\n                                    frameData.eq = _i;\n                                    break;\n                                }\n                            }\n                            return actual || $this.remove() && false;\n                        })\n                        .sort(function (a, b) {\n                            return $(a).data().eq - $(b).data().eq;\n                        })\n                        .each(function () {\n                            var $this = $(this),\n                                frameData = $this.data();\n                            UTIL.setThumbAttr($this, frameData.data.caption, \"aria-label\");\n                        })\n                        .each(function () {\n\n                            if (!thumbsFLAG) return;\n\n                            var $this = $(this),\n                                frameData = $this.data(),\n                                thumbwidth = Math.round(o_thumbSide2 * frameData.data.thumbratio) || o_thumbSide,\n                                thumbheight = Math.round(o_thumbSide / frameData.data.thumbratio) || o_thumbSide2;\n                            frameData.t = top;\n                            frameData.h = thumbheight;\n                            frameData.l = left;\n                            frameData.w = thumbwidth;\n\n                            $this.css({width: thumbwidth});\n\n                            top += thumbheight + opts.thumbmargin;\n                            left += thumbwidth + opts.thumbmargin;\n                        })\n                );\n\n                frameAppend[type] = true;\n            }\n        }\n\n        function getDirection(x) {\n            return x - stageLeft > measures.w / 3;\n        }\n\n        function disableDirrection(i) {\n            return !o_loop && (!(activeIndex + i) || !(activeIndex - size + i)) && !$videoPlaying;\n        }\n\n        function arrsUpdate() {\n            var disablePrev = disableDirrection(0),\n                disableNext = disableDirrection(1);\n            $arrPrev\n                .toggleClass(arrDisabledClass, disablePrev)\n                .attr(disableAttr(disablePrev, false));\n            $arrNext\n                .toggleClass(arrDisabledClass, disableNext)\n                .attr(disableAttr(disableNext, false));\n        }\n\n        function thumbArrUpdate() {\n            var isLeftDisable = false,\n                isRightDisable = false;\n            if (opts.navtype === 'thumbs' && !opts.loop) {\n                (activeIndex == 0) ? isLeftDisable = true : isLeftDisable = false;\n                (activeIndex == opts.data.length - 1) ? isRightDisable = true : isRightDisable = false;\n            }\n            if (opts.navtype === 'slides') {\n                var pos = readPosition($navShaft, opts.navdir);\n                pos >= navShaftTouchTail.max ? isLeftDisable = true : isLeftDisable = false;\n                pos <= navShaftTouchTail.min ? isRightDisable = true : isRightDisable = false;\n            }\n            $thumbArrLeft\n                .toggleClass(arrDisabledClass, isLeftDisable)\n                .attr(disableAttr(isLeftDisable, true));\n            $thumbArrRight\n                .toggleClass(arrDisabledClass, isRightDisable)\n                .attr(disableAttr(isRightDisable, true));\n        }\n\n        function stageWheelUpdate() {\n            if (stageWheelTail.ok) {\n                stageWheelTail.prevent = {'<': disableDirrection(0), '>': disableDirrection(1)};\n            }\n        }\n\n        function getNavFrameBounds($navFrame) {\n            var navFrameData = $navFrame.data(),\n                left,\n                top,\n                width,\n                height;\n\n            if (o_navThumbs) {\n                left = navFrameData.l;\n                top = navFrameData.t;\n                width = navFrameData.w;\n                height = navFrameData.h;\n            } else {\n                left = $navFrame.position().left;\n                width = $navFrame.width();\n            }\n\n            var horizontalBounds = {\n                c: left + width / 2,\n                min: -left + opts.thumbmargin * 10,\n                max: -left + measures.w - width - opts.thumbmargin * 10\n            };\n\n            var verticalBounds = {\n                c: top + height / 2,\n                min: -top + opts.thumbmargin * 10,\n                max: -top + measures.h - height - opts.thumbmargin * 10\n            };\n\n            return opts.navdir === 'vertical' ? verticalBounds : horizontalBounds;\n        }\n\n        function slideThumbBorder(time) {\n            var navFrameData = activeFrame[navFrameKey].data();\n            slide($thumbBorder, {\n                time: time * 1.2,\n                pos: (opts.navdir === 'vertical' ? navFrameData.t : navFrameData.l),\n                width: navFrameData.w,\n                height: navFrameData.h,\n                direction: opts.navdir\n            });\n        }\n\n        function slideNavShaft(options) {\n            var $guessNavFrame = data[options.guessIndex][navFrameKey],\n                typeOfAnimation = opts.navtype;\n\n            var overflowFLAG,\n                time,\n                minMax,\n                boundTop,\n                boundLeft,\n                l,\n                pos,\n                x;\n\n            if ($guessNavFrame) {\n                if (typeOfAnimation === 'thumbs') {\n                    overflowFLAG = navShaftTouchTail.min !== navShaftTouchTail.max;\n                    minMax = options.minMax || overflowFLAG && getNavFrameBounds(activeFrame[navFrameKey]);\n                    boundTop = overflowFLAG && (options.keep && slideNavShaft.t ? slideNavShaft.l : minMaxLimit((options.coo || measures.nw / 2) - getNavFrameBounds($guessNavFrame).c, minMax.min, minMax.max));\n                    boundLeft = overflowFLAG && (options.keep && slideNavShaft.l ? slideNavShaft.l : minMaxLimit((options.coo || measures.nw / 2) - getNavFrameBounds($guessNavFrame).c, minMax.min, minMax.max));\n                    l = (opts.navdir === 'vertical' ? boundTop : boundLeft);\n                    pos = overflowFLAG && minMaxLimit(l, navShaftTouchTail.min, navShaftTouchTail.max) || 0;\n                    time = options.time * 1.1;\n                    slide($navShaft, {\n                        time: time,\n                        pos: pos,\n                        direction: opts.navdir,\n                        onEnd: function () {\n                            thumbsDraw(pos, true);\n                            thumbArrUpdate();\n                        }\n                    });\n\n                    setShadow($nav, findShadowEdge(pos, navShaftTouchTail.min, navShaftTouchTail.max, opts.navdir));\n                    slideNavShaft.l = l;\n                } else {\n                    x = readPosition($navShaft, opts.navdir);\n                    time = options.time * 1.11;\n\n                    pos = validateSlidePos(opts, navShaftTouchTail, options.guessIndex, x, $guessNavFrame, $navWrap, opts.navdir);\n\n                    slide($navShaft, {\n                        time: time,\n                        pos: pos,\n                        direction: opts.navdir,\n                        onEnd: function () {\n                            thumbsDraw(pos, true);\n                            thumbArrUpdate();\n                        }\n                    });\n                    setShadow($nav, findShadowEdge(pos, navShaftTouchTail.min, navShaftTouchTail.max, opts.navdir));\n                }\n            }\n        }\n\n        function navUpdate() {\n            deactivateFrames(navFrameKey);\n            toDeactivate[navFrameKey].push(activeFrame[navFrameKey].addClass(activeClass).attr('data-active', true));\n        }\n\n        function deactivateFrames(key) {\n            var _toDeactivate = toDeactivate[key];\n\n            while (_toDeactivate.length) {\n                _toDeactivate.shift().removeClass(activeClass).attr('data-active', false);\n            }\n        }\n\n        function detachFrames(key) {\n            var _toDetach = toDetach[key];\n\n            $.each(activeIndexes, function (i, index) {\n                delete _toDetach[normalizeIndex(index)];\n            });\n\n            $.each(_toDetach, function (index, $frame) {\n                delete _toDetach[index];\n                $frame.detach();\n            });\n        }\n\n        function stageShaftReposition(skipOnEnd) {\n\n            repositionIndex = dirtyIndex = activeIndex;\n\n            var $frame = activeFrame[STAGE_FRAME_KEY];\n\n            if ($frame) {\n                deactivateFrames(STAGE_FRAME_KEY);\n                toDeactivate[STAGE_FRAME_KEY].push($frame.addClass(activeClass).attr('data-active', true));\n\n                if ($frame.hasClass(stageFrameClass)) {\n                    $frame.attr('aria-hidden', 'false');\n                }\n\n                skipOnEnd || that.showStage.onEnd(true);\n                stop($stageShaft, 0, true);\n\n                detachFrames(STAGE_FRAME_KEY);\n                stageFramePosition(activeIndexes);\n                setStageShaftMinmaxAndSnap();\n                setNavShaftMinMax();\n                addEnterUp($stageShaft[0], function () {\n                    if (!$fotorama.hasClass(fullscreenClass)) {\n                        that.requestFullScreen();\n                        $fullscreenIcon.focus();\n                    }\n                });\n            }\n        }\n\n        function extendMeasures(options, measuresArray) {\n            if (!options) return;\n\n            $.each(measuresArray, function (i, measures) {\n                if (!measures) return;\n\n                $.extend(measures, {\n                    width: options.width || measures.width,\n                    height: options.height,\n                    minwidth: options.minwidth,\n                    maxwidth: options.maxwidth,\n                    minheight: options.minheight,\n                    maxheight: options.maxheight,\n                    ratio: getRatio(options.ratio)\n                })\n            });\n        }\n\n        function triggerEvent(event, extra) {\n            $fotorama.trigger(_fotoramaClass + ':' + event, [that, extra]);\n        }\n\n        function onTouchStart() {\n            clearTimeout(onTouchEnd.t);\n            touchedFLAG = 1;\n\n            if (opts.stopautoplayontouch) {\n                that.stopAutoplay();\n            } else {\n                pausedAutoplayFLAG = true;\n            }\n        }\n\n        function onTouchEnd() {\n            if (!touchedFLAG) return;\n            if (!opts.stopautoplayontouch) {\n                releaseAutoplay();\n                changeAutoplay();\n            }\n\n            onTouchEnd.t = setTimeout(function () {\n                touchedFLAG = 0;\n            }, TRANSITION_DURATION + TOUCH_TIMEOUT);\n        }\n\n        function releaseAutoplay() {\n            pausedAutoplayFLAG = !!($videoPlaying || stoppedAutoplayFLAG);\n        }\n\n        function changeAutoplay() {\n\n            clearTimeout(changeAutoplay.t);\n            waitFor.stop(changeAutoplay.w);\n\n            if (!opts.autoplay || pausedAutoplayFLAG) {\n                if (that.autoplay) {\n                    that.autoplay = false;\n                    triggerEvent('stopautoplay');\n                }\n\n                return;\n            }\n\n            if (!that.autoplay) {\n                that.autoplay = true;\n                triggerEvent('startautoplay');\n            }\n\n            var _activeIndex = activeIndex;\n\n\n            var frameData = activeFrame[STAGE_FRAME_KEY].data();\n            changeAutoplay.w = waitFor(function () {\n                return frameData.state || _activeIndex !== activeIndex;\n            }, function () {\n                changeAutoplay.t = setTimeout(function () {\n\n                    if (pausedAutoplayFLAG || _activeIndex !== activeIndex) return;\n\n                    var _nextAutoplayIndex = nextAutoplayIndex,\n                        nextFrameData = data[_nextAutoplayIndex][STAGE_FRAME_KEY].data();\n\n                    changeAutoplay.w = waitFor(function () {\n\n                        return nextFrameData.state || _nextAutoplayIndex !== nextAutoplayIndex;\n                    }, function () {\n                        if (pausedAutoplayFLAG || _nextAutoplayIndex !== nextAutoplayIndex) return;\n                        that.show(o_loop ? getDirectionSign(!o_rtl) : nextAutoplayIndex);\n                    });\n                }, opts.autoplay);\n            });\n\n        }\n\n        that.startAutoplay = function (interval) {\n            if (that.autoplay) return this;\n            pausedAutoplayFLAG = stoppedAutoplayFLAG = false;\n            setAutoplayInterval(interval || opts.autoplay);\n            changeAutoplay();\n\n            return this;\n        };\n\n        that.stopAutoplay = function () {\n            if (that.autoplay) {\n                pausedAutoplayFLAG = stoppedAutoplayFLAG = true;\n                changeAutoplay();\n            }\n            return this;\n        };\n\n        that.showSlide = function (slideDir) {\n            var currentPosition = readPosition($navShaft, opts.navdir),\n                pos,\n                time = 500 * 1.1,\n                size = opts.navdir === 'horizontal' ? opts.thumbwidth : opts.thumbheight,\n                onEnd = function () {\n                    thumbArrUpdate();\n                };\n            if (slideDir === 'next') {\n                pos = currentPosition - (size + opts.margin) * thumbsPerSlide;\n            }\n            if (slideDir === 'prev') {\n                pos = currentPosition + (size + opts.margin) * thumbsPerSlide;\n            }\n            pos = validateRestrictions(pos, navShaftTouchTail);\n            thumbsDraw(pos, true);\n            slide($navShaft, {\n                time: time,\n                pos: pos,\n                direction: opts.navdir,\n                onEnd: onEnd\n            });\n        };\n\n        that.showWhileLongPress = function (options) {\n            if (that.longPress.singlePressInProgress) {\n                return;\n            }\n\n            var index = calcActiveIndex(options);\n            calcGlobalIndexes(index);\n            var time = calcTime(options) / 50;\n            var _activeFrame = activeFrame;\n            that.activeFrame = activeFrame = data[activeIndex];\n            var silent = _activeFrame === activeFrame && !options.user;\n\n            that.showNav(silent, options, time);\n\n            return this;\n        };\n\n        that.showEndLongPress = function (options) {\n            if (that.longPress.singlePressInProgress) {\n                return;\n            }\n\n            var index = calcActiveIndex(options);\n            calcGlobalIndexes(index);\n            var time = calcTime(options) / 50;\n            var _activeFrame = activeFrame;\n            that.activeFrame = activeFrame = data[activeIndex];\n\n            var silent = _activeFrame === activeFrame && !options.user;\n\n            that.showStage(silent, options, time);\n\n            showedFLAG = typeof lastActiveIndex !== 'undefined' && lastActiveIndex !== activeIndex;\n            lastActiveIndex = activeIndex;\n            return this;\n        };\n\n        function calcActiveIndex (options) {\n            var index;\n\n            if (typeof options !== 'object') {\n                index = options;\n                options = {};\n            } else {\n                index = options.index;\n            }\n\n            index = index === '>' ? dirtyIndex + 1 : index === '<' ? dirtyIndex - 1 : index === '<<' ? 0 : index === '>>' ? size - 1 : index;\n            index = isNaN(index) ? undefined : index;\n            index = typeof index === 'undefined' ? activeIndex || 0 : index;\n\n            return index;\n        }\n\n        function calcGlobalIndexes (index) {\n            that.activeIndex = activeIndex = edgeIndex(index);\n            prevIndex = getPrevIndex(activeIndex);\n            nextIndex = getNextIndex(activeIndex);\n            nextAutoplayIndex = normalizeIndex(activeIndex + (o_rtl ? -1 : 1));\n            activeIndexes = [activeIndex, prevIndex, nextIndex];\n\n            dirtyIndex = o_loop ? index : activeIndex;\n        }\n\n        function calcTime (options) {\n            var diffIndex = Math.abs(lastActiveIndex - dirtyIndex),\n                time = getNumber(options.time, function () {\n                    return Math.min(o_transitionDuration * (1 + (diffIndex - 1) / 12), o_transitionDuration * 2);\n                });\n\n            if (options.slow) {\n                time *= 10;\n            }\n\n            return time;\n        }\n\n        that.showStage = function (silent, options, time, e) {\n            if (e !== undefined && e.target.tagName == 'IFRAME') {\n                return;\n            }\n            unloadVideo($videoPlaying, activeFrame.i !== data[normalizeIndex(repositionIndex)].i);\n            frameDraw(activeIndexes, 'stage');\n            stageFramePosition(SLOW ? [dirtyIndex] : [dirtyIndex, getPrevIndex(dirtyIndex), getNextIndex(dirtyIndex)]);\n            updateTouchTails('go', true);\n\n            silent || triggerEvent('show', {\n                user: options.user,\n                time: time\n            });\n\n            pausedAutoplayFLAG = true;\n\n            var overPos = options.overPos;\n            var onEnd = that.showStage.onEnd = function (skipReposition) {\n                if (onEnd.ok) return;\n                onEnd.ok = true;\n\n                skipReposition || stageShaftReposition(true);\n\n                if (!silent) {\n                    triggerEvent('showend', {\n                        user: options.user\n                    });\n                }\n\n                if (!skipReposition && o_transition && o_transition !== opts.transition) {\n                    that.setOptions({transition: o_transition});\n                    o_transition = false;\n                    return;\n                }\n\n                updateFotoramaState();\n                loadImg(activeIndexes, 'stage');\n\n                updateTouchTails('go', false);\n                stageWheelUpdate();\n\n                stageCursor();\n                releaseAutoplay();\n                changeAutoplay();\n\n                if (that.fullScreen) {\n                    activeFrame[STAGE_FRAME_KEY].find('.' + imgFullClass).attr('aria-hidden', false);\n                    activeFrame[STAGE_FRAME_KEY].find('.' + imgClass).attr('aria-hidden', true)\n                } else {\n                    activeFrame[STAGE_FRAME_KEY].find('.' + imgFullClass).attr('aria-hidden', true);\n                    activeFrame[STAGE_FRAME_KEY].find('.' + imgClass).attr('aria-hidden', false)\n                }\n            };\n\n            if (!o_fade) {\n                slide($stageShaft, {\n                    pos: -getPosByIndex(dirtyIndex, measures.w, opts.margin, repositionIndex),\n                    overPos: overPos,\n                    time: time,\n                    onEnd: onEnd\n                });\n            } else {\n                var $activeFrame = activeFrame[STAGE_FRAME_KEY],\n                    $prevActiveFrame = data[lastActiveIndex] && activeIndex !== lastActiveIndex ? data[lastActiveIndex][STAGE_FRAME_KEY] : null;\n\n                fade($activeFrame, $prevActiveFrame, $stageFrame, {\n                    time: time,\n                    method: opts.transition,\n                    onEnd: onEnd\n                }, fadeStack);\n            }\n\n            arrsUpdate();\n        };\n\n        that.showNav = function(silent, options, time){\n            thumbArrUpdate();\n            if (o_nav) {\n                navUpdate();\n\n                var guessIndex = limitIndex(activeIndex + minMaxLimit(dirtyIndex - lastActiveIndex, -1, 1));\n                slideNavShaft({\n                    time: time,\n                    coo: guessIndex !== activeIndex && options.coo,\n                    guessIndex: typeof options.coo !== 'undefined' ? guessIndex : activeIndex,\n                    keep: silent\n                });\n                if (o_navThumbs) slideThumbBorder(time);\n            }\n        };\n\n        that.show = function (options, e) {\n            that.longPress.singlePressInProgress = true;\n\n            var index = calcActiveIndex(options);\n            calcGlobalIndexes(index);\n            var time = calcTime(options);\n            var _activeFrame = activeFrame;\n            that.activeFrame = activeFrame = data[activeIndex];\n\n            var silent = _activeFrame === activeFrame && !options.user;\n\n            that.showStage(silent, options, time, e);\n            that.showNav(silent, options, time);\n\n            showedFLAG = typeof lastActiveIndex !== 'undefined' && lastActiveIndex !== activeIndex;\n            lastActiveIndex = activeIndex;\n            that.longPress.singlePressInProgress = false;\n\n            return this;\n        };\n\n        that.requestFullScreen = function () {\n            if (o_allowFullScreen && !that.fullScreen) {\n\n                //check that this is not video\n                var isVideo = $((that.activeFrame || {}).$stageFrame || {}).hasClass('fotorama-video-container');\n                if(isVideo) {\n                    return;\n                }\n\n                scrollTop = $WINDOW.scrollTop();\n                scrollLeft = $WINDOW.scrollLeft();\n\n                lockScroll($WINDOW);\n\n                updateTouchTails('x', true);\n\n                measuresStash = $.extend({}, measures);\n\n                $fotorama\n                    .addClass(fullscreenClass)\n                    .appendTo($BODY.addClass(_fullscreenClass));\n\n                $HTML.addClass(_fullscreenClass);\n\n                unloadVideo($videoPlaying, true, true);\n\n                that.fullScreen = true;\n\n                if (o_nativeFullScreen) {\n                    fullScreenApi.request(fotorama);\n                }\n\n                that.resize();\n                loadImg(activeIndexes, 'stage');\n                updateFotoramaState();\n                triggerEvent('fullscreenenter');\n\n                if (!('ontouchstart' in window)) {\n                    $fullscreenIcon.focus();\n                }\n            }\n\n            return this;\n        };\n\n        function cancelFullScreen() {\n            if (that.fullScreen) {\n                that.fullScreen = false;\n\n                if (FULLSCREEN) {\n                    fullScreenApi.cancel(fotorama);\n                }\n\n                $BODY.removeClass(_fullscreenClass);\n                $HTML.removeClass(_fullscreenClass);\n\n                $fotorama\n                    .removeClass(fullscreenClass)\n                    .insertAfter($anchor);\n\n                measures = $.extend({}, measuresStash);\n\n                unloadVideo($videoPlaying, true, true);\n\n                updateTouchTails('x', false);\n\n                that.resize();\n                loadImg(activeIndexes, 'stage');\n\n                lockScroll($WINDOW, scrollLeft, scrollTop);\n\n                triggerEvent('fullscreenexit');\n            }\n        }\n\n        that.cancelFullScreen = function () {\n            if (o_nativeFullScreen && fullScreenApi.is()) {\n                fullScreenApi.cancel(document);\n            } else {\n                cancelFullScreen();\n            }\n\n            return this;\n        };\n\n        that.toggleFullScreen = function () {\n            return that[(that.fullScreen ? 'cancel' : 'request') + 'FullScreen']();\n        };\n\n        that.resize = function (options) {\n            if (!data) return this;\n\n            var time = arguments[1] || 0,\n                setFLAG = arguments[2];\n\n            thumbsPerSlide = getThumbsInSlide($wrap, opts);\n            extendMeasures(!that.fullScreen ? optionsToLowerCase(options) : {\n                width: $(window).width(),\n                maxwidth: null,\n                minwidth: null,\n                height: $(window).height(),\n                maxheight: null,\n                minheight: null\n            }, [measures, setFLAG || that.fullScreen || opts]);\n\n            var width = measures.width,\n                height = measures.height,\n                ratio = measures.ratio,\n                windowHeight = $WINDOW.height() - (o_nav ? $nav.height() : 0);\n\n            if (measureIsValid(width)) {\n                $wrap.css({width: ''});\n                $stage.css({width: ''});\n                $stageShaft.css({width: ''});\n                $nav.css({width: ''});\n                $wrap.css({minWidth: measures.minwidth || 0, maxWidth: measures.maxwidth || MAX_WIDTH});\n\n                if (o_nav === 'dots') {\n                    $navWrap.hide();\n                }\n                width = measures.W = measures.w = $wrap.width();\n                measures.nw = o_nav && numberFromWhatever(opts.navwidth, width) || width;\n\n                $stageShaft.css({width: measures.w, marginLeft: (measures.W - measures.w) / 2});\n\n                height = numberFromWhatever(height, windowHeight);\n\n                height = height || (ratio && width / ratio);\n\n                if (height) {\n                    width = Math.round(width);\n                    height = measures.h = Math.round(minMaxLimit(height, numberFromWhatever(measures.minheight, windowHeight), numberFromWhatever(measures.maxheight, windowHeight)));\n                    $stage.css({'width': width, 'height': height});\n\n                    if (opts.navdir === 'vertical' && !that.fullscreen) {\n                        $nav.width(opts.thumbwidth + opts.thumbmargin * 2);\n                    }\n\n                    if (opts.navdir === 'horizontal' && !that.fullscreen) {\n                        $nav.height(opts.thumbheight + opts.thumbmargin * 2);\n                    }\n\n                    if (o_nav === 'dots') {\n                        $nav.width(width)\n                            .height('auto');\n                        $navWrap.show();\n                    }\n\n                    if (opts.navdir === 'vertical' && that.fullScreen) {\n                        $stage.css('height', $WINDOW.height());\n                    }\n\n                    if (opts.navdir === 'horizontal' && that.fullScreen) {\n                        $stage.css('height', $WINDOW.height() - $nav.height());\n                    }\n\n                    if (o_nav) {\n                        switch (opts.navdir) {\n                            case 'vertical':\n                                $navWrap.removeClass(navShafthorizontalClass);\n                                $navWrap.removeClass(navShaftListClass);\n                                $navWrap.addClass(navShaftVerticalClass);\n                                $nav\n                                    .stop()\n                                    .animate({height: measures.h, width: opts.thumbwidth}, time);\n                                break;\n                            case 'list':\n                                $navWrap.removeClass(navShaftVerticalClass);\n                                $navWrap.removeClass(navShafthorizontalClass);\n                                $navWrap.addClass(navShaftListClass);\n                                break;\n                            default:\n                                $navWrap.removeClass(navShaftVerticalClass);\n                                $navWrap.removeClass(navShaftListClass);\n                                $navWrap.addClass(navShafthorizontalClass);\n                                $nav\n                                    .stop()\n                                    .animate({width: measures.nw}, time);\n                                break;\n                        }\n\n                        stageShaftReposition();\n                        slideNavShaft({guessIndex: activeIndex, time: time, keep: true});\n                        if (o_navThumbs && frameAppend.nav) slideThumbBorder(time);\n                    }\n\n                    measuresSetFLAG = setFLAG || true;\n\n                    ready.ok = true;\n                    ready();\n                }\n            }\n\n            stageLeft = $stage.offset().left;\n            setStagePosition();\n\n            return this;\n        };\n\n        that.setOptions = function (options) {\n            $.extend(opts, options);\n            reset();\n            return this;\n        };\n\n        that.shuffle = function () {\n            data && shuffle(data) && reset();\n            return this;\n        };\n\n        function setShadow($el, edge) {\n            if (o_shadows) {\n                $el.removeClass(shadowsLeftClass + ' ' + shadowsRightClass);\n                $el.removeClass(shadowsTopClass + ' ' + shadowsBottomClass);\n                edge && !$videoPlaying && $el.addClass(edge.replace(/^|\\s/g, ' ' + shadowsClass + '--'));\n            }\n        }\n\n        that.longPress = {\n            threshold: 1,\n            count: 0,\n            thumbSlideTime: 20,\n            progress: function(){\n                if (!this.inProgress) {\n                    this.count++;\n                    this.inProgress = this.count > this.threshold;\n                }\n            },\n            end: function(){\n                if(this.inProgress) {\n                    this.isEnded = true\n                }\n            },\n            reset: function(){\n                this.count = 0;\n                this.inProgress = false;\n                this.isEnded = false;\n            }\n        };\n\n        that.destroy = function () {\n            that.cancelFullScreen();\n            that.stopAutoplay();\n\n            data = that.data = null;\n\n            appendElements();\n\n            activeIndexes = [];\n            detachFrames(STAGE_FRAME_KEY);\n\n            reset.ok = false;\n\n            return this;\n        };\n\n        /**\n         *\n         * @returns {jQuery.Fotorama}\n         */\n        that.playVideo = function () {\n            var dataFrame = activeFrame,\n                video = dataFrame.video,\n                _activeIndex = activeIndex;\n\n            if (typeof video === 'object' && dataFrame.videoReady) {\n                o_nativeFullScreen && that.fullScreen && that.cancelFullScreen();\n\n                waitFor(function () {\n                    return !fullScreenApi.is() || _activeIndex !== activeIndex;\n                }, function () {\n                    if (_activeIndex === activeIndex) {\n                        dataFrame.$video = dataFrame.$video || $(div(videoClass)).append(createVideoFrame(video));\n                        dataFrame.$video.appendTo(dataFrame[STAGE_FRAME_KEY]);\n\n                        $wrap.addClass(wrapVideoClass);\n                        $videoPlaying = dataFrame.$video;\n\n                        stageNoMove();\n\n                        $arrs.blur();\n                        $fullscreenIcon.blur();\n\n                        triggerEvent('loadvideo');\n                    }\n                });\n            }\n\n            return this;\n        };\n\n        that.stopVideo = function () {\n            unloadVideo($videoPlaying, true, true);\n            return this;\n        };\n\n        that.spliceByIndex = function (index, newImgObj) {\n            newImgObj.i = index + 1;\n            newImgObj.img && $.ajax({\n                url: newImgObj.img,\n                type: 'HEAD',\n                success: function () {\n                    data.splice(index, 1, newImgObj);\n                    reset();\n                }\n            });\n        };\n\n        function unloadVideo($video, unloadActiveFLAG, releaseAutoplayFLAG) {\n            if (unloadActiveFLAG) {\n                $wrap.removeClass(wrapVideoClass);\n                $videoPlaying = false;\n\n                stageNoMove();\n            }\n\n            if ($video && $video !== $videoPlaying) {\n                $video.remove();\n                triggerEvent('unloadvideo');\n            }\n\n            if (releaseAutoplayFLAG) {\n                releaseAutoplay();\n                changeAutoplay();\n            }\n        }\n\n        function toggleControlsClass(FLAG) {\n            $wrap.toggleClass(wrapNoControlsClass, FLAG);\n        }\n\n        function stageCursor(e) {\n            if (stageShaftTouchTail.flow) return;\n\n            var x = e ? e.pageX : stageCursor.x,\n                pointerFLAG = x && !disableDirrection(getDirection(x)) && opts.click;\n\n            if (stageCursor.p !== pointerFLAG\n                && $stage.toggleClass(pointerClass, pointerFLAG)) {\n                stageCursor.p = pointerFLAG;\n                stageCursor.x = x;\n            }\n        }\n\n        $stage.on('mousemove', stageCursor);\n\n        function clickToShow(showOptions, e) {\n            clearTimeout(clickToShow.t);\n\n            if (opts.clicktransition && opts.clicktransition !== opts.transition) {\n                setTimeout(function () {\n                    var _o_transition = opts.transition;\n\n                    that.setOptions({transition: opts.clicktransition});\n\n                    // now safe to pass base transition to o_transition, so that.show will restor it\n                    o_transition = _o_transition;\n                    // this timeout is here to prevent jerking in some browsers\n                    clickToShow.t = setTimeout(function () {\n                        that.show(showOptions);\n                    }, 10);\n                }, 0);\n            } else {\n                that.show(showOptions, e);\n            }\n        }\n\n        function onStageTap(e, toggleControlsFLAG) {\n            var target = e.target,\n                $target = $(target);\n            if ($target.hasClass(videoPlayClass)) {\n                that.playVideo();\n            } else if (target === fullscreenIcon) {\n                that.toggleFullScreen();\n            } else if ($videoPlaying) {\n                target === videoClose && unloadVideo($videoPlaying, true, true);\n            } else if (!$fotorama.hasClass(fullscreenClass)) {\n                that.requestFullScreen();\n            }\n        }\n\n        function updateTouchTails(key, value) {\n            stageShaftTouchTail[key] = navShaftTouchTail[key] = value;\n        }\n\n        stageShaftTouchTail = moveOnTouch($stageShaft, {\n            onStart: onTouchStart,\n            onMove: function (e, result) {\n                setShadow($stage, result.edge);\n            },\n            onTouchEnd: onTouchEnd,\n            onEnd: function (result) {\n                var toggleControlsFLAG;\n\n                setShadow($stage);\n                toggleControlsFLAG = (MS_POINTER && !hoverFLAG || result.touch) &&\n                    opts.arrows;\n\n                if ((result.moved || (toggleControlsFLAG && result.pos !== result.newPos && !result.control)) && result.$target[0] !== $fullscreenIcon[0]) {\n                    var index = getIndexByPos(result.newPos, measures.w, opts.margin, repositionIndex);\n\n                    that.show({\n                        index: index,\n                        time: o_fade ? o_transitionDuration : result.time,\n                        overPos: result.overPos,\n                        user: true\n                    });\n                } else if (!result.aborted && !result.control) {\n                    onStageTap(result.startEvent, toggleControlsFLAG);\n                }\n            },\n            timeLow: 1,\n            timeHigh: 1,\n            friction: 2,\n            select: '.' + selectClass + ', .' + selectClass + ' *',\n            $wrap: $stage,\n            direction: 'horizontal'\n\n        });\n\n        navShaftTouchTail = moveOnTouch($navShaft, {\n            onStart: onTouchStart,\n            onMove: function (e, result) {\n                setShadow($nav, result.edge);\n            },\n            onTouchEnd: onTouchEnd,\n            onEnd: function (result) {\n\n                function onEnd() {\n                    slideNavShaft.l = result.newPos;\n                    releaseAutoplay();\n                    changeAutoplay();\n                    thumbsDraw(result.newPos, true);\n                    thumbArrUpdate();\n                }\n\n                if (!result.moved) {\n                    var target = result.$target.closest('.' + navFrameClass, $navShaft)[0];\n                    target && onNavFrameClick.call(target, result.startEvent);\n                } else if (result.pos !== result.newPos) {\n                    pausedAutoplayFLAG = true;\n                    slide($navShaft, {\n                        time: result.time,\n                        pos: result.newPos,\n                        overPos: result.overPos,\n                        direction: opts.navdir,\n                        onEnd: onEnd\n                    });\n                    thumbsDraw(result.newPos);\n                    o_shadows && setShadow($nav, findShadowEdge(result.newPos, navShaftTouchTail.min, navShaftTouchTail.max, result.dir));\n                } else {\n                    onEnd();\n                }\n            },\n            timeLow: .5,\n            timeHigh: 2,\n            friction: 5,\n            $wrap: $nav,\n            direction: opts.navdir\n        });\n\n        stageWheelTail = wheel($stage, {\n            shift: true,\n            onEnd: function (e, direction) {\n                onTouchStart();\n                onTouchEnd();\n                that.show({index: direction, slow: e.altKey})\n            }\n        });\n\n        navWheelTail = wheel($nav, {\n            onEnd: function (e, direction) {\n                onTouchStart();\n                onTouchEnd();\n                var newPos = stop($navShaft) + direction * .25;\n                $navShaft.css(getTranslate(minMaxLimit(newPos, navShaftTouchTail.min, navShaftTouchTail.max), opts.navdir));\n                o_shadows && setShadow($nav, findShadowEdge(newPos, navShaftTouchTail.min, navShaftTouchTail.max, opts.navdir));\n                navWheelTail.prevent = {'<': newPos >= navShaftTouchTail.max, '>': newPos <= navShaftTouchTail.min};\n                clearTimeout(navWheelTail.t);\n                navWheelTail.t = setTimeout(function () {\n                    slideNavShaft.l = newPos;\n                    thumbsDraw(newPos, true)\n                }, TOUCH_TIMEOUT);\n                thumbsDraw(newPos);\n            }\n        });\n\n        $wrap.hover(\n            function () {\n                setTimeout(function () {\n                    if (touchedFLAG) return;\n                    toggleControlsClass(!(hoverFLAG = true));\n                }, 0);\n            },\n            function () {\n                if (!hoverFLAG) return;\n                toggleControlsClass(!(hoverFLAG = false));\n            }\n        );\n\n        function onNavFrameClick(e) {\n            var index = $(this).data().eq;\n\n            if (opts.navtype === 'thumbs') {\n                clickToShow({index: index, slow: e.altKey, user: true, coo: e._x - $nav.offset().left});\n            } else {\n                clickToShow({index: index, slow: e.altKey, user: true});\n            }\n        }\n\n        function onArrClick(e) {\n            clickToShow({index: $arrs.index(this) ? '>' : '<', slow: e.altKey, user: true});\n        }\n\n        smartClick($arrs, function (e) {\n            stopEvent(e);\n            onArrClick.call(this, e);\n        }, {\n            onStart: function () {\n                onTouchStart();\n                stageShaftTouchTail.control = true;\n            },\n            onTouchEnd: onTouchEnd\n        });\n\n        smartClick($thumbArrLeft, function (e) {\n            stopEvent(e);\n            if (opts.navtype === 'thumbs') {\n\n                that.show('<');\n            } else {\n                that.showSlide('prev')\n            }\n        });\n\n        smartClick($thumbArrRight, function (e) {\n            stopEvent(e);\n            if (opts.navtype === 'thumbs') {\n                that.show('>');\n            } else {\n                that.showSlide('next')\n            }\n\n        });\n\n\n        function addFocusOnControls(el) {\n            addFocus(el, function () {\n                setTimeout(function () {\n                    lockScroll($stage);\n                }, 0);\n                toggleControlsClass(false);\n            });\n        }\n\n        $arrs.each(function () {\n            addEnterUp(this, function (e) {\n                onArrClick.call(this, e);\n            });\n            addFocusOnControls(this);\n        });\n\n        addEnterUp(fullscreenIcon, function () {\n            if ($fotorama.hasClass(fullscreenClass)) {\n                that.cancelFullScreen();\n                $stageShaft.focus();\n            } else {\n                that.requestFullScreen();\n                $fullscreenIcon.focus();\n            }\n\n        });\n        addFocusOnControls(fullscreenIcon);\n\n        function reset() {\n            setData();\n            setOptions();\n\n            if (!reset.i) {\n                reset.i = true;\n                // Only once\n                var _startindex = opts.startindex;\n                activeIndex = repositionIndex = dirtyIndex = lastActiveIndex = startIndex = edgeIndex(_startindex) || 0;\n                /*(o_rtl ? size - 1 : 0)*///;\n            }\n\n            if (size) {\n                if (changeToRtl()) return;\n\n                if ($videoPlaying) {\n                    unloadVideo($videoPlaying, true);\n                }\n\n                activeIndexes = [];\n                detachFrames(STAGE_FRAME_KEY);\n\n                reset.ok = true;\n\n                that.show({index: activeIndex, time: 0});\n                that.resize();\n            } else {\n                that.destroy();\n            }\n        }\n\n        function changeToRtl() {\n\n            if (!changeToRtl.f === o_rtl) {\n                changeToRtl.f = o_rtl;\n                activeIndex = size - 1 - activeIndex;\n                that.reverse();\n\n                return true;\n            }\n        }\n\n        $.each('load push pop shift unshift reverse sort splice'.split(' '), function (i, method) {\n            that[method] = function () {\n                data = data || [];\n                if (method !== 'load') {\n                    Array.prototype[method].apply(data, arguments);\n                } else if (arguments[0] && typeof arguments[0] === 'object' && arguments[0].length) {\n                    data = clone(arguments[0]);\n                }\n                reset();\n                return that;\n            }\n        });\n\n        function ready() {\n            if (ready.ok) {\n                ready.ok = false;\n                triggerEvent('ready');\n            }\n        }\n\n        reset();\n    };\n    $.fn.fotorama = function (opts) {\n        return this.each(function () {\n            var that = this,\n                $fotorama = $(this),\n                fotoramaData = $fotorama.data(),\n                fotorama = fotoramaData.fotorama;\n\n            if (!fotorama) {\n                waitFor(function () {\n                    return !isHidden(that);\n                }, function () {\n                    fotoramaData.urtext = $fotorama.html();\n                    new $.Fotorama($fotorama,\n                        $.extend(\n                            {},\n                            OPTIONS,\n                            window.fotoramaDefaults,\n                            opts,\n                            fotoramaData\n                        )\n                    );\n                });\n            } else {\n                fotorama.setOptions(opts, true);\n            }\n        });\n    };\n    $.Fotorama.instances = [];\n\n    function calculateIndexes() {\n        $.each($.Fotorama.instances, function (index, instance) {\n            instance.index = index;\n        });\n    }\n\n    function addInstance(instance) {\n        $.Fotorama.instances.push(instance);\n        calculateIndexes();\n    }\n\n    function hideInstance(instance) {\n        $.Fotorama.instances.splice(instance.index, 1);\n        calculateIndexes();\n    }\n\n    $.Fotorama.cache = {};\n    $.Fotorama.measures = {};\n    $ = $ || {};\n    $.Fotorama = $.Fotorama || {};\n    $.Fotorama.jst = $.Fotorama.jst || {};\n\n    $.Fotorama.jst.dots = function (v) {\n        var __t, __p = '', __e = _.escape;\n        __p += '<div class=\"fotorama__nav__frame fotorama__nav__frame--dot\" tabindex=\"0\" role=\"button\" data-gallery-role=\"nav-frame\" data-nav-type=\"thumb\" aria-label>\\r\\n    <div class=\"fotorama__dot\"></div>\\r\\n</div>';\n        return __p\n    };\n\n    $.Fotorama.jst.frameCaption = function (v) {\n        var __t, __p = '', __e = _.escape;\n        __p += '<div class=\"fotorama__caption\" aria-hidden=\"true\">\\r\\n    <div class=\"fotorama__caption__wrap\" id=\"' +\n            ((__t = ( v.labelledby )) == null ? '' : __t) +\n            '\">' +\n            ((__t = ( v.caption )) == null ? '' : __t) +\n            '</div>\\r\\n</div>\\r\\n';\n        return __p\n    };\n\n    $.Fotorama.jst.style = function (v) {\n        var __t, __p = '', __e = _.escape;\n        __p += '.fotorama' +\n            ((__t = ( v.s )) == null ? '' : __t) +\n            ' .fotorama__nav--thumbs .fotorama__nav__frame{\\r\\npadding:' +\n            ((__t = ( v.m )) == null ? '' : __t) +\n            'px;\\r\\nheight:' +\n            ((__t = ( v.h )) == null ? '' : __t) +\n            'px}\\r\\n.fotorama' +\n            ((__t = ( v.s )) == null ? '' : __t) +\n            ' .fotorama__thumb-border{\\r\\nheight:' +\n            ((__t = ( v.h )) == null ? '' : __t) +\n            'px;\\r\\nborder-width:' +\n            ((__t = ( v.b )) == null ? '' : __t) +\n            'px;\\r\\nmargin-top:' +\n            ((__t = ( v.m )) == null ? '' : __t) +\n            'px}';\n        return __p\n    };\n\n    $.Fotorama.jst.thumb = function (v) {\n        var __t, __p = '', __e = _.escape;\n        __p += '<div class=\"fotorama__nav__frame fotorama__nav__frame--thumb\" tabindex=\"0\" role=\"button\" data-gallery-role=\"nav-frame\" data-nav-type=\"thumb\" aria-label>\\r\\n    <div class=\"fotorama__thumb\">\\r\\n    </div>\\r\\n</div>';\n        return __p\n    };\n})(window, document, location, typeof jQuery !== 'undefined' && jQuery);\n\n","Magento_Shipping/js/model/config.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    return function () {\n        return window.checkoutConfig.shippingPolicy;\n    };\n});\n","Magento_Shipping/js/view/checkout/shipping/shipping-policy.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'uiComponent',\n    'Magento_Shipping/js/model/config'\n\n], function (Component, config) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_Shipping/checkout/shipping/shipping-policy'\n        },\n        config: config()\n    });\n});\n","Vertex_AddressValidation/js/billing-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Checkout/js/checkout-data'\n], function ($, registry, checkoutData) {\n    'use strict';\n\n    return function (Component) {\n        return Component.extend({\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\n            addressValidator: null,\n\n            /**\n             * @returns {Object}\n             */\n            initialize: function () {\n                this._super();\n\n                registry.get(\n                    'checkout.steps.billing-step.payment.payments-list' +\n                    '.before-place-order.billingAdditional' +\n                    '.address-validation-message.validator',\n                    function (validator) {\n                        this.addressValidator = validator;\n                    }.bind(this)\n                );\n                return this;\n            },\n\n            /**\n             * @returns {self}\n             */\n            updateAddress: function () {\n                this.registerAddressInvalidationTrigger();\n\n                var billingData = checkoutData.getBillingAddressFromData();\n\n                if (!this.validationConfig.isAddressValidationEnabled ||\n                    this.addressValidator.isAddressValid ||\n                    billingData === null ||\n                    this.selectedAddress() && !this.isAddressFormVisible() ||\n                    this.validationConfig.countryValidation.indexOf(billingData.country_id) === -1\n                ) {\n                    return this._super();\n                }\n\n                this.addressValidator.addressValidation().done(function () {\n                    if (!this.validationConfig.showValidationSuccessMessage) {\n                        return this.updateAddress();\n                    }\n                }.bind(this));\n            },\n\n            /**\n             * When called, register a single (mind the \"one\") address invalidation trigger,\n             * that sets the \"this.addressValidator.isAddressValid = false\" for any further billing address field change.\n             */\n            registerAddressInvalidationTrigger: function () {\n                let that = this;\n                $('fieldset')\n                    .find('[data-form=\"billing-new-address\"]')\n                    .one(\n                        'keyup change paste',\n                        'input[name^=\"street\"]' +\n                        ', input[name=\"postcode\"]' +\n                        ', input[name=\"city\"]' +\n                        ', input[name=\"country_id\"]' +\n                        ', select[name=\"region_id\"]',\n                        function () {\n                            that.addressValidator.isAddressValid = false;\n                        });\n            }\n        });\n    };\n});\n","Vertex_AddressValidation/js/shipping-invalidate-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'uiRegistry',\n    'mage/utils/wrapper'\n], function (registry, wrapper) {\n    'use strict';\n\n    var config = window.checkoutConfig.vertexAddressValidationConfig || {};\n\n    return function (target) {\n        if (!config.isAddressValidationEnabled) {\n            return target;\n        }\n\n        var validationMessage = registry.get(\n            'checkout.steps.shipping-step.shippingAddress' +\n            '.before-shipping-method-form.shippingAdditional'\n        );\n\n        target.setSelectedShippingAddress = wrapper.wrap(target.setSelectedShippingAddress, function (original, args) {\n            var addressValidator = registry.get(\n                'checkout.steps.shipping-step.shippingAddress' +\n                '.before-shipping-method-form.shippingAdditional' +\n                '.address-validation-message.validator'\n            );\n\n            addressValidator.isAddressValid = false;\n            validationMessage.clear();\n\n            return original(args);\n        });\n\n        return target;\n    }\n});\n","Vertex_AddressValidation/js/shipping-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'uiRegistry',\n    'Magento_Checkout/js/model/quote'\n], function (registry, quote) {\n    'use strict';\n\n    return function (Component) {\n        return Component.extend({\n            validationConfig: window.checkoutConfig.vertexAddressValidationConfig,\n            shippingData: null,\n            addressValidator: null,\n\n            /**\n             * @returns {Object}\n             */\n            initialize: function () {\n                this._super();\n\n                registry.get(\n                    'checkout.steps.shipping-step.shippingAddress' +\n                    '.before-shipping-method-form.shippingAdditional' +\n                    '.address-validation-message.validator',\n                    function (validator) {\n                        this.addressValidator = validator;\n                    }.bind(this)\n                );\n\n                this.shippingData = quote.shippingAddress();\n                return this;\n            },\n\n            /**\n             * @return {Boolean}\n             */\n            validateShippingInformation: function () {\n                var superResult = this._super();\n\n                // Proceed with saving the address\n                if (!this.validationConfig.isAddressValidationEnabled ||\n                    !superResult ||\n                    this.addressValidator.isAddressValid ||\n                    !quote.shippingAddress().isEditable() ||\n                    this.validationConfig.countryValidation.indexOf(this.shippingData.countryId) === -1\n                ) {\n                    this.addressValidator.message.clear();\n                    return superResult;\n                }\n\n                // Run address validation\n                if (superResult) {\n                    this.addressValidator.addressValidation().done(function () {\n                        if (!this.validationConfig.showValidationSuccessMessage) {\n                            this.setShippingInformation();\n                        }\n                    }.bind(this));\n\n                    return false;\n                }\n                return superResult;\n            }\n        });\n    };\n});\n","Vertex_AddressValidation/js/validation-messages.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\ndefine(['mage/translate'], function ($t) {\n    'use strict';\n\n    /**\n     * Messages here may not be the final version.  Please check the module's\n     * i18n.csv file for final english versions.\n     *\n     * Messages are kept here as-is for backwards compatibility with translations\n     */\n    return {\n        noChangesNecessary: $t('The address is valid'),\n        noAddressFound: $t('We did not find a valid address'),\n        changesFound: $t('The address is not valid'),\n        adminChangesFound: $t('The intended address could be:'),\n        addressUpdated: $t('The address was updated'),\n        streetAddressUpdateWarning: $t('Warning: Updating the address will replace all street address fields.')\n    };\n})\n","Vertex_AddressValidation/js/customer-validation-mixin.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Vertex_AddressValidation/js/view/customer/address-form',\n    'Vertex_AddressValidation/js/view/customer/address-validation'\n], function ($, registry, addressForm, addressValidator) {\n    'use strict';\n\n    var config = window.vertexAddressValidationConfig || {};\n\n    return function (addressValidation) {\n        if (!config.enabled) {\n            return addressValidation;\n        }\n\n        $.widget('mage.addressValidation', addressValidation, {\n            /**\n             * Initialize widget\n             *\n             * @returns {*}\n             * @private\n             */\n            _create: function () {\n                var result = this._super(),\n                    button = $(this.options.selectors.button, this.element),\n                    validator = addressValidator();\n\n                addressForm.initialize(this.element, button);\n                addressForm.renameSubmitButton(config.validateButtonText);\n\n                this.element.data('validator').settings.submitHandler = function (form) {\n                    if (addressForm.isSaveAsIs) {\n                        addressForm.isSaveAsIs = false;\n                        return this.submitForm(form);\n                    }\n\n                    validator.addressValidation(addressForm.getAddress()).done(this.submitForm.bind(this, form));\n                }.bind(this);\n\n                return result;\n            },\n\n            /**\n             * Submit form\n             *\n             * @param {Object} form\n             */\n            submitForm: function (form) {\n                addressForm.disableSubmitButtons();\n                form.submit();\n            }\n        });\n        return $.mage.addressValidation;\n    }\n});\n","Vertex_AddressValidation/js/definitions.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\n/**\n * @typedef UncleanAddress\n * @api\n * @property {string[]} streetAddress\n * @property {string} city\n * @property {string} mainDivision - Region, State, or Province\n * @property {string} postalCode - ZIP or postal code\n * @property {string} country - 2 or 3 letter country code\n */\n\n/**\n * @typedef CleanAddress\n * @api\n * @property {string[]} streetAddress - street address lines\n * @property {?string} city - name of the city\n * @property {?string} subDivision - name of the sub-division (county, parish)\n * @property {?string} regionName - name of the region (state/province)\n * @property {?int} regionId - numeric (state/province) region identifier in the Magento database\n * @property {?string} postalCode - ZIP+4 or postal code\n * @property {?string} countryCode - 2 letter country code\n * @property {?string} countryName - name of the country\n */\n","Vertex_AddressValidation/js/model/url-builder.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery'\n], function ($) {\n    'use strict';\n\n    var config = window.checkoutConfig || window.vertexAddressValidationConfig || {};\n\n    return {\n        method: 'rest',\n        storeCode: config.storeCode,\n        version: 'V1',\n        serviceUrl: ':method/:storeCode/:version',\n\n        /**\n         * @param {String} url\n         * @param {Object} params\n         * @return {*}\n         */\n        createUrl: function (url, params) {\n            var completeUrl = this.serviceUrl + url;\n            return this.bindParams(completeUrl, params);\n        },\n\n        /**\n         * @param {String} url\n         * @param {Object} params\n         * @return {*}\n         */\n        bindParams: function (url, params) {\n            var urlParts;\n\n            params.method = this.method;\n            params.storeCode = this.storeCode;\n            params.version = this.version;\n\n            urlParts = url.split('/');\n            urlParts = urlParts.filter(Boolean);\n\n            $.each(urlParts, function (key, part) {\n                part = part.replace(':', '');\n\n                if (params[part] !== undefined) {\n                    urlParts[key] = params[part];\n                }\n            });\n\n            return urlParts.join('/');\n        }\n    };\n});\n","Vertex_AddressValidation/js/model/address-difference-template-renderer.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['underscore', 'uiClass'], function (_, Component) {\n    'use strict';\n\n    /**\n     * @typedef {Object} vertexDifferenceRendererObject\n     * @property {vertexDifferenceObject_Message} message\n     */\n\n    /**\n     * @typedef {Object} vertexDifferenceObject_Message\n     * @property {string} text - Informative message to end user\n     * @property {vertexDifferenceObject_Difference[]} differences - Array of differences\n     */\n\n    /**\n     * @typedef {Object} vertexDifferenceObject_Difference\n     * @property {string} name - Human readable name of field that has a difference\n     * @property {string} value - New value for the field\n     */\n\n    /**\n     * @api\n     */\n    return Component.extend({\n        /**\n         * @var {string} template - Location of file to render\n         */\n        template: 'Vertex_AddressValidation/template/validation-result.html',\n\n        /**\n         * @var {*} renderer - Underscore.js template object\n         */\n        renderer: null,\n\n        /**\n         * @constructor\n         * @param {string} template - File to render\n         * @returns {*}\n         */\n        initialize: function (template) {\n            if (typeof this.template !== 'undefined') {\n                this.template = template;\n            }\n\n            require(['text!' + this.template], function (templateContents) {\n                this.renderer = _.template(templateContents);\n            }.bind(this));\n\n            return this;\n        },\n\n        /**\n         * @param {vertexDifferenceRendererObject} message\n         * @returns {string} HTML\n         */\n        render: function (message) {\n            return this.renderer(message);\n        }\n    });\n});\n","Vertex_AddressValidation/js/model/difference-determiner.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['mage/translate'], function ($t) {\n    'use strict';\n\n    /**\n     * @typedef VertexAddressReadableDifference\n     * @property {string} type - Type of difference (used for code)\n     * @property {string} name - Human readable name of the item that has changed\n     * @property {(string|string[])} value - Human readable value of the item that has changed\n     * @property {(string|string[])} rawValue - Script usable value of the item that has changed\n     */\n\n    /**\n     * @param {UncleanAddress} uncleanAddress\n     * @param {CleanAddress} cleanAddress\n     * @returns {boolean}\n     */\n    function streetAddressesAreDifferent(uncleanAddress, cleanAddress) {\n        uncleanAddress.street_address.filter(function (val) {\n            // Filter out empty strings\n            return val.length > 0;\n        });\n\n        if (uncleanAddress.street_address.length !== cleanAddress.street_address.length) {\n            return true;\n        }\n        for(let index = 0,length = uncleanAddress.street_address.length;index < length;++index) {\n            if (uncleanAddress.street_address[index] !== cleanAddress.street_address[index]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @param {UncleanAddress} uncleanAddress\n     * @param {CleanAddress} cleanAddress\n     * @returns {VertexAddressReadableDifference[]}\n     */\n    return function (uncleanAddress, cleanAddress) {\n        const listedDifferences = [];\n        if (streetAddressesAreDifferent(uncleanAddress, cleanAddress)) {\n            listedDifferences.push({type: 'street', name: $t('Street Address'), value: cleanAddress.street_address, rawValue: cleanAddress.street_address});\n        }\n        if (uncleanAddress.city !== cleanAddress.city) {\n            listedDifferences.push({type: 'city', name: $t('City'), value: cleanAddress.city, rawValue: cleanAddress.city});\n        }\n        if (uncleanAddress.main_division !== cleanAddress.region_name) {\n            listedDifferences.push({type: 'region', name: $t('State/Province'), value: cleanAddress.region_name, rawValue: cleanAddress.region_id});\n        }\n        if (uncleanAddress.postal_code !== cleanAddress.postal_code) {\n            listedDifferences.push({type: 'postcode', name: $t('Zip/Postal Code'), value: cleanAddress.postal_code, rawValue: cleanAddress.postal_code});\n        }\n        if (uncleanAddress.country !== cleanAddress.country_code) {\n            listedDifferences.push({type: 'country', name: $t('Country'), value: cleanAddress.country_name, rawValue: cleanAddress.country_code});\n        }\n        return listedDifferences;\n    };\n});\n","Vertex_AddressValidation/js/model/customer/address-resolver.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'underscore'\n], function ($, _) {\n    'use strict';\n\n    return {\n        addressFieldsForValidation: ['city', 'postcode', 'street'],\n        responseAddressData: {},\n        formAddressData: {},\n\n        /**\n         * Will check if the response is different, same or invalid\n         *\n         * @param {Object} responseAddressData\n         * @param {Object} formAddressData\n         * @returns {Boolean|Array}\n         */\n        resolveAddressDifference: function (responseAddressData, formAddressData) {\n            var differences = [],\n                valid = [];\n\n            this.responseAddressData = responseAddressData;\n            this.formAddressData = formAddressData;\n\n            if (this.invalidErrorResponse(responseAddressData)) {\n                return [];\n            }\n\n            _.each(this.addressFieldsForValidation, function (v, i) {\n                var responseValue, value, name, isComplex,\n                    complexValues = [],\n                    isDifferent = false;\n\n                isComplex = _.isObject(formAddressData[v]) || _.isArray(formAddressData[v]);\n\n                if (responseAddressData[v] !== formAddressData[v]) {\n                    if (isComplex) {\n                        _.each(formAddressData[v], function (val, index) {\n                            if (val && responseAddressData[v][index] && val !== responseAddressData[v][index]) {\n                                complexValues[index] = responseAddressData[v][index];\n                                isDifferent = true;\n                            }\n                        });\n                    }\n\n                    if (!isDifferent && isComplex) {\n                        valid.push(v);\n                    }\n\n                    responseValue = responseAddressData[v];\n                    if (complexValues.length) {\n                        responseValue = complexValues.join(', ');\n                    }\n\n                    if (!complexValues.length && _.isArray(responseValue) || responseValue === null) {\n                        return;\n                    }\n\n                    value = responseValue.substr(0, 1).toUpperCase() + responseValue.substr(1);\n                    name = v.substr(0, 1).toUpperCase() + v.substr(1);\n                    differences.push({\n                        value: value,\n                        name: name\n                    });\n\n                    return;\n                }\n                valid[i] = v;\n            });\n\n            if (valid.length === this.addressFieldsForValidation.length && _.isEmpty(differences)) {\n                return true;\n            }\n            return differences;\n        },\n\n        /**\n         * Updates form inputs with the values from the API response\n         *\n         * @returns {*}\n         */\n        resolveAddressUpdate: function () {\n            var responseAddressData = this.responseAddressData,\n                formAddressData = this.formAddressData,\n                self = this;\n\n            _.each(this.addressFieldsForValidation, function (v) {\n                var fieldValue = responseAddressData[v],\n                    linesObj = {};\n\n                if (_.isObject(formAddressData[v])) {\n                    _.each(formAddressData[v], function (val, i) {\n                        if (fieldValue[i]) {\n                            linesObj[i] = fieldValue[i];\n                            self.updateFields({name: v, key: i}, fieldValue[i]);\n\n                            return;\n                        }\n                        linesObj[i] = val;\n                    });\n                    formAddressData[v] = linesObj;\n                    return;\n                }\n\n                formAddressData[v] = fieldValue;\n                self.updateFields({name: v}, fieldValue);\n            });\n\n            return formAddressData;\n        },\n\n        /**\n         * Update validated fields\n         *\n         * @param {Object} element\n         * @param {String} value\n         */\n        updateFields: function (element, value) {\n            if (element.key !== undefined) {\n                $('input[name=\"' + element.name + '[]\"]').eq(element.key).val(value).trigger('change');\n            } else {\n                $('input[name=\"' + element.name + '\"]').val(value).trigger('change');\n            }\n        },\n\n        /**\n         * Will check if the api response found a address\n         *\n         * @param {Object} responseData\n         * @returns {Boolean}\n         */\n        invalidErrorResponse: function (responseData) {\n            _.each(this.addressFieldsForValidation, function (v) {\n                if (_.isArray(responseData[v]) && responseData[v][0] === '') {\n                    return true;\n                }\n\n                if (responseData[v] === null) {\n                    return true;\n                }\n            });\n            return false;\n        }\n    };\n});\n","Vertex_AddressValidation/js/model/checkout/billing/address-resolver.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Customer/js/model/address-list',\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\n], function ($, registry, addressList, addressResolver) {\n    'use strict';\n\n    addressResolver = $.extend({}, addressResolver, {\n        updateFields: function (element, value) {\n            if (element.name === 'street') {\n                const streetInputs = $('.payment-method input[name^=\"street[\"]');\n                streetInputs.val('');\n                if (typeof value === 'string') {\n                    $(streetInputs[0]).val(value);\n                } else {\n                    for (let index = 0, length = value.length;index < length;++index) {\n                        $(streetInputs[index])\n                            .val(value[index]);\n                    }\n                }\n                streetInputs.trigger('change').trigger('blur');\n            } else {\n                $('.payment-method input[name=\"' + element.name + '\"]')\n                    .val(value)\n                    .trigger('change')\n                    .trigger('blur');\n            }\n        }\n    });\n    return addressResolver;\n});\n","Vertex_AddressValidation/js/model/checkout/shipping/address-resolver.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'Magento_Customer/js/model/address-list',\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\n    'Magento_Checkout/js/action/create-shipping-address',\n    'Magento_Checkout/js/checkout-data'\n], function ($, registry, addressList, addressResolver, createShippingAddress, checkoutData) {\n    'use strict';\n\n    addressResolver = $.extend({}, addressResolver, {\n        checkoutProvider: registry.get('checkoutProvider'),\n\n        updateFields: function (element, value) {\n            var addressData = $.extend({}, this.checkoutProvider.get('shippingAddress'));\n\n            if (element.name === 'street') {\n                // Just updating the addressData element doesn't seem to work on street inputs\n                const streetInputs = $('.form-shipping-address input[name^=\"street[\"]');\n                streetInputs.val('');\n                for(let index = 0, length = addressData[element.name].length;index < length;++index) {\n                    addressData[element.name][index] = typeof value[index] !== 'undefined' ? value[index] : '';\n                    $(streetInputs[index])\n                        .val(addressData[element.name][index]);\n                }\n            } else {\n                addressData[element.name] = value;\n            }\n\n            this.checkoutProvider.set('shippingAddress', addressData);\n            this.checkoutProvider.trigger('shippingAddress', addressData);\n\n            // Update address list containers\n            createShippingAddress(addressData);\n            checkoutData.setNewCustomerShippingAddress($.extend(true, {}, addressData));\n        }\n    });\n    return addressResolver;\n});\n","Vertex_AddressValidation/js/view/validation-message.js":"define([\n    'ko',\n    'uiComponent',\n    'Vertex_AddressValidation/js/model/address-difference-template-renderer',\n    'Vertex_AddressValidation/js/validation-messages'\n], function (ko, Component, differenceRenderer, validationMessages) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Vertex_AddressValidation/validation-message',\n            cleanseAddressTemplate: 'Vertex_AddressValidation/template/validation-result.html',\n            showSuccessMessage: false,\n            message: {},\n            address: null,\n            hasMessage: false,\n            tracks: {\n                showSuccessMessage: true,\n                message: true\n            }\n        },\n\n        templateRenderer: null,\n\n        initialize: function () {\n            this._super();\n            this.templateRenderer = new differenceRenderer(this.cleanseAddressTemplate);\n            return this;\n        },\n\n        /**\n         * Initializes observable properties.\n         *\n         * @returns {Model} Chainable.\n         */\n        initObservable: function () {\n            this.address = ko.observable();\n\n            this.hasMessage = ko.pureComputed(function() {\n                return this._objectHasEntries(this.message);\n            }.bind(this));\n\n            this.renderedTemplate = ko.pureComputed(function () {\n                const templateVariables = {\n                    message: {\n                        text: this.message.text,\n                        differences: this.message.differences\n                    },\n                    address: this.address()\n                };\n\n                for (let index = 0,length = this.message.differences.length;index < length;++index) {\n                    if (this.message.differences[index].type === 'street') {\n                        templateVariables.warning = validationMessages.streetAddressUpdateWarning;\n                        break;\n                    }\n                }\n\n                return this.templateRenderer.render(templateVariables);\n            }.bind(this));\n\n            return this._super();\n        },\n\n\n        /**\n         * Sets a success message\n         *\n         * @param {String} text\n         * @param {Object} differences\n         */\n        setSuccessMessage: function (text, differences) {\n            this.setMessage(0, 'message success', text, differences || []);\n        },\n\n        /**\n         * Sets a warning message\n         *\n         * @param {String} text\n         * @param {Object} differences\n         * @param {CleanAddress} address\n         */\n        setWarningMessage: function (text, differences, address) {\n            this.address(address || {});\n            this.setMessage(1, 'message warning', text, differences || []);\n        },\n\n        /**\n         * Sets a message\n         *\n         * @param {Integer} type\n         * @param {String} cssClass\n         * @param {String} text\n         * @param {Object} differences\n         */\n        setMessage: function (type, cssClass, text, differences) {\n            this.message = {\n                type: type,\n                text: text,\n                class: cssClass || '',\n                differences: differences || []\n            };\n        },\n\n        /**\n         * Returns if message exists\n         *\n         * @returns {Boolean}\n         */\n        hasMessage: function () {\n            return ko.computed(function () {\n                return this._objectHasEntries(this.message);\n            }.bind(this));\n        },\n\n        /**\n         * Returns message\n         *\n         * {Object}\n         */\n        clear: function () {\n            this.message = {};\n        },\n\n        /**\n         * Return whether or not the object has any entries\n         *\n         * Object.entries is not supported by IE11 or Opera Mini.\n         * Writing a quick method to serve the same purpose was easier than\n         * importing a shim.\n         *\n         * @param {Object} object\n         * @returns {boolean}\n         * @private\n         */\n        _objectHasEntries: function(object) {\n            if (typeof Object.entries !== 'undefined') {\n                return Object.entries(object).length !== 0;\n            }\n            for (let key in object) {\n                if (object.hasOwnProperty(key)) {\n                    return true;\n                }\n            }\n        },\n    });\n});\n","Vertex_AddressValidation/js/view/customer/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiRegistry',\n    'uiComponent',\n    'Vertex_AddressValidation/js/validation-messages',\n    'Vertex_AddressValidation/js/action/address-validation-request',\n    'Vertex_AddressValidation/js/model/customer/address-resolver',\n    'Vertex_AddressValidation/js/view/validation-message',\n    'Vertex_AddressValidation/js/view/customer/address-form',\n    'Vertex_AddressValidation/js/model/difference-determiner'\n], function (\n    $,\n    ko,\n    registry,\n    Component,\n    validationMessages,\n    addressValidationRequest,\n    addressResolver,\n    message,\n    addressForm,\n    differenceDeterminer\n) {\n    'use strict';\n\n    var config = window.vertexAddressValidationConfig || {};\n\n    return Component.extend({\n        message: null,\n        formAddressData: null,\n        isAddressValid: false,\n        updateAddress: false,\n        addressResolver: addressResolver,\n        correctAddress: null,\n\n        initialize: function () {\n            this._super();\n\n            this.message = registry.get('addressValidationMessage');\n            addressForm.formUpdated.extend({notify: 'always'}).subscribe(this.addressUpdated.bind(this));\n\n            return this;\n        },\n\n        /**\n         * Reset validation after address update\n         */\n        addressUpdated: function () {\n            addressForm.renameSubmitButton(config.validateButtonText);\n            addressForm.hideSaveAsIsButton();\n            this.isAddressValid = false;\n            this.updateAddress = false;\n            this.message.clear();\n            this.message.showSuccessMessage = false;\n        },\n\n        /**\n         * Triggers a request to the address validation builder and adds the response\n         *\n         * @param {Object} formAddressData\n         * @returns {Object}\n         */\n        addressValidation: function (formAddressData) {\n            var deferred = $.Deferred();\n\n            if (this.isAddressValid || !this.validateCountry()) {\n                if (this.updateAddress) {\n                    this.updateVertexAddress();\n                }\n                return deferred.resolve();\n            }\n\n            this.formAddressData = formAddressData;\n            addressForm.startLoader();\n\n            addressValidationRequest(formAddressData)\n                .done(function (response) {\n                    this.isAddressValid = true;\n                    this.correctAddress = response;\n                    if (this.handleAddressDifferenceResponse(response) === true) {\n                        deferred.resolve();\n                    } else {\n                        addressForm.stopLoader();\n                    }\n                }.bind(this)).fail(function () {\n                deferred.reject();\n            }).fail(function () {\n                addressForm.stopLoader();\n            });\n\n            return deferred;\n        },\n\n        /**\n         * Check if country is used in validation\n         *\n         * @returns {boolean}\n         */\n        validateCountry: function () {\n            var countryCode = addressForm.getFieldByName('country_id').val();\n\n            return countryCode !== undefined\n                ? config.countryValidation.includes(countryCode)\n                : true;\n        },\n\n        /**\n         * Get the message with the differences\n         *\n         * @param {?CleanAddress} response\n         */\n        handleAddressDifferenceResponse: function (response) {\n            if (response === null || !Object.keys(response).length) {\n                addressForm.renameSubmitButton(config.saveAsIsButtonText);\n                this.message.setWarningMessage(validationMessages.noAddressFound);\n                return;\n            }\n\n            const differences = differenceDeterminer(this.formAddressData, response);\n\n            if (differences.length === 0 && config.showSuccessMessage) {\n                this.message.showSuccessMessage = true;\n                return true;\n            } else if (differences.length > 0) {\n                this.updateAddress = true;\n                addressForm.renameSubmitButton(config.updateButtonText);\n                addressForm.showSaveAsIsButton();\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\n            } else {\n                return true;\n            }\n        },\n\n        /**\n         * Get the update message\n         */\n        updateVertexAddress: function () {\n            addressForm.updateAddress(differenceDeterminer(this.formAddressData, this.correctAddress));\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\n\n            if (config.showSuccessMessage) {\n                this.message.showSuccessMessage = true;\n            }\n        }\n    });\n});\n","Vertex_AddressValidation/js/view/customer/address-form.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'underscore',\n    'Vertex_AddressValidation/js/model/customer/address-resolver'\n], function ($, ko, _, addressResolver) {\n    'use strict';\n\n    const config = window.vertexAddressValidationConfig || {};\n\n    return {\n        form: {},\n        button: {},\n        saveAsIsButton: {},\n        formUpdated: ko.observable(false),\n        isSaveAsIs: false,\n\n        /**\n         * Initialize address form object\n         *\n         * @param {Object} form\n         * @param {Object} button\n         */\n        initialize: function (form, button) {\n            var self = this,\n                fieldsToValidate = _.clone(addressResolver.addressFieldsForValidation);\n\n            this.form = form || {};\n            this.button = button || {};\n\n            fieldsToValidate.push('country_id');\n            fieldsToValidate.forEach(function (name) {\n                self.getFieldByName(name).on('input', function () {\n                    self.formUpdated(true);\n                });\n            });\n        },\n\n        /**\n         * Return jQuery object by name\n         *\n         * @param {String} name\n         */\n        getFieldByName: function (name) {\n            return this.form.find('[name=%s]'.replace('%s', name));\n        },\n\n        /**\n         * Rename form button value\n         *\n         * @param {String} value\n         */\n        renameSubmitButton: function (value, button) {\n            var button = button || this.button;\n            var buttonValue = $(button.html()).html(value);\n            button.html(buttonValue).attr('title', value);\n        },\n\n        /**\n         * Show 'Save As Is' button\n         */\n        showSaveAsIsButton: function () {\n            if (!_.isEmpty(this.saveAsIsButton)) {\n                this.saveAsIsButton.show();\n                return;\n            }\n\n            this.saveAsIsButton = $('<button/>', {\n                text: config.saveAsIsButtonText || '',\n                class: 'action save vertex-secondary',\n                'data-action': 'save-as-is-address',\n                click: function () {\n                    this.isSaveAsIs = true;\n                }.bind(this)\n            });\n\n            this.saveAsIsButton.insertAfter(this.button);\n        },\n\n        /**\n         * Hide 'Save As Is' button\n         */\n        hideSaveAsIsButton: function () {\n            if (!_.isEmpty(this.saveAsIsButton)) {\n                this.saveAsIsButton.hide();\n            }\n        },\n\n        /**\n         * Disable form submit buttons\n         */\n        disableSubmitButtons: function () {\n            this.button.attr('disabled', true);\n\n            if (!_.isEmpty(this.saveAsIsButton)) {\n                this.saveAsIsButton.attr('disabled', true);\n            }\n        },\n\n        /**\n         * Retrieves form address and converts it to customer address\n         *\n         * @returns {UncleanAddress}\n         */\n        getAddress: function () {\n            const address = {},\n                city = this.form.find('input[name=\"city\"]').val(),\n                streetAddress = this.form.find('input[name=\"street[]\"]')\n                    .map(function (index, element) {\n                        return $(element).val();\n                    })\n                    .toArray()\n                    .filter(function (value) {\n                        return value.length > 0;\n                    }),\n                mainDivisionValue = this.form.find('select[name=\"region_id\"]').val(),\n                mainDivision = this.form.find('select[name=\"region_id\"] option[value=\"' + mainDivisionValue + '\"]').text(),\n                postalCode = this.form.find('input[name=\"postcode\"]').val(),\n                country = this.form.find('select[name=\"country_id\"]').val();\n\n            address.street_address = streetAddress;\n            if (city.length > 0) {\n                address.city = city;\n            }\n            if (mainDivisionValue.length > 0) {\n                address.main_division = mainDivision;\n            }\n            if (postalCode.length > 0) {\n                address.postal_code = postalCode;\n            }\n            address.country = country;\n\n            return address;\n        },\n\n        updateAddress: function (differences) {\n            for (let index = 0, length = differences.length;index < length;++index) {\n                let difference = differences[index];\n                switch (difference.type) {\n                    case 'street':\n                        this.form.find('input[name=\"street[]\"]').val('');\n                        for (\n                            let streetIndex = 0, streetLength = difference.rawValue.length;\n                            streetIndex < streetLength;\n                            ++streetIndex\n                        ) {\n                            $(this.form.find('input[name=\"street[]\"]')[streetIndex])\n                                .val(difference.rawValue[streetIndex])\n                                .trigger('change')\n                                .trigger('blur');\n                        }\n                        break;\n                    case 'city':\n                        this.form.find('input[name=\"city\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                    case 'region':\n                        this.form.find('select[name=\"region_id\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                    case 'postcode':\n                        this.form.find('input[name=\"postcode\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                    case 'country':\n                        this.form.find('select[name=\"country_id\"]')\n                            .val(difference.rawValue)\n                            .trigger('change')\n                            .trigger('blur');\n                        break;\n                }\n            }\n        },\n\n        /**\n         * Start loader\n         */\n        startLoader: function () {\n            $('body').trigger('processStart');\n        },\n\n        /**\n         * Stop loader\n         */\n        stopLoader: function () {\n            $('body').trigger('processStop');\n        }\n    };\n});\n","Vertex_AddressValidation/js/view/checkout/billing/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'Vertex_AddressValidation/js/view/checkout/shipping/address-validation',\n    'Vertex_AddressValidation/js/model/checkout/billing/address-resolver',\n    'Magento_Checkout/js/checkout-data',\n    'uiRegistry'\n], function (\n    Component,\n    addressResolver,\n    checkoutData,\n    registry\n) {\n    'use strict';\n\n    return Component.extend({\n        resolver: addressResolver,\n\n        /**\n         * @returns {Object}\n         */\n        getFormData: function () {\n            const formData = checkoutData.getBillingAddressFromData(),\n                checkoutProvider = registry.get('checkoutProvider');\n\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\n                    return obj.value === formData.region_id;\n                });\n                if (region && region.label) {\n                    formData.region = region.label;\n                }\n            }\n\n            return formData;\n        }\n    });\n});\n","Vertex_AddressValidation/js/view/checkout/shipping/address-validation.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'jquery',\n    'uiRegistry',\n    'uiComponent',\n    'Vertex_AddressValidation/js/action/address-validation-request',\n    'Vertex_AddressValidation/js/model/checkout/shipping/address-resolver',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'Magento_Checkout/js/checkout-data',\n    'Magento_Checkout/js/model/error-processor',\n    'Magento_Ui/js/model/messageList',\n    'Vertex_AddressValidation/js/validation-messages',\n    'Vertex_AddressValidation/js/action/convert-quote-address',\n    'Vertex_AddressValidation/js/action/build-quote-address',\n    'Vertex_AddressValidation/js/model/difference-determiner'\n], function (\n    $,\n    registry,\n    Component,\n    addressValidationRequest,\n    addressResolver,\n    fullScreenLoader,\n    checkoutData,\n    errorProcessor,\n    messageContainer,\n    validationMessages,\n    convertQuoteAddress,\n    buildQuoteAddress,\n    differenceDeterminer\n) {\n    'use strict';\n\n    return Component.extend({\n        validationConfig: window.checkoutConfig.vertexAddressValidationConfig || {},\n        resolver: addressResolver,\n        isAddressValid: false,\n        message: null,\n        defaults: {\n            listens: {\n                addressData: 'addressUpdated'\n            },\n            imports: {\n                addressData: '${ $.provider }:shippingAddress'\n            }\n        },\n\n        /**\n         * Reset validation after address update\n         */\n        addressUpdated: function () {\n            this.isAddressValid = false;\n            this.updateAddress = false;\n\n            if (this.message) {\n                this.message.clear();\n                this.message.showSuccessMessage = false;\n            }\n        },\n\n        /**\n         * @returns {Object}\n         */\n        initialize: function () {\n            this._super();\n            this.message = registry.get(this.parentName);\n\n            return this;\n        },\n\n        /**\n         * @returns {Object}\n         */\n        getFormData: function () {\n            const formData = checkoutData.getShippingAddressFromData(),\n                checkoutProvider = registry.get('checkoutProvider');\n\n            if (checkoutProvider && checkoutProvider.dictionaries && checkoutProvider.dictionaries.region_id) {\n                const region = registry.get('checkoutProvider').dictionaries.region_id.find(function (obj) {\n                    return obj.value === formData.region_id;\n                });\n                if (region && region.label) {\n                    formData.region = region.label;\n                }\n            }\n\n            return formData;\n        },\n\n        /**\n         * Triggers a request to the address validation builder and adds the response\n         */\n        addressValidation: function () {\n            var deferred = $.Deferred();\n            this.isAddressValid = false;\n            fullScreenLoader.startLoader();\n\n            addressValidationRequest(convertQuoteAddress(this.getFormData()))\n                .done(function (response) {\n                    this.isAddressValid = true;\n                    if (this.handleAddressDifferenceResponse(response) === true) {\n                        deferred.resolve();\n                    }\n                }.bind(this)).fail(function (response) {\n                errorProcessor.process(response, messageContainer);\n            }).always(function () {\n                fullScreenLoader.stopLoader();\n            });\n\n            return deferred;\n        },\n\n        /**\n         * Get the message with the differences\n         *\n         * @param {?CleanAddress} response\n         */\n        handleAddressDifferenceResponse: function (response) {\n            if (response === null || !Object.keys(response).length) {\n                this.message.setWarningMessage(validationMessages.noAddressFound);\n                return;\n            }\n\n            this.resolver.responseAddressData = buildQuoteAddress(response);\n\n            const differences = differenceDeterminer(convertQuoteAddress(this.getFormData()), response),\n                showSuccessMessage = this.validationConfig.showValidationSuccessMessage || false;\n\n            if (differences.length === 0 && showSuccessMessage) {\n                this.message.setSuccessMessage(validationMessages.noChangesNecessary);\n            } else if (differences.length > 0) {\n                this.message.setWarningMessage(validationMessages.changesFound, differences, response);\n            } else {\n                return true;\n            }\n        },\n\n        /**\n         * Get the update message\n         */\n        updateVertexAddress: function () {\n            this.resolver.resolveAddressUpdate();\n\n            this.message.setSuccessMessage(validationMessages.addressUpdated);\n            this.isAddressValid = true;\n        }\n    });\n});\n","Vertex_AddressValidation/js/action/build-quote-address.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([], function () {\n    'use strict';\n\n    /**\n     * Convert a Cleansed Address to a Magento Quote Address object\n     *\n     * @param {CleanAddress} address\n     * @returns {Object} quoteAddress\n     */\n    return function (address) {\n        return {\n            street: address.street_address,\n            city: address.city,\n            region: address.region_name,\n            region_id: address.region_id,\n            postcode: address.postal_code,\n            country_id: address.country_code\n        }\n    }\n})\n","Vertex_AddressValidation/js/action/convert-quote-address.js":"/*\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine(['uiRegistry'], function (registry) {\n    'use strict';\n\n    /**\n     * Convert a Magento Quote or Customer Address to an unclean address\n     *\n     * In most instances, the caller will need to set the region property on the address object.\n     *\n     * @param {Object} address\n     * @returns {UncleanAddress}\n     */\n    return function (address) {\n        const streetAddress = [];\n\n        for (let i in address.street) {\n            if (!address.street.hasOwnProperty(i)) {\n                continue;\n            }\n            if (address.street[i].length > 0) {\n                streetAddress.push(address.street[i]);\n            }\n        }\n\n        let countryId;\n        if (typeof address.countryId !== 'undefined') {\n            countryId = address.countryId;\n        } else if (typeof address.country_id !== 'undefined') {\n            countryId = address.country_id;\n        }\n\n        return {\n            street_address: streetAddress,\n            city: address.city,\n            main_division: address.region,\n            postal_code: address.postcode,\n            country: countryId\n        };\n    };\n});\n","Vertex_AddressValidation/js/action/address-validation-request.js":"/**\n * @copyright  Vertex. All rights reserved.  https://www.vertexinc.com/\n * @author     Mediotype                     https://www.mediotype.com/\n */\n\ndefine([\n    'mage/storage',\n    'Vertex_AddressValidation/js/model/url-builder'\n], function (\n    storage,\n    urlBuilder\n) {\n    'use strict';\n\n    /**\n     * Cleanse an Address\n     *\n     * @param {UncleanAddress} address\n     */\n    return function (address) {\n        let url = '/address/cleanse';\n        const params = {address: address};\n\n        if (window.checkoutConfig && window.checkoutConfig.isCustomerLoggedIn === false) {\n            url = '/guest-address/cleanse';\n            params.cartId = window.checkoutConfig.quoteId;\n        }\n\n        return storage.post(\n            urlBuilder.createUrl(url, {}),\n            JSON.stringify(params)\n        );\n    };\n});\n","Magento_SalesRule/js/form/element/coupon-type.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/element/select'\n], function (_, uiRegistry, select) {\n    'use strict';\n\n    return select.extend({\n\n        /**\n         * Hide fields on coupon tab\n         */\n        onUpdate: function () {\n\n            /* eslint-disable eqeqeq */\n            if (this.value() != this.displayOnlyForCouponType) {\n                uiRegistry.get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation').checked(false);\n            }\n\n            this.enableDisableFields();\n        },\n\n        /**\n         * Enable/disable fields on Coupons tab\n         */\n        enableDisableFields: function () {\n            var selector,\n                isUseAutoGenerationChecked,\n                couponType,\n                disableAuto;\n\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\n                    '[id=sales-rule-form-tab-coupons] button';\n            isUseAutoGenerationChecked = uiRegistry\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\n                    .checked();\n            couponType = uiRegistry\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\n                .value();\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\n            _.each(\n                document.querySelectorAll(selector),\n                function (element) {\n                    element.disabled = !disableAuto;\n                }\n            );\n        }\n    });\n});\n","Magento_SalesRule/js/form/element/manage-coupon-codes.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'underscore',\n    'uiRegistry',\n    'Magento_Ui/js/form/components/fieldset',\n    'Magento_Ui/js/lib/view/utils/async'\n], function (_, uiRegistry, fieldset, async) {\n    'use strict';\n\n    return fieldset.extend({\n\n        /*eslint-disable no-unused-vars*/\n        /**\n         * Initialize element\n         *\n         * @returns {Abstract} Chainable\n         */\n        initialize: function (elems, position) {\n            var obj = this;\n\n            this._super();\n\n            async.async('#sales-rule-form-tab-coupons', document.getElementById('container'), function (node) {\n                var useAutoGeneration = uiRegistry.get(\n                    'sales_rule_form.sales_rule_form.rule_information.use_auto_generation'\n                );\n\n                useAutoGeneration.on('checked', function () {\n                    obj.enableDisableFields();\n                });\n                obj.enableDisableFields();\n            });\n\n            return this;\n        },\n\n        /*eslint-enable no-unused-vars*/\n        /*eslint-disable lines-around-comment*/\n\n        /**\n         * Enable/disable fields on Coupons tab\n         */\n        enableDisableFields: function () {\n            var selector,\n                isUseAutoGenerationChecked,\n                couponType,\n                disableAuto;\n\n            selector = '[id=sales-rule-form-tab-coupons] input, [id=sales-rule-form-tab-coupons] select, ' +\n                    '[id=sales-rule-form-tab-coupons] button';\n            isUseAutoGenerationChecked = uiRegistry\n                    .get('sales_rule_form.sales_rule_form.rule_information.use_auto_generation')\n                    .checked();\n            couponType = uiRegistry\n                .get('sales_rule_form.sales_rule_form.rule_information.coupon_type')\n                .value();\n            /**\n             * \\Magento\\Rule\\Model\\AbstractModel::COUPON_TYPE_AUTO\n             */\n            disableAuto = couponType === 3 || isUseAutoGenerationChecked;\n            _.each(\n                document.querySelectorAll(selector),\n                function (element) {\n                    element.disabled = !disableAuto;\n                }\n            );\n        }\n    });\n});\n","Magento_SalesRule/js/model/place-order-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/utils/wrapper',\n    'Magento_Checkout/js/model/quote',\n    'Magento_SalesRule/js/model/coupon',\n    'Magento_Checkout/js/action/get-totals'\n], function ($, wrapper, quote, coupon, getTotalsAction) {\n    'use strict';\n\n    return function (placeOrderAction) {\n        return wrapper.wrap(placeOrderAction, function (originalAction, paymentData, messageContainer) {\n            var result;\n\n            $.when(\n                result = originalAction(paymentData, messageContainer)\n            ).fail(\n                function () {\n                    var deferred = $.Deferred(),\n\n                        /**\n                         * Update coupon form\n                         */\n                        updateCouponCallback = function () {\n                            if (quote.totals() && !quote.totals()['coupon_code']) {\n                                coupon.setCouponCode('');\n                                coupon.setIsApplied(false);\n                            }\n                        };\n\n                    getTotalsAction([], deferred);\n                    $.when(deferred).done(updateCouponCallback);\n                }\n            );\n\n            return result;\n        });\n    };\n});\n","Magento_SalesRule/js/model/coupon.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/**\n * Coupon model.\n */\ndefine([\n    'ko',\n    'domReady!'\n], function (ko) {\n    'use strict';\n\n    var couponCode = ko.observable(null),\n        isApplied = ko.observable(null);\n\n    return {\n        couponCode: couponCode,\n        isApplied: isApplied,\n\n        /**\n         * @return {*}\n         */\n        getCouponCode: function () {\n            return couponCode;\n        },\n\n        /**\n         * @return {Boolean}\n         */\n        getIsApplied: function () {\n            return isApplied;\n        },\n\n        /**\n         * @param {*} couponCodeValue\n         */\n        setCouponCode: function (couponCodeValue) {\n            couponCode(couponCodeValue);\n        },\n\n        /**\n         * @param {Boolean} isAppliedValue\n         */\n        setIsApplied: function (isAppliedValue) {\n            isApplied(isAppliedValue);\n        }\n    };\n});\n","Magento_SalesRule/js/model/shipping-save-processor-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'mage/utils/wrapper',\n    'Magento_Checkout/js/model/quote',\n    'Magento_SalesRule/js/model/coupon'\n], function (wrapper, quote, coupon) {\n    'use strict';\n\n    return function (shippingSaveProcessor) {\n        shippingSaveProcessor.saveShippingInformation = wrapper.wrapSuper(\n            shippingSaveProcessor.saveShippingInformation,\n            function (type) {\n                var updateCouponCallback;\n\n                /**\n                 * Update coupon form\n                 */\n                updateCouponCallback = function () {\n                    if (quote.totals() && !quote.totals()['coupon_code']) {\n                        coupon.setCouponCode('');\n                        coupon.setIsApplied(false);\n                    }\n                };\n\n                return this._super(type).done(updateCouponCallback);\n            }\n        );\n\n        return shippingSaveProcessor;\n    };\n});\n","Magento_SalesRule/js/model/payment/discount-messages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/model/messages'\n], function (Messages) {\n    'use strict';\n\n    return new Messages();\n});\n","Magento_SalesRule/js/view/payment/discount.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'ko',\n    'uiComponent',\n    'Magento_Checkout/js/model/quote',\n    'Magento_SalesRule/js/action/set-coupon-code',\n    'Magento_SalesRule/js/action/cancel-coupon',\n    'Magento_SalesRule/js/model/coupon'\n], function ($, ko, Component, quote, setCouponCodeAction, cancelCouponAction, coupon) {\n    'use strict';\n\n    var totals = quote.getTotals(),\n        couponCode = coupon.getCouponCode(),\n        isApplied = coupon.getIsApplied();\n\n    if (totals()) {\n        couponCode(totals()['coupon_code']);\n    }\n    isApplied(couponCode() != null);\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_SalesRule/payment/discount'\n        },\n        couponCode: couponCode,\n\n        /**\n         * Applied flag\n         */\n        isApplied: isApplied,\n\n        /**\n         * Coupon code application procedure\n         */\n        apply: function () {\n            if (this.validate()) {\n                setCouponCodeAction(couponCode(), isApplied);\n            }\n        },\n\n        /**\n         * Cancel using coupon\n         */\n        cancel: function () {\n            if (this.validate()) {\n                couponCode('');\n                cancelCouponAction(isApplied);\n            }\n        },\n\n        /**\n         * Coupon form validation\n         *\n         * @returns {Boolean}\n         */\n        validate: function () {\n            var form = '#discount-form';\n\n            return $(form).validation() && $(form).validation('isValid');\n        }\n    });\n});\n","Magento_SalesRule/js/view/payment/captcha.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n        'Magento_Captcha/js/view/checkout/defaultCaptcha',\n        'Magento_Captcha/js/model/captchaList',\n        'Magento_SalesRule/js/action/set-coupon-code',\n        'Magento_SalesRule/js/action/cancel-coupon',\n        'Magento_Checkout/js/model/quote',\n        'ko'\n    ],\n    function (defaultCaptcha, captchaList, setCouponCodeAction, cancelCouponAction, quote, ko) {\n        'use strict';\n\n        var totals = quote.getTotals(),\n            couponCode = ko.observable(null),\n            isApplied;\n\n        if (totals()) {\n            couponCode(totals()['coupon_code']);\n        }\n        //Captcha can only be required for adding a coupon so we need to know if one was added already.\n        isApplied = ko.observable(couponCode() != null);\n\n        return defaultCaptcha.extend({\n            /** @inheritdoc */\n            initialize: function () {\n                var self = this,\n                    currentCaptcha;\n\n                this._super();\n                //Getting coupon captcha model.\n                currentCaptcha = captchaList.getCaptchaByFormId(this.formId);\n\n                if (currentCaptcha != null) {\n                    if (!isApplied()) {\n                        //Show captcha if we don't have a coupon applied.\n                        currentCaptcha.setIsVisible(true);\n                    }\n                    this.setCurrentCaptcha(currentCaptcha);\n                    //Add captcha code to coupon-apply request.\n                    setCouponCodeAction.registerDataModifier(function (headers) {\n                        if (self.isRequired()) {\n                            headers['X-Captcha'] = self.captchaValue()();\n                        }\n                    });\n                    //Refresh captcha after failed request.\n                    setCouponCodeAction.registerFailCallback(function () {\n                        if (self.isRequired()) {\n                            self.refresh();\n                        }\n                    });\n                    //Hide captcha when a coupon has been applied.\n                    setCouponCodeAction.registerSuccessCallback(function () {\n                        self.setIsVisible(false);\n                    });\n                    //Show captcha again if it was canceled.\n                    cancelCouponAction.registerSuccessCallback(function () {\n                        if (self.isRequired()) {\n                            self.setIsVisible(true);\n                        }\n                    });\n                }\n            }\n        });\n    });\n","Magento_SalesRule/js/view/payment/discount-messages.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Ui/js/view/messages',\n    '../../model/payment/discount-messages'\n], function (Component, messageContainer) {\n    'use strict';\n\n    return Component.extend({\n        /** @inheritdoc */\n        initialize: function (config) {\n            return this._super(config, messageContainer);\n        }\n    });\n});\n","Magento_SalesRule/js/view/summary/discount.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_Checkout/js/view/summary/abstract-total',\n    'Magento_Checkout/js/model/quote'\n], function (Component, quote) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_SalesRule/summary/discount'\n        },\n        totals: quote.getTotals(),\n\n        /**\n         * @return {*|Boolean}\n         */\n        isDisplayed: function () {\n            return this.isFullMode() && this.getPureValue() != 0; //eslint-disable-line eqeqeq\n        },\n\n        /**\n         * @return {*}\n         */\n        getCouponCode: function () {\n            if (!this.totals()) {\n                return null;\n            }\n\n            return this.totals()['coupon_code'];\n        },\n\n        /**\n         * @return {*}\n         */\n        getCouponLabel: function () {\n            if (!this.totals()) {\n                return null;\n            }\n\n            return this.totals()['coupon_label'];\n        },\n\n        /**\n         * Get discount title\n         *\n         * @returns {null|String}\n         */\n        getTitle: function () {\n            var discountSegments;\n\n            if (!this.totals()) {\n                return null;\n            }\n\n            discountSegments = this.totals()['total_segments'].filter(function (segment) {\n                return segment.code.indexOf('discount') !== -1;\n            });\n\n            return discountSegments.length ? discountSegments[0].title : null;\n        },\n\n        /**\n         * @return {Number}\n         */\n        getPureValue: function () {\n            var price = 0;\n\n            if (this.totals() && this.totals()['discount_amount']) {\n                price = parseFloat(this.totals()['discount_amount']);\n            }\n\n            return price;\n        },\n\n        /**\n         * @return {*|String}\n         */\n        getValue: function () {\n            return this.getFormattedPrice(this.getPureValue());\n        }\n    });\n});\n","Magento_SalesRule/js/view/cart/totals/discount.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'Magento_SalesRule/js/view/summary/discount'\n], function (Component) {\n    'use strict';\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_SalesRule/cart/totals/discount'\n        },\n\n        /**\n         * @override\n         *\n         * @returns {Boolean}\n         */\n        isDisplayed: function () {\n            return this.getPureValue() != 0; //eslint-disable-line eqeqeq\n        }\n    });\n});\n","Magento_SalesRule/js/action/select-payment-method-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/utils/wrapper',\n    'Magento_Checkout/js/model/quote',\n    'Magento_SalesRule/js/model/payment/discount-messages',\n    'Magento_Checkout/js/action/set-payment-information-extended',\n    'Magento_Checkout/js/action/get-totals',\n    'Magento_SalesRule/js/model/coupon'\n], function ($, wrapper, quote, messageContainer, setPaymentInformationExtended, getTotalsAction, coupon) {\n    'use strict';\n\n    return function (selectPaymentMethodAction) {\n\n        return wrapper.wrap(selectPaymentMethodAction, function (originalSelectPaymentMethodAction, paymentMethod) {\n\n            originalSelectPaymentMethodAction(paymentMethod);\n\n            if (paymentMethod === null) {\n                return;\n            }\n\n            $.when(\n                setPaymentInformationExtended(\n                    messageContainer,\n                    {\n                        method: paymentMethod.method\n                    },\n                    true\n                )\n            ).done(\n                function () {\n                    var deferred = $.Deferred(),\n\n                        /**\n                         * Update coupon form.\n                         */\n                        updateCouponCallback = function () {\n                            if (quote.totals() && !quote.totals()['coupon_code']) {\n                                coupon.setCouponCode('');\n                                coupon.setIsApplied(false);\n                            }\n                        };\n\n                    getTotalsAction([], deferred);\n                    $.when(deferred).done(updateCouponCallback);\n                }\n            );\n        });\n    };\n\n});\n","Magento_SalesRule/js/action/cancel-coupon.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Customer store credit(balance) application\n */\ndefine([\n    'jquery',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Checkout/js/model/resource-url-manager',\n    'Magento_Checkout/js/model/error-processor',\n    'Magento_SalesRule/js/model/payment/discount-messages',\n    'mage/storage',\n    'Magento_Checkout/js/action/get-payment-information',\n    'Magento_Checkout/js/model/totals',\n    'mage/translate',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'Magento_Checkout/js/action/recollect-shipping-rates'\n], function ($, quote, urlManager, errorProcessor, messageContainer, storage, getPaymentInformationAction, totals, $t,\n  fullScreenLoader, recollectShippingRates\n) {\n    'use strict';\n\n    var successCallbacks = [],\n        action,\n        callSuccessCallbacks;\n\n    /**\n     * Execute callbacks when a coupon is successfully canceled.\n     */\n    callSuccessCallbacks = function () {\n        successCallbacks.forEach(function (callback) {\n            callback();\n        });\n    };\n\n    /**\n     * Cancel applied coupon.\n     *\n     * @param {Boolean} isApplied\n     * @returns {Deferred}\n     */\n    action =  function (isApplied) {\n        var quoteId = quote.getQuoteId(),\n            url = urlManager.getCancelCouponUrl(quoteId),\n            message = $t('Your coupon was successfully removed.');\n\n        messageContainer.clear();\n        fullScreenLoader.startLoader();\n\n        return storage.delete(\n            url,\n            false\n        ).done(function () {\n            var deferred = $.Deferred();\n\n            totals.isLoading(true);\n            recollectShippingRates();\n            getPaymentInformationAction(deferred);\n            $.when(deferred).done(function () {\n                isApplied(false);\n                totals.isLoading(false);\n                fullScreenLoader.stopLoader();\n                //Allowing to tap into coupon-cancel process.\n                callSuccessCallbacks();\n            });\n            messageContainer.addSuccessMessage({\n                'message': message\n            });\n        }).fail(function (response) {\n            totals.isLoading(false);\n            fullScreenLoader.stopLoader();\n            errorProcessor.process(response, messageContainer);\n        });\n    };\n\n    /**\n     * Callback for when the cancel-coupon process is finished.\n     *\n     * @param {Function} callback\n     */\n    action.registerSuccessCallback = function (callback) {\n        successCallbacks.push(callback);\n    };\n\n    return action;\n});\n","Magento_SalesRule/js/action/set-coupon-code.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * Customer store credit(balance) application\n */\ndefine([\n    'ko',\n    'jquery',\n    'Magento_Checkout/js/model/quote',\n    'Magento_Checkout/js/model/resource-url-manager',\n    'Magento_Checkout/js/model/error-processor',\n    'Magento_SalesRule/js/model/payment/discount-messages',\n    'mage/storage',\n    'mage/translate',\n    'Magento_Checkout/js/action/get-payment-information',\n    'Magento_Checkout/js/model/totals',\n    'Magento_Checkout/js/model/full-screen-loader',\n    'Magento_Checkout/js/action/recollect-shipping-rates'\n], function (ko, $, quote, urlManager, errorProcessor, messageContainer, storage, $t, getPaymentInformationAction,\n    totals, fullScreenLoader, recollectShippingRates\n) {\n    'use strict';\n\n    var dataModifiers = [],\n        successCallbacks = [],\n        failCallbacks = [],\n        action;\n\n    /**\n     * Apply provided coupon.\n     *\n     * @param {String} couponCode\n     * @param {Boolean}isApplied\n     * @returns {Deferred}\n     */\n    action = function (couponCode, isApplied) {\n        var quoteId = quote.getQuoteId(),\n            url = urlManager.getApplyCouponUrl(couponCode, quoteId),\n            message = $t('Your coupon was successfully applied.'),\n            data = {},\n            headers = {};\n\n        //Allowing to modify coupon-apply request\n        dataModifiers.forEach(function (modifier) {\n            modifier(headers, data);\n        });\n        fullScreenLoader.startLoader();\n\n        return storage.put(\n            url,\n            data,\n            false,\n            null,\n            headers\n        ).done(function (response) {\n            var deferred;\n\n            if (response) {\n                deferred = $.Deferred();\n\n                isApplied(true);\n                totals.isLoading(true);\n                recollectShippingRates();\n                getPaymentInformationAction(deferred);\n                $.when(deferred).done(function () {\n                    fullScreenLoader.stopLoader();\n                    totals.isLoading(false);\n                });\n                messageContainer.addSuccessMessage({\n                    'message': message\n                });\n                //Allowing to tap into apply-coupon process.\n                successCallbacks.forEach(function (callback) {\n                    callback(response);\n                });\n            }\n        }).fail(function (response) {\n            fullScreenLoader.stopLoader();\n            totals.isLoading(false);\n            errorProcessor.process(response, messageContainer);\n            //Allowing to tap into apply-coupon process.\n            failCallbacks.forEach(function (callback) {\n                callback(response);\n            });\n        });\n    };\n\n    /**\n     * Modifying data to be sent.\n     *\n     * @param {Function} modifier\n     */\n    action.registerDataModifier = function (modifier) {\n        dataModifiers.push(modifier);\n    };\n\n    /**\n     * When successfully added a coupon.\n     *\n     * @param {Function} callback\n     */\n    action.registerSuccessCallback = function (callback) {\n        successCallbacks.push(callback);\n    };\n\n    /**\n     * When failed to add a coupon.\n     *\n     * @param {Function} callback\n     */\n    action.registerFailCallback = function (callback) {\n        failCallbacks.push(callback);\n    };\n\n    return action;\n});\n","knockoutjs/knockout-fast-foreach.js":"/*!\n  Knockout Fast Foreach v0.4.1 (2015-07-17T14:06:15.974Z)\n  By: Brian M Hunt (C) 2015\n  License: MIT\n\n  Adds `fastForEach` to `ko.bindingHandlers`.\n*/\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['knockout'], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('knockout'));\n  } else {\n    root.KnockoutFastForeach = factory(root.ko);\n  }\n}(this, function (ko) {\n  \"use strict\";\n// index.js\n// --------\n// Fast For Each\n//\n// Employing sound techniques to make a faster Knockout foreach binding.\n// --------\n\n//      Utilities\n\n// from https://github.com/jonschlinkert/is-plain-object\nfunction isPlainObject(o) {\n  return !!o && typeof o === 'object' && o.constructor === Object;\n}\n\n// From knockout/src/virtualElements.js\nvar commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\nvar startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\nvar supportsDocumentFragment = document && typeof document.createDocumentFragment === \"function\";\nfunction isVirtualNode(node) {\n  return (node.nodeType === 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n}\n\n\n// Get a copy of the (possibly virtual) child nodes of the given element,\n// put them into a container, then empty the given node.\nfunction makeTemplateNode(sourceNode) {\n  var container = document.createElement(\"div\");\n  var parentNode;\n  if (sourceNode.content) {\n    // For e.g. <template> tags\n    parentNode = sourceNode.content;\n  } else if (sourceNode.tagName === 'SCRIPT') {\n    parentNode = document.createElement(\"div\");\n    parentNode.innerHTML = sourceNode.text;\n  } else {\n    // Anything else e.g. <div>\n    parentNode = sourceNode;\n  }\n  ko.utils.arrayForEach(ko.virtualElements.childNodes(parentNode), function (child) {\n    // FIXME - This cloneNode could be expensive; we may prefer to iterate over the\n    // parentNode children in reverse (so as not to foul the indexes as childNodes are\n    // removed from parentNode when inserted into the container)\n    if (child) {\n      container.insertBefore(child.cloneNode(true), null);\n    }\n  });\n  return container;\n}\n\nfunction insertAllAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode) {\n  var frag, len, i;\n  // poor man's node and array check, should be enough for this\n  if (typeof nodeOrNodeArrayToInsert.nodeType !== \"undefined\" && typeof nodeOrNodeArrayToInsert.length === \"undefined\") {\n    throw new Error(\"Expected a single node or a node array\");\n  }\n\n  if (typeof nodeOrNodeArrayToInsert.nodeType !== \"undefined\") {\n    ko.virtualElements.insertAfter(containerNode, nodeOrNodeArrayToInsert, insertAfterNode);\n    return;\n  }\n\n  if (nodeOrNodeArrayToInsert.length === 1) {\n    ko.virtualElements.insertAfter(containerNode, nodeOrNodeArrayToInsert[0], insertAfterNode);\n    return;\n  }\n\n  if (supportsDocumentFragment) {\n    frag = document.createDocumentFragment();\n\n    for (i = 0, len = nodeOrNodeArrayToInsert.length; i !== len; ++i) {\n      frag.appendChild(nodeOrNodeArrayToInsert[i]);\n    }\n    ko.virtualElements.insertAfter(containerNode, frag, insertAfterNode);\n  } else {\n    // Nodes are inserted in reverse order - pushed down immediately after\n    // the last node for the previous item or as the first node of element.\n    for (i = nodeOrNodeArrayToInsert.length - 1; i >= 0; --i) {\n      var child = nodeOrNodeArrayToInsert[i];\n      if (!child) {\n        return;\n      }\n      ko.virtualElements.insertAfter(containerNode, child, insertAfterNode);\n    }\n  }\n}\n\n// Mimic a KO change item 'add'\nfunction valueToChangeAddItem(value, index) {\n  return {\n    status: 'added',\n    value: value,\n    index: index\n  };\n}\n\nfunction isAdditionAdjacentToLast(changeIndex, arrayChanges) {\n  return changeIndex > 0 &&\n    changeIndex < arrayChanges.length &&\n    arrayChanges[changeIndex].status === \"added\" &&\n    arrayChanges[changeIndex - 1].status === \"added\" &&\n    arrayChanges[changeIndex - 1].index === arrayChanges[changeIndex].index - 1;\n}\n\nfunction FastForEach(spec) {\n  this.element = spec.element;\n  this.container = isVirtualNode(this.element) ?\n                   this.element.parentNode : this.element;\n  this.$context = spec.$context;\n  this.data = spec.data;\n  this.as = spec.as;\n  this.noContext = spec.noContext;\n  this.templateNode = makeTemplateNode(\n    spec.name ? document.getElementById(spec.name).cloneNode(true) : spec.element\n  );\n  this.afterQueueFlush = spec.afterQueueFlush;\n  this.beforeQueueFlush = spec.beforeQueueFlush;\n  this.changeQueue = [];\n  this.lastNodesList = [];\n  this.indexesToDelete = [];\n  this.rendering_queued = false;\n\n  // Remove existing content.\n  ko.virtualElements.emptyNode(this.element);\n\n  // Prime content\n  var primeData = ko.unwrap(this.data);\n  if (primeData.map) {\n    this.onArrayChange(primeData.map(valueToChangeAddItem));\n  }\n\n  // Watch for changes\n  if (ko.isObservable(this.data)) {\n    if (!this.data.indexOf) {\n      // Make sure the observable is trackable.\n      this.data = this.data.extend({trackArrayChanges: true});\n    }\n    this.changeSubs = this.data.subscribe(this.onArrayChange, this, 'arrayChange');\n  }\n}\n\n\nFastForEach.animateFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame ||\n  window.mozRequestAnimationFrame || window.msRequestAnimationFrame ||\n  function(cb) { return window.setTimeout(cb, 1000 / 60); };\n\n\nFastForEach.prototype.dispose = function () {\n  if (this.changeSubs) {\n    this.changeSubs.dispose();\n  }\n};\n\n\n// If the array changes we register the change.\nFastForEach.prototype.onArrayChange = function (changeSet) {\n  var self = this;\n  var changeMap = {\n    added: [],\n    deleted: []\n  };\n  for (var i = 0, len = changeSet.length; i < len; i++) {\n    // the change is appended to a last change info object when both are 'added' and have indexes next to each other\n    // here I presume that ko is sending changes in monotonic order (in index variable) which happens to be true, tested with push and splice with multiple pushed values\n    if (isAdditionAdjacentToLast(i, changeSet)) {\n      var batchValues = changeMap.added[changeMap.added.length - 1].values;\n      if (!batchValues) {\n        // transform the last addition into a batch addition object\n        var lastAddition = changeMap.added.pop();\n        var batchAddition = {\n          isBatch: true,\n          status: 'added',\n          index: lastAddition.index,\n          values: [lastAddition.value]\n        };\n        batchValues = batchAddition.values;\n        changeMap.added.push(batchAddition);\n      }\n      batchValues.push(changeSet[i].value);\n    } else {\n      changeMap[changeSet[i].status].push(changeSet[i]);\n    }\n  }\n  if (changeMap.deleted.length > 0) {\n    this.changeQueue.push.apply(this.changeQueue, changeMap.deleted);\n    this.changeQueue.push({status: 'clearDeletedIndexes'});\n  }\n  this.changeQueue.push.apply(this.changeQueue, changeMap.added);\n  // Once a change is registered, the ticking count-down starts for the processQueue.\n  if (this.changeQueue.length > 0 && !this.rendering_queued) {\n    this.rendering_queued = true;\n    FastForEach.animateFrame.call(window, function () { self.processQueue(); });\n  }\n};\n\n\n// Reflect all the changes in the queue in the DOM, then wipe the queue.\nFastForEach.prototype.processQueue = function () {\n  var self = this;\n\n  // Callback so folks can do things before the queue flush.\n  if (typeof this.beforeQueueFlush === 'function') {\n    this.beforeQueueFlush(this.changeQueue);\n  }\n\n  ko.utils.arrayForEach(this.changeQueue, function (changeItem) {\n    // console.log(self.data(), \"CI\", JSON.stringify(changeItem, null, 2), JSON.stringify($(self.element).text()))\n    self[changeItem.status](changeItem);\n    // console.log(\"  ==> \", JSON.stringify($(self.element).text()))\n  });\n  this.rendering_queued = false;\n  // Callback so folks can do things.\n  if (typeof this.afterQueueFlush === 'function') {\n    this.afterQueueFlush(this.changeQueue);\n  }\n  this.changeQueue = [];\n};\n\n\n// Process a changeItem with {status: 'added', ...}\nFastForEach.prototype.added = function (changeItem) {\n  var index = changeItem.index;\n  var valuesToAdd = changeItem.isBatch ? changeItem.values : [changeItem.value];\n  var referenceElement = this.lastNodesList[index - 1] || null;\n  // gather all childnodes for a possible batch insertion\n  var allChildNodes = [];\n\n  for (var i = 0, len = valuesToAdd.length; i < len; ++i) {\n    var templateClone = this.templateNode.cloneNode(true);\n    var childContext;\n\n    if (this.noContext) {\n      childContext = this.$context.extend({\n        '$item': valuesToAdd[i]\n      });\n    } else {\n      childContext = this.$context.createChildContext(valuesToAdd[i], this.as || null);\n    }\n\n    // apply bindings first, and then process child nodes, because bindings can add childnodes\n    ko.applyBindingsToDescendants(childContext, templateClone);\n\n    var childNodes = ko.virtualElements.childNodes(templateClone);\n    // Note discussion at https://github.com/angular/angular.js/issues/7851\n    allChildNodes.push.apply(allChildNodes, Array.prototype.slice.call(childNodes));\n    this.lastNodesList.splice(index + i, 0, childNodes[childNodes.length - 1]);\n  }\n\n  insertAllAfter(this.element, allChildNodes, referenceElement);\n};\n\n\n// Process a changeItem with {status: 'deleted', ...}\nFastForEach.prototype.deleted = function (changeItem) {\n  var index = changeItem.index;\n  var ptr = this.lastNodesList[index],\n      // We use this.element because that will be the last previous node\n      // for virtual element lists.\n      lastNode = this.lastNodesList[index - 1] || this.element;\n  do {\n    ptr = ptr.previousSibling;\n    ko.removeNode((ptr && ptr.nextSibling) || ko.virtualElements.firstChild(this.element));\n  } while (ptr && ptr !== lastNode);\n  // The \"last node\" in the DOM from which we begin our delets of the next adjacent node is\n  // now the sibling that preceded the first node of this item.\n  this.lastNodesList[index] = this.lastNodesList[index - 1];\n  this.indexesToDelete.push(index);\n};\n\n\n// We batch our deletion of item indexes in our parallel array.\n// See brianmhunt/knockout-fast-foreach#6/#8\nFastForEach.prototype.clearDeletedIndexes = function () {\n  // We iterate in reverse on the presumption (following the unit tests) that KO's diff engine\n  // processes diffs (esp. deletes) monotonically ascending i.e. from index 0 -> N.\n  for (var i = this.indexesToDelete.length - 1; i >= 0; --i) {\n    this.lastNodesList.splice(this.indexesToDelete[i], 1);\n  }\n  this.indexesToDelete = [];\n};\n\n\nko.bindingHandlers.fastForEach = {\n  // Valid valueAccessors:\n  //    []\n  //    ko.observable([])\n  //    ko.observableArray([])\n  //    ko.computed\n  //    {data: array, name: string, as: string}\n  init: function init(element, valueAccessor, bindings, vm, context) {\n    var value = valueAccessor(),\n        ffe;\n    if (isPlainObject(value)) {\n      value.element = value.element || element;\n      value.$context = context;\n      ffe = new FastForEach(value);\n    } else {\n      ffe = new FastForEach({\n        element: element,\n        data: ko.unwrap(context.$rawData) === value ? context.$rawData : value,\n        $context: context\n      });\n    }\n    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {\n      ffe.dispose();\n    });\n    return {controlsDescendantBindings: true};\n  },\n\n  // Export for testing, debugging, and overloading.\n  FastForEach: FastForEach\n};\n\nko.virtualElements.allowedBindings.fastForEach = true;\n}));","knockoutjs/knockout.js":"/*!\n * Knockout JavaScript library v3.4.2\n * (c) The Knockout.js team - http://knockoutjs.com/\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\n */\n\n(function(){\nvar DEBUG=true;\n(function(undefined){\n    // (0, eval)('this') is a robust way of getting a reference to the global object\n    // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\n    var window = this || (0, eval)('this'),\n        document = window['document'],\n        navigator = window['navigator'],\n        jQueryInstance = window[\"jQuery\"],\n        JSON = window[\"JSON\"];\n(function(factory) {\n    // Support three module loading scenarios\n    if (typeof define === 'function' && define['amd']) {\n        // [1] AMD anonymous module\n        define(['exports', 'require'], factory);\n    } else if (typeof exports === 'object' && typeof module === 'object') {\n        // [2] CommonJS/Node.js\n        factory(module['exports'] || exports);  // module.exports is for Node.js\n    } else {\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\n        factory(window['ko'] = {});\n    }\n}(function(koExports, amdRequire){\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\nvar ko = typeof koExports !== 'undefined' ? koExports : {};\n// Google Closure Compiler helpers (used only to make the minified file smaller)\nko.exportSymbol = function(koPath, object) {\n    var tokens = koPath.split(\".\");\n\n    // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\n    // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\n    var target = ko;\n\n    for (var i = 0; i < tokens.length - 1; i++)\n        target = target[tokens[i]];\n    target[tokens[tokens.length - 1]] = object;\n};\nko.exportProperty = function(owner, publicName, object) {\n    owner[publicName] = object;\n};\nko.version = \"3.4.2\";\n\nko.exportSymbol('version', ko.version);\n// For any options that may affect various areas of Knockout and aren't directly associated with data binding.\nko.options = {\n    'deferUpdates': false,\n    'useOnlyNativeEvents': false\n};\n\n//ko.exportSymbol('options', ko.options);   // 'options' isn't minified\nko.utils = (function () {\n    function objectForEach(obj, action) {\n        for (var prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                action(prop, obj[prop]);\n            }\n        }\n    }\n\n    function extend(target, source) {\n        if (source) {\n            for(var prop in source) {\n                if(source.hasOwnProperty(prop)) {\n                    target[prop] = source[prop];\n                }\n            }\n        }\n        return target;\n    }\n\n    function setPrototypeOf(obj, proto) {\n        obj.__proto__ = proto;\n        return obj;\n    }\n\n    var canSetPrototype = ({ __proto__: [] } instanceof Array);\n    var canUseSymbols = !DEBUG && typeof Symbol === 'function';\n\n    // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\n    var knownEvents = {}, knownEventTypesByEventName = {};\n    var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\n    knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\n    knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\n    objectForEach(knownEvents, function(eventType, knownEventsForType) {\n        if (knownEventsForType.length) {\n            for (var i = 0, j = knownEventsForType.length; i < j; i++)\n                knownEventTypesByEventName[knownEventsForType[i]] = eventType;\n        }\n    });\n    var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\n\n    // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\n    // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\n    // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\n    // If there is a future need to detect specific versions of IE10+, we will amend this.\n    var ieVersion = document && (function() {\n        var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\n\n        // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\n        while (\n            div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\n            iElems[0]\n        ) {}\n        return version > 4 ? version : undefined;\n    }());\n    var isIe6 = ieVersion === 6,\n        isIe7 = ieVersion === 7;\n\n    function isClickOnCheckableElement(element, eventType) {\n        if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\n        if (eventType.toLowerCase() != \"click\") return false;\n        var inputType = element.type;\n        return (inputType == \"checkbox\") || (inputType == \"radio\");\n    }\n\n    // For details on the pattern for changing node classes\n    // see: https://github.com/knockout/knockout/issues/1597\n    var cssClassNameRegex = /\\S+/g;\n\n    function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\n        var addOrRemoveFn;\n        if (classNames) {\n            if (typeof node.classList === 'object') {\n                addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\n                ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\n                    addOrRemoveFn.call(node.classList, className);\n                });\n            } else if (typeof node.className['baseVal'] === 'string') {\n                // SVG tag .classNames is an SVGAnimatedString instance\n                toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\n            } else {\n                // node.className ought to be a string.\n                toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\n            }\n        }\n    }\n\n    function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\n        // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\n        var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\n        ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\n            ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\n        });\n        obj[prop] = currentClassNames.join(\" \");\n    }\n\n    return {\n        fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\n\n        arrayForEach: function (array, action) {\n            for (var i = 0, j = array.length; i < j; i++)\n                action(array[i], i);\n        },\n\n        arrayIndexOf: function (array, item) {\n            if (typeof Array.prototype.indexOf == \"function\")\n                return Array.prototype.indexOf.call(array, item);\n            for (var i = 0, j = array.length; i < j; i++)\n                if (array[i] === item)\n                    return i;\n            return -1;\n        },\n\n        arrayFirst: function (array, predicate, predicateOwner) {\n            for (var i = 0, j = array.length; i < j; i++)\n                if (predicate.call(predicateOwner, array[i], i))\n                    return array[i];\n            return null;\n        },\n\n        arrayRemoveItem: function (array, itemToRemove) {\n            var index = ko.utils.arrayIndexOf(array, itemToRemove);\n            if (index > 0) {\n                array.splice(index, 1);\n            }\n            else if (index === 0) {\n                array.shift();\n            }\n        },\n\n        arrayGetDistinctValues: function (array) {\n            array = array || [];\n            var result = [];\n            for (var i = 0, j = array.length; i < j; i++) {\n                if (ko.utils.arrayIndexOf(result, array[i]) < 0)\n                    result.push(array[i]);\n            }\n            return result;\n        },\n\n        arrayMap: function (array, mapping) {\n            array = array || [];\n            var result = [];\n            for (var i = 0, j = array.length; i < j; i++)\n                result.push(mapping(array[i], i));\n            return result;\n        },\n\n        arrayFilter: function (array, predicate) {\n            array = array || [];\n            var result = [];\n            for (var i = 0, j = array.length; i < j; i++)\n                if (predicate(array[i], i))\n                    result.push(array[i]);\n            return result;\n        },\n\n        arrayPushAll: function (array, valuesToPush) {\n            if (valuesToPush instanceof Array)\n                array.push.apply(array, valuesToPush);\n            else\n                for (var i = 0, j = valuesToPush.length; i < j; i++)\n                    array.push(valuesToPush[i]);\n            return array;\n        },\n\n        addOrRemoveItem: function(array, value, included) {\n            var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\n            if (existingEntryIndex < 0) {\n                if (included)\n                    array.push(value);\n            } else {\n                if (!included)\n                    array.splice(existingEntryIndex, 1);\n            }\n        },\n\n        canSetPrototype: canSetPrototype,\n\n        extend: extend,\n\n        setPrototypeOf: setPrototypeOf,\n\n        setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\n\n        objectForEach: objectForEach,\n\n        objectMap: function(source, mapping) {\n            if (!source)\n                return source;\n            var target = {};\n            for (var prop in source) {\n                if (source.hasOwnProperty(prop)) {\n                    target[prop] = mapping(source[prop], prop, source);\n                }\n            }\n            return target;\n        },\n\n        emptyDomNode: function (domNode) {\n            while (domNode.firstChild) {\n                ko.removeNode(domNode.firstChild);\n            }\n        },\n\n        moveCleanedNodesToContainerElement: function(nodes) {\n            // Ensure it's a real array, as we're about to reparent the nodes and\n            // we don't want the underlying collection to change while we're doing that.\n            var nodesArray = ko.utils.makeArray(nodes);\n            var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\n\n            var container = templateDocument.createElement('div');\n            for (var i = 0, j = nodesArray.length; i < j; i++) {\n                container.appendChild(ko.cleanNode(nodesArray[i]));\n            }\n            return container;\n        },\n\n        cloneNodes: function (nodesArray, shouldCleanNodes) {\n            for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\n                var clonedNode = nodesArray[i].cloneNode(true);\n                newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\n            }\n            return newNodesArray;\n        },\n\n        setDomNodeChildren: function (domNode, childNodes) {\n            ko.utils.emptyDomNode(domNode);\n            if (childNodes) {\n                for (var i = 0, j = childNodes.length; i < j; i++)\n                    domNode.appendChild(childNodes[i]);\n            }\n        },\n\n        replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\n            var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\n            if (nodesToReplaceArray.length > 0) {\n                var insertionPoint = nodesToReplaceArray[0];\n                var parent = insertionPoint.parentNode;\n                for (var i = 0, j = newNodesArray.length; i < j; i++)\n                    parent.insertBefore(newNodesArray[i], insertionPoint);\n                for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\n                    ko.removeNode(nodesToReplaceArray[i]);\n                }\n            }\n        },\n\n        fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\n            // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\n            // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\n            // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\n            // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\n            // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\n            //\n            // Rules:\n            //   [A] Any leading nodes that have been removed should be ignored\n            //       These most likely correspond to memoization nodes that were already removed during binding\n            //       See https://github.com/knockout/knockout/pull/440\n            //   [B] Any trailing nodes that have been remove should be ignored\n            //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\n            //       See https://github.com/knockout/knockout/pull/1903\n            //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\n            //       and include any nodes that have been inserted among the previous collection\n\n            if (continuousNodeArray.length) {\n                // The parent node can be a virtual element; so get the real parent node\n                parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\n\n                // Rule [A]\n                while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\n                    continuousNodeArray.splice(0, 1);\n\n                // Rule [B]\n                while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)\n                    continuousNodeArray.length--;\n\n                // Rule [C]\n                if (continuousNodeArray.length > 1) {\n                    var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\n                    // Replace with the actual new continuous node set\n                    continuousNodeArray.length = 0;\n                    while (current !== last) {\n                        continuousNodeArray.push(current);\n                        current = current.nextSibling;\n                    }\n                    continuousNodeArray.push(last);\n                }\n            }\n            return continuousNodeArray;\n        },\n\n        setOptionNodeSelectionState: function (optionNode, isSelected) {\n            // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\n            if (ieVersion < 7)\n                optionNode.setAttribute(\"selected\", isSelected);\n            else\n                optionNode.selected = isSelected;\n        },\n\n        stringTrim: function (string) {\n            return string === null || string === undefined ? '' :\n                string.trim ?\n                    string.trim() :\n                    string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\n        },\n\n        stringStartsWith: function (string, startsWith) {\n            string = string || \"\";\n            if (startsWith.length > string.length)\n                return false;\n            return string.substring(0, startsWith.length) === startsWith;\n        },\n\n        domNodeIsContainedBy: function (node, containedByNode) {\n            if (node === containedByNode)\n                return true;\n            if (node.nodeType === 11)\n                return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\n            if (containedByNode.contains)\n                return containedByNode.contains(node.nodeType === 3 ? node.parentNode : node);\n            if (containedByNode.compareDocumentPosition)\n                return (containedByNode.compareDocumentPosition(node) & 16) == 16;\n            while (node && node != containedByNode) {\n                node = node.parentNode;\n            }\n            return !!node;\n        },\n\n        domNodeIsAttachedToDocument: function (node) {\n            return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\n        },\n\n        anyDomNodeIsAttachedToDocument: function(nodes) {\n            return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\n        },\n\n        tagNameLower: function(element) {\n            // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\n            // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\n            // we don't need to do the .toLowerCase() as it will always be lower case anyway.\n            return element && element.tagName && element.tagName.toLowerCase();\n        },\n\n        catchFunctionErrors: function (delegate) {\n            return ko['onError'] ? function () {\n                try {\n                    return delegate.apply(this, arguments);\n                } catch (e) {\n                    ko['onError'] && ko['onError'](e);\n                    throw e;\n                }\n            } : delegate;\n        },\n\n        setTimeout: function (handler, timeout) {\n            return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\n        },\n\n        deferError: function (error) {\n            setTimeout(function () {\n                ko['onError'] && ko['onError'](error);\n                throw error;\n            }, 0);\n        },\n\n        registerEventHandler: function (element, eventType, handler) {\n            var wrappedHandler = ko.utils.catchFunctionErrors(handler);\n\n            var mustUseAttachEvent = ieVersion && eventsThatMustBeRegisteredUsingAttachEvent[eventType];\n            if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\n                jQueryInstance(element)['bind'](eventType, wrappedHandler);\n            } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\n                element.addEventListener(eventType, wrappedHandler, false);\n            else if (typeof element.attachEvent != \"undefined\") {\n                var attachEventHandler = function (event) { wrappedHandler.call(element, event); },\n                    attachEventName = \"on\" + eventType;\n                element.attachEvent(attachEventName, attachEventHandler);\n\n                // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\n                // so to avoid leaks, we have to remove them manually. See bug #856\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\n                    element.detachEvent(attachEventName, attachEventHandler);\n                });\n            } else\n                throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\n        },\n\n        triggerEvent: function (element, eventType) {\n            if (!(element && element.nodeType))\n                throw new Error(\"element must be a DOM node when calling triggerEvent\");\n\n            // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\n            // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\n            // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\n            // In both cases, we'll use the click method instead.\n            var useClickWorkaround = isClickOnCheckableElement(element, eventType);\n\n            if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\n                jQueryInstance(element)['trigger'](eventType);\n            } else if (typeof document.createEvent == \"function\") {\n                if (typeof element.dispatchEvent == \"function\") {\n                    var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\n                    var event = document.createEvent(eventCategory);\n                    event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\n                    element.dispatchEvent(event);\n                }\n                else\n                    throw new Error(\"The supplied element doesn't support dispatchEvent\");\n            } else if (useClickWorkaround && element.click) {\n                element.click();\n            } else if (typeof element.fireEvent != \"undefined\") {\n                element.fireEvent(\"on\" + eventType);\n            } else {\n                throw new Error(\"Browser doesn't support triggering events\");\n            }\n        },\n\n        unwrapObservable: function (value) {\n            return ko.isObservable(value) ? value() : value;\n        },\n\n        peekObservable: function (value) {\n            return ko.isObservable(value) ? value.peek() : value;\n        },\n\n        toggleDomNodeCssClass: toggleDomNodeCssClass,\n\n        setTextContent: function(element, textContent) {\n            var value = ko.utils.unwrapObservable(textContent);\n            if ((value === null) || (value === undefined))\n                value = \"\";\n\n            // We need there to be exactly one child: a text node.\n            // If there are no children, more than one, or if it's not a text node,\n            // we'll clear everything and create a single text node.\n            var innerTextNode = ko.virtualElements.firstChild(element);\n            if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\n                ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\n            } else {\n                innerTextNode.data = value;\n            }\n\n            ko.utils.forceRefresh(element);\n        },\n\n        setElementName: function(element, name) {\n            element.name = name;\n        },\n\n        forceRefresh: function(node) {\n            // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\n            if (ieVersion >= 9) {\n                // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\n                var elem = node.nodeType == 1 ? node : node.parentNode;\n                if (elem.style)\n                    elem.style.zoom = elem.style.zoom;\n            }\n        },\n\n        ensureSelectElementIsRenderedCorrectly: function(selectElement) {\n            // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\n            // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\n            // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\n            if (ieVersion) {\n                var originalWidth = selectElement.style.width;\n                selectElement.style.width = 0;\n                selectElement.style.width = originalWidth;\n            }\n        },\n\n        range: function (min, max) {\n            min = ko.utils.unwrapObservable(min);\n            max = ko.utils.unwrapObservable(max);\n            var result = [];\n            for (var i = min; i <= max; i++)\n                result.push(i);\n            return result;\n        },\n\n        makeArray: function(arrayLikeObject) {\n            var result = [];\n            for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\n                result.push(arrayLikeObject[i]);\n            };\n            return result;\n        },\n\n        createSymbolOrString: function(identifier) {\n            return canUseSymbols ? Symbol(identifier) : identifier;\n        },\n\n        isIe6 : isIe6,\n        isIe7 : isIe7,\n        ieVersion : ieVersion,\n\n        getFormFields: function(form, fieldName) {\n            var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\n            var isMatchingField = (typeof fieldName == 'string')\n                ? function(field) { return field.name === fieldName }\n                : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\n            var matches = [];\n            for (var i = fields.length - 1; i >= 0; i--) {\n                if (isMatchingField(fields[i]))\n                    matches.push(fields[i]);\n            };\n            return matches;\n        },\n\n        parseJson: function (jsonString) {\n            if (typeof jsonString == \"string\") {\n                jsonString = ko.utils.stringTrim(jsonString);\n                if (jsonString) {\n                    if (JSON && JSON.parse) // Use native parsing where available\n                        return JSON.parse(jsonString);\n                    return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\n                }\n            }\n            return null;\n        },\n\n        stringifyJson: function (data, replacer, space) {   // replacer and space are optional\n            if (!JSON || !JSON.stringify)\n                throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\n            return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\n        },\n\n        postJson: function (urlOrForm, data, options) {\n            options = options || {};\n            var params = options['params'] || {};\n            var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\n            var url = urlOrForm;\n\n            // If we were given a form, use its 'action' URL and pick out any requested field values\n            if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\n                var originalForm = urlOrForm;\n                url = originalForm.action;\n                for (var i = includeFields.length - 1; i >= 0; i--) {\n                    var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\n                    for (var j = fields.length - 1; j >= 0; j--)\n                        params[fields[j].name] = fields[j].value;\n                }\n            }\n\n            data = ko.utils.unwrapObservable(data);\n            var form = document.createElement(\"form\");\n            form.style.display = \"none\";\n            form.action = url;\n            form.method = \"post\";\n            for (var key in data) {\n                // Since 'data' this is a model object, we include all properties including those inherited from its prototype\n                var input = document.createElement(\"input\");\n                input.type = \"hidden\";\n                input.name = key;\n                input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\n                form.appendChild(input);\n            }\n            objectForEach(params, function(key, value) {\n                var input = document.createElement(\"input\");\n                input.type = \"hidden\";\n                input.name = key;\n                input.value = value;\n                form.appendChild(input);\n            });\n            document.body.appendChild(form);\n            options['submitter'] ? options['submitter'](form) : form.submit();\n            setTimeout(function () { form.parentNode.removeChild(form); }, 0);\n        }\n    }\n}());\n\nko.exportSymbol('utils', ko.utils);\nko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\nko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\nko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\nko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\nko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\nko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\nko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\nko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\nko.exportSymbol('utils.extend', ko.utils.extend);\nko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\nko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\nko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\nko.exportSymbol('utils.postJson', ko.utils.postJson);\nko.exportSymbol('utils.parseJson', ko.utils.parseJson);\nko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\nko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\nko.exportSymbol('utils.range', ko.utils.range);\nko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\nko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\nko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\nko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\nko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\nko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\nko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\n\nif (!Function.prototype['bind']) {\n    // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\n    // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\n    Function.prototype['bind'] = function (object) {\n        var originalFunction = this;\n        if (arguments.length === 1) {\n            return function () {\n                return originalFunction.apply(object, arguments);\n            };\n        } else {\n            var partialArgs = Array.prototype.slice.call(arguments, 1);\n            return function () {\n                var args = partialArgs.slice(0);\n                args.push.apply(args, arguments);\n                return originalFunction.apply(object, args);\n            };\n        }\n    };\n}\n\nko.utils.domData = new (function () {\n    var uniqueId = 0;\n    var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\n    var dataStore = {};\n\n    function getAll(node, createIfNotFound) {\n        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\n        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\n        if (!hasExistingDataStore) {\n            if (!createIfNotFound)\n                return undefined;\n            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\n            dataStore[dataStoreKey] = {};\n        }\n        return dataStore[dataStoreKey];\n    }\n\n    return {\n        get: function (node, key) {\n            var allDataForNode = getAll(node, false);\n            return allDataForNode === undefined ? undefined : allDataForNode[key];\n        },\n        set: function (node, key, value) {\n            if (value === undefined) {\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\n                if (getAll(node, false) === undefined)\n                    return;\n            }\n            var allDataForNode = getAll(node, true);\n            allDataForNode[key] = value;\n        },\n        clear: function (node) {\n            var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\n            if (dataStoreKey) {\n                delete dataStore[dataStoreKey];\n                node[dataStoreKeyExpandoPropertyName] = null;\n                return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\n            }\n            return false;\n        },\n\n        nextKey: function () {\n            return (uniqueId++) + dataStoreKeyExpandoPropertyName;\n        }\n    };\n})();\n\nko.exportSymbol('utils.domData', ko.utils.domData);\nko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\n\nko.utils.domNodeDisposal = new (function () {\n    var domDataKey = ko.utils.domData.nextKey();\n    var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\n    var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\n\n    function getDisposeCallbacksCollection(node, createIfNotFound) {\n        var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\n        if ((allDisposeCallbacks === undefined) && createIfNotFound) {\n            allDisposeCallbacks = [];\n            ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\n        }\n        return allDisposeCallbacks;\n    }\n    function destroyCallbacksCollection(node) {\n        ko.utils.domData.set(node, domDataKey, undefined);\n    }\n\n    function cleanSingleNode(node) {\n        // Run all the dispose callbacks\n        var callbacks = getDisposeCallbacksCollection(node, false);\n        if (callbacks) {\n            callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\n            for (var i = 0; i < callbacks.length; i++)\n                callbacks[i](node);\n        }\n\n        // Erase the DOM data\n        ko.utils.domData.clear(node);\n\n        // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\n        ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\n\n        // Clear any immediate-child comment nodes, as these wouldn't have been found by\n        // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\n        if (cleanableNodeTypesWithDescendants[node.nodeType])\n            cleanImmediateCommentTypeChildren(node);\n    }\n\n    function cleanImmediateCommentTypeChildren(nodeWithChildren) {\n        var child, nextChild = nodeWithChildren.firstChild;\n        while (child = nextChild) {\n            nextChild = child.nextSibling;\n            if (child.nodeType === 8)\n                cleanSingleNode(child);\n        }\n    }\n\n    return {\n        addDisposeCallback : function(node, callback) {\n            if (typeof callback != \"function\")\n                throw new Error(\"Callback must be a function\");\n            getDisposeCallbacksCollection(node, true).push(callback);\n        },\n\n        removeDisposeCallback : function(node, callback) {\n            var callbacksCollection = getDisposeCallbacksCollection(node, false);\n            if (callbacksCollection) {\n                ko.utils.arrayRemoveItem(callbacksCollection, callback);\n                if (callbacksCollection.length == 0)\n                    destroyCallbacksCollection(node);\n            }\n        },\n\n        cleanNode : function(node) {\n            // First clean this node, where applicable\n            if (cleanableNodeTypes[node.nodeType]) {\n                cleanSingleNode(node);\n\n                // ... then its descendants, where applicable\n                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\n                    // Clone the descendants list in case it changes during iteration\n                    var descendants = [];\n                    ko.utils.arrayPushAll(descendants, node.getElementsByTagName(\"*\"));\n                    for (var i = 0, j = descendants.length; i < j; i++)\n                        cleanSingleNode(descendants[i]);\n                }\n            }\n            return node;\n        },\n\n        removeNode : function(node) {\n            ko.cleanNode(node);\n            if (node.parentNode)\n                node.parentNode.removeChild(node);\n        },\n\n        \"cleanExternalData\" : function (node) {\n            // Special support for jQuery here because it's so commonly used.\n            // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\n            // so notify it to tear down any resources associated with the node & descendants here.\n            if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\n                jQueryInstance['cleanData']([node]);\n        }\n    };\n})();\nko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\nko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\nko.exportSymbol('cleanNode', ko.cleanNode);\nko.exportSymbol('removeNode', ko.removeNode);\nko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\nko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\nko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\n(function () {\n    var none = [0, \"\", \"\"],\n        table = [1, \"<table>\", \"</table>\"],\n        tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\n        tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n        select = [1, \"<select multiple='multiple'>\", \"</select>\"],\n        lookup = {\n            'thead': table,\n            'tbody': table,\n            'tfoot': table,\n            'tr': tbody,\n            'td': tr,\n            'th': tr,\n            'option': select,\n            'optgroup': select\n        },\n\n        // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\n        mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\n\n    function getWrap(tags) {\n        var m = tags.match(/^<([a-z]+)[ >]/);\n        return (m && lookup[m[1]]) || none;\n    }\n\n    function simpleHtmlParse(html, documentContext) {\n        documentContext || (documentContext = document);\n        var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\n\n        // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\n        // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\n\n        // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\n        // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\n        // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\n        // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\n\n        // Trim whitespace, otherwise indexOf won't work as expected\n        var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\"),\n            wrap = getWrap(tags),\n            depth = wrap[0];\n\n        // Go to html and back, then peel off extra wrappers\n        // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\n        var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\n        if (typeof windowContext['innerShiv'] == \"function\") {\n            // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\n            // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\n            // somehow shims the native APIs so it just works anyway)\n            div.appendChild(windowContext['innerShiv'](markup));\n        } else {\n            if (mayRequireCreateElementHack) {\n                // The document.createElement('my-element') trick to enable custom elements in IE6-8\n                // only works if we assign innerHTML on an element associated with that document.\n                documentContext.appendChild(div);\n            }\n\n            div.innerHTML = markup;\n\n            if (mayRequireCreateElementHack) {\n                div.parentNode.removeChild(div);\n            }\n        }\n\n        // Move to the right depth\n        while (depth--)\n            div = div.lastChild;\n\n        return ko.utils.makeArray(div.lastChild.childNodes);\n    }\n\n    function jQueryHtmlParse(html, documentContext) {\n        // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\n        if (jQueryInstance['parseHTML']) {\n            return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\n        } else {\n            // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\n            var elems = jQueryInstance['clean']([html], documentContext);\n\n            // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\n            // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\n            // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\n            if (elems && elems[0]) {\n                // Find the top-most parent element that's a direct child of a document fragment\n                var elem = elems[0];\n                while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\n                    elem = elem.parentNode;\n                // ... then detach it\n                if (elem.parentNode)\n                    elem.parentNode.removeChild(elem);\n            }\n\n            return elems;\n        }\n    }\n\n    ko.utils.parseHtmlFragment = function(html, documentContext) {\n        return jQueryInstance ?\n            jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible\n            simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\n    };\n\n    ko.utils.setHtml = function(node, html) {\n        ko.utils.emptyDomNode(node);\n\n        // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\n        html = ko.utils.unwrapObservable(html);\n\n        if ((html !== null) && (html !== undefined)) {\n            if (typeof html != 'string')\n                html = html.toString();\n\n            // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\n            // for example <tr> elements which are not normally allowed to exist on their own.\n            // If you've referenced jQuery we'll use that rather than duplicating its code.\n            if (jQueryInstance) {\n                jQueryInstance(node)['html'](html);\n            } else {\n                // ... otherwise, use KO's own parsing logic.\n                var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\n                for (var i = 0; i < parsedNodes.length; i++)\n                    node.appendChild(parsedNodes[i]);\n            }\n        }\n    };\n})();\n\nko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\nko.exportSymbol('utils.setHtml', ko.utils.setHtml);\n\nko.memoization = (function () {\n    var memos = {};\n\n    function randomMax8HexChars() {\n        return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\n    }\n    function generateRandomId() {\n        return randomMax8HexChars() + randomMax8HexChars();\n    }\n    function findMemoNodes(rootNode, appendToArray) {\n        if (!rootNode)\n            return;\n        if (rootNode.nodeType == 8) {\n            var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\n            if (memoId != null)\n                appendToArray.push({ domNode: rootNode, memoId: memoId });\n        } else if (rootNode.nodeType == 1) {\n            for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\n                findMemoNodes(childNodes[i], appendToArray);\n        }\n    }\n\n    return {\n        memoize: function (callback) {\n            if (typeof callback != \"function\")\n                throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\n            var memoId = generateRandomId();\n            memos[memoId] = callback;\n            return \"<!--[ko_memo:\" + memoId + \"]-->\";\n        },\n\n        unmemoize: function (memoId, callbackParams) {\n            var callback = memos[memoId];\n            if (callback === undefined)\n                throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\n            try {\n                callback.apply(null, callbackParams || []);\n                return true;\n            }\n            finally { delete memos[memoId]; }\n        },\n\n        unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\n            var memos = [];\n            findMemoNodes(domNode, memos);\n            for (var i = 0, j = memos.length; i < j; i++) {\n                var node = memos[i].domNode;\n                var combinedParams = [node];\n                if (extraCallbackParamsArray)\n                    ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\n                ko.memoization.unmemoize(memos[i].memoId, combinedParams);\n                node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\n                if (node.parentNode)\n                    node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\n            }\n        },\n\n        parseMemoText: function (memoText) {\n            var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\n            return match ? match[1] : null;\n        }\n    };\n})();\n\nko.exportSymbol('memoization', ko.memoization);\nko.exportSymbol('memoization.memoize', ko.memoization.memoize);\nko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\nko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\nko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\nko.tasks = (function () {\n    var scheduler,\n        taskQueue = [],\n        taskQueueLength = 0,\n        nextHandle = 1,\n        nextIndexToProcess = 0;\n\n    if (window['MutationObserver']) {\n        // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\n        // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\n        scheduler = (function (callback) {\n            var div = document.createElement(\"div\");\n            new MutationObserver(callback).observe(div, {attributes: true});\n            return function () { div.classList.toggle(\"foo\"); };\n        })(scheduledProcess);\n    } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\n        // IE 6-10\n        // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\n        scheduler = function (callback) {\n            var script = document.createElement(\"script\");\n            script.onreadystatechange = function () {\n                script.onreadystatechange = null;\n                document.documentElement.removeChild(script);\n                script = null;\n                callback();\n            };\n            document.documentElement.appendChild(script);\n        };\n    } else {\n        scheduler = function (callback) {\n            setTimeout(callback, 0);\n        };\n    }\n\n    function processTasks() {\n        if (taskQueueLength) {\n            // Each mark represents the end of a logical group of tasks and the number of these groups is\n            // limited to prevent unchecked recursion.\n            var mark = taskQueueLength, countMarks = 0;\n\n            // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\n            for (var task; nextIndexToProcess < taskQueueLength; ) {\n                if (task = taskQueue[nextIndexToProcess++]) {\n                    if (nextIndexToProcess > mark) {\n                        if (++countMarks >= 5000) {\n                            nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion\n                            ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\n                            break;\n                        }\n                        mark = taskQueueLength;\n                    }\n                    try {\n                        task();\n                    } catch (ex) {\n                        ko.utils.deferError(ex);\n                    }\n                }\n            }\n        }\n    }\n\n    function scheduledProcess() {\n        processTasks();\n\n        // Reset the queue\n        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\n    }\n\n    function scheduleTaskProcessing() {\n        ko.tasks['scheduler'](scheduledProcess);\n    }\n\n    var tasks = {\n        'scheduler': scheduler,     // Allow overriding the scheduler\n\n        schedule: function (func) {\n            if (!taskQueueLength) {\n                scheduleTaskProcessing();\n            }\n\n            taskQueue[taskQueueLength++] = func;\n            return nextHandle++;\n        },\n\n        cancel: function (handle) {\n            var index = handle - (nextHandle - taskQueueLength);\n            if (index >= nextIndexToProcess && index < taskQueueLength) {\n                taskQueue[index] = null;\n            }\n        },\n\n        // For testing only: reset the queue and return the previous queue length\n        'resetForTesting': function () {\n            var length = taskQueueLength - nextIndexToProcess;\n            nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\n            return length;\n        },\n\n        runEarly: processTasks\n    };\n\n    return tasks;\n})();\n\nko.exportSymbol('tasks', ko.tasks);\nko.exportSymbol('tasks.schedule', ko.tasks.schedule);\n//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\nko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\nko.extenders = {\n    'throttle': function(target, timeout) {\n        // Throttling means two things:\n\n        // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\n        //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\n        target['throttleEvaluation'] = timeout;\n\n        // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\n        //     so the target cannot change value synchronously or faster than a certain rate\n        var writeTimeoutInstance = null;\n        return ko.dependentObservable({\n            'read': target,\n            'write': function(value) {\n                clearTimeout(writeTimeoutInstance);\n                writeTimeoutInstance = ko.utils.setTimeout(function() {\n                    target(value);\n                }, timeout);\n            }\n        });\n    },\n\n    'rateLimit': function(target, options) {\n        var timeout, method, limitFunction;\n\n        if (typeof options == 'number') {\n            timeout = options;\n        } else {\n            timeout = options['timeout'];\n            method = options['method'];\n        }\n\n        // rateLimit supersedes deferred updates\n        target._deferUpdates = false;\n\n        limitFunction = method == 'notifyWhenChangesStop' ?  debounce : throttle;\n        target.limit(function(callback) {\n            return limitFunction(callback, timeout);\n        });\n    },\n\n    'deferred': function(target, options) {\n        if (options !== true) {\n            throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.')\n        }\n\n        if (!target._deferUpdates) {\n            target._deferUpdates = true;\n            target.limit(function (callback) {\n                var handle,\n                    ignoreUpdates = false;\n                return function () {\n                    if (!ignoreUpdates) {\n                        ko.tasks.cancel(handle);\n                        handle = ko.tasks.schedule(callback);\n\n                        try {\n                            ignoreUpdates = true;\n                            target['notifySubscribers'](undefined, 'dirty');\n                        } finally {\n                            ignoreUpdates = false;\n                        }\n                    }\n                };\n            });\n        }\n    },\n\n    'notify': function(target, notifyWhen) {\n        target[\"equalityComparer\"] = notifyWhen == \"always\" ?\n            null :  // null equalityComparer means to always notify\n            valuesArePrimitiveAndEqual;\n    }\n};\n\nvar primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\nfunction valuesArePrimitiveAndEqual(a, b) {\n    var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\n    return oldValueIsPrimitive ? (a === b) : false;\n}\n\nfunction throttle(callback, timeout) {\n    var timeoutInstance;\n    return function () {\n        if (!timeoutInstance) {\n            timeoutInstance = ko.utils.setTimeout(function () {\n                timeoutInstance = undefined;\n                callback();\n            }, timeout);\n        }\n    };\n}\n\nfunction debounce(callback, timeout) {\n    var timeoutInstance;\n    return function () {\n        clearTimeout(timeoutInstance);\n        timeoutInstance = ko.utils.setTimeout(callback, timeout);\n    };\n}\n\nfunction applyExtenders(requestedExtenders) {\n    var target = this;\n    if (requestedExtenders) {\n        ko.utils.objectForEach(requestedExtenders, function(key, value) {\n            var extenderHandler = ko.extenders[key];\n            if (typeof extenderHandler == 'function') {\n                target = extenderHandler(target, value) || target;\n            }\n        });\n    }\n    return target;\n}\n\nko.exportSymbol('extenders', ko.extenders);\n\nko.subscription = function (target, callback, disposeCallback) {\n    this._target = target;\n    this.callback = callback;\n    this.disposeCallback = disposeCallback;\n    this.isDisposed = false;\n    ko.exportProperty(this, 'dispose', this.dispose);\n};\nko.subscription.prototype.dispose = function () {\n    this.isDisposed = true;\n    this.disposeCallback();\n};\n\nko.subscribable = function () {\n    ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\n    ko_subscribable_fn.init(this);\n}\n\nvar defaultEvent = \"change\";\n\n// Moved out of \"limit\" to avoid the extra closure\nfunction limitNotifySubscribers(value, event) {\n    if (!event || event === defaultEvent) {\n        this._limitChange(value);\n    } else if (event === 'beforeChange') {\n        this._limitBeforeChange(value);\n    } else {\n        this._origNotifySubscribers(value, event);\n    }\n}\n\nvar ko_subscribable_fn = {\n    init: function(instance) {\n        instance._subscriptions = { \"change\": [] };\n        instance._versionNumber = 1;\n    },\n\n    subscribe: function (callback, callbackTarget, event) {\n        var self = this;\n\n        event = event || defaultEvent;\n        var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\n\n        var subscription = new ko.subscription(self, boundCallback, function () {\n            ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\n            if (self.afterSubscriptionRemove)\n                self.afterSubscriptionRemove(event);\n        });\n\n        if (self.beforeSubscriptionAdd)\n            self.beforeSubscriptionAdd(event);\n\n        if (!self._subscriptions[event])\n            self._subscriptions[event] = [];\n        self._subscriptions[event].push(subscription);\n\n        return subscription;\n    },\n\n    \"notifySubscribers\": function (valueToNotify, event) {\n        event = event || defaultEvent;\n        if (event === defaultEvent) {\n            this.updateVersion();\n        }\n        if (this.hasSubscriptionsForEvent(event)) {\n            var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);\n            try {\n                ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\n                for (var i = 0, subscription; subscription = subs[i]; ++i) {\n                    // In case a subscription was disposed during the arrayForEach cycle, check\n                    // for isDisposed on each subscription before invoking its callback\n                    if (!subscription.isDisposed)\n                        subscription.callback(valueToNotify);\n                }\n            } finally {\n                ko.dependencyDetection.end(); // End suppressing dependency detection\n            }\n        }\n    },\n\n    getVersion: function () {\n        return this._versionNumber;\n    },\n\n    hasChanged: function (versionToCheck) {\n        return this.getVersion() !== versionToCheck;\n    },\n\n    updateVersion: function () {\n        ++this._versionNumber;\n    },\n\n    limit: function(limitFunction) {\n        var self = this, selfIsObservable = ko.isObservable(self),\n            ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, beforeChange = 'beforeChange';\n\n        if (!self._origNotifySubscribers) {\n            self._origNotifySubscribers = self[\"notifySubscribers\"];\n            self[\"notifySubscribers\"] = limitNotifySubscribers;\n        }\n\n        var finish = limitFunction(function() {\n            self._notificationIsPending = false;\n\n            // If an observable provided a reference to itself, access it to get the latest value.\n            // This allows computed observables to delay calculating their value until needed.\n            if (selfIsObservable && pendingValue === self) {\n                pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();\n            }\n            var shouldNotify = notifyNextChange || self.isDifferent(previousValue, pendingValue);\n\n            notifyNextChange = ignoreBeforeChange = false;\n\n            if (shouldNotify) {\n                self._origNotifySubscribers(previousValue = pendingValue);\n            }\n        });\n\n        self._limitChange = function(value) {\n            self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);\n            self._notificationIsPending = ignoreBeforeChange = true;\n            pendingValue = value;\n            finish();\n        };\n        self._limitBeforeChange = function(value) {\n            if (!ignoreBeforeChange) {\n                previousValue = value;\n                self._origNotifySubscribers(value, beforeChange);\n            }\n        };\n        self._notifyNextChangeIfValueIsDifferent = function() {\n            if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {\n                notifyNextChange = true;\n            }\n        };\n    },\n\n    hasSubscriptionsForEvent: function(event) {\n        return this._subscriptions[event] && this._subscriptions[event].length;\n    },\n\n    getSubscriptionsCount: function (event) {\n        if (event) {\n            return this._subscriptions[event] && this._subscriptions[event].length || 0;\n        } else {\n            var total = 0;\n            ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\n                if (eventName !== 'dirty')\n                    total += subscriptions.length;\n            });\n            return total;\n        }\n    },\n\n    isDifferent: function(oldValue, newValue) {\n        return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\n    },\n\n    extend: applyExtenders\n};\n\nko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\nko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\nko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\n\n// For browsers that support proto assignment, we overwrite the prototype of each\n// observable instance. Since observables are functions, we need Function.prototype\n// to still be in the prototype chain.\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\n}\n\nko.subscribable['fn'] = ko_subscribable_fn;\n\n\nko.isSubscribable = function (instance) {\n    return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\n};\n\nko.exportSymbol('subscribable', ko.subscribable);\nko.exportSymbol('isSubscribable', ko.isSubscribable);\n\nko.computedContext = ko.dependencyDetection = (function () {\n    var outerFrames = [],\n        currentFrame,\n        lastId = 0;\n\n    // Return a unique ID that can be assigned to an observable for dependency tracking.\n    // Theoretically, you could eventually overflow the number storage size, resulting\n    // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\n    // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\n    // take over 285 years to reach that number.\n    // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\n    function getId() {\n        return ++lastId;\n    }\n\n    function begin(options) {\n        outerFrames.push(currentFrame);\n        currentFrame = options;\n    }\n\n    function end() {\n        currentFrame = outerFrames.pop();\n    }\n\n    return {\n        begin: begin,\n\n        end: end,\n\n        registerDependency: function (subscribable) {\n            if (currentFrame) {\n                if (!ko.isSubscribable(subscribable))\n                    throw new Error(\"Only subscribable things can act as dependencies\");\n                currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\n            }\n        },\n\n        ignore: function (callback, callbackTarget, callbackArgs) {\n            try {\n                begin();\n                return callback.apply(callbackTarget, callbackArgs || []);\n            } finally {\n                end();\n            }\n        },\n\n        getDependenciesCount: function () {\n            if (currentFrame)\n                return currentFrame.computed.getDependenciesCount();\n        },\n\n        isInitial: function() {\n            if (currentFrame)\n                return currentFrame.isInitial;\n        }\n    };\n})();\n\nko.exportSymbol('computedContext', ko.computedContext);\nko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\nko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\n\nko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\nvar observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\n\nko.observable = function (initialValue) {\n    function observable() {\n        if (arguments.length > 0) {\n            // Write\n\n            // Ignore writes if the value hasn't changed\n            if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\n                observable.valueWillMutate();\n                observable[observableLatestValue] = arguments[0];\n                observable.valueHasMutated();\n            }\n            return this; // Permits chained assignments\n        }\n        else {\n            // Read\n            ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\n            return observable[observableLatestValue];\n        }\n    }\n\n    observable[observableLatestValue] = initialValue;\n\n    // Inherit from 'subscribable'\n    if (!ko.utils.canSetPrototype) {\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\n        ko.utils.extend(observable, ko.subscribable['fn']);\n    }\n    ko.subscribable['fn'].init(observable);\n\n    // Inherit from 'observable'\n    ko.utils.setPrototypeOfOrExtend(observable, observableFn);\n\n    if (ko.options['deferUpdates']) {\n        ko.extenders['deferred'](observable, true);\n    }\n\n    return observable;\n}\n\n// Define prototype for observables\nvar observableFn = {\n    'equalityComparer': valuesArePrimitiveAndEqual,\n    peek: function() { return this[observableLatestValue]; },\n    valueHasMutated: function () { this['notifySubscribers'](this[observableLatestValue]); },\n    valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }\n};\n\n// Note that for browsers that don't support proto assignment, the\n// inheritance chain is created manually in the ko.observable constructor\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\n}\n\nvar protoProperty = ko.observable.protoProperty = '__ko_proto__';\nobservableFn[protoProperty] = ko.observable;\n\nko.hasPrototype = function(instance, prototype) {\n    if ((instance === null) || (instance === undefined) || (instance[protoProperty] === undefined)) return false;\n    if (instance[protoProperty] === prototype) return true;\n    return ko.hasPrototype(instance[protoProperty], prototype); // Walk the prototype chain\n};\n\nko.isObservable = function (instance) {\n    return ko.hasPrototype(instance, ko.observable);\n}\nko.isWriteableObservable = function (instance) {\n    // Observable\n    if ((typeof instance == 'function') && instance[protoProperty] === ko.observable)\n        return true;\n    // Writeable dependent observable\n    if ((typeof instance == 'function') && (instance[protoProperty] === ko.dependentObservable) && (instance.hasWriteFunction))\n        return true;\n    // Anything else\n    return false;\n}\n\nko.exportSymbol('observable', ko.observable);\nko.exportSymbol('isObservable', ko.isObservable);\nko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\nko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\nko.exportSymbol('observable.fn', observableFn);\nko.exportProperty(observableFn, 'peek', observableFn.peek);\nko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\nko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\nko.observableArray = function (initialValues) {\n    initialValues = initialValues || [];\n\n    if (typeof initialValues != 'object' || !('length' in initialValues))\n        throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\n\n    var result = ko.observable(initialValues);\n    ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\n    return result.extend({'trackArrayChanges':true});\n};\n\nko.observableArray['fn'] = {\n    'remove': function (valueOrPredicate) {\n        var underlyingArray = this.peek();\n        var removedValues = [];\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\n        for (var i = 0; i < underlyingArray.length; i++) {\n            var value = underlyingArray[i];\n            if (predicate(value)) {\n                if (removedValues.length === 0) {\n                    this.valueWillMutate();\n                }\n                removedValues.push(value);\n                underlyingArray.splice(i, 1);\n                i--;\n            }\n        }\n        if (removedValues.length) {\n            this.valueHasMutated();\n        }\n        return removedValues;\n    },\n\n    'removeAll': function (arrayOfValues) {\n        // If you passed zero args, we remove everything\n        if (arrayOfValues === undefined) {\n            var underlyingArray = this.peek();\n            var allValues = underlyingArray.slice(0);\n            this.valueWillMutate();\n            underlyingArray.splice(0, underlyingArray.length);\n            this.valueHasMutated();\n            return allValues;\n        }\n        // If you passed an arg, we interpret it as an array of entries to remove\n        if (!arrayOfValues)\n            return [];\n        return this['remove'](function (value) {\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\n        });\n    },\n\n    'destroy': function (valueOrPredicate) {\n        var underlyingArray = this.peek();\n        var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\n        this.valueWillMutate();\n        for (var i = underlyingArray.length - 1; i >= 0; i--) {\n            var value = underlyingArray[i];\n            if (predicate(value))\n                underlyingArray[i][\"_destroy\"] = true;\n        }\n        this.valueHasMutated();\n    },\n\n    'destroyAll': function (arrayOfValues) {\n        // If you passed zero args, we destroy everything\n        if (arrayOfValues === undefined)\n            return this['destroy'](function() { return true });\n\n        // If you passed an arg, we interpret it as an array of entries to destroy\n        if (!arrayOfValues)\n            return [];\n        return this['destroy'](function (value) {\n            return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\n        });\n    },\n\n    'indexOf': function (item) {\n        var underlyingArray = this();\n        return ko.utils.arrayIndexOf(underlyingArray, item);\n    },\n\n    'replace': function(oldItem, newItem) {\n        var index = this['indexOf'](oldItem);\n        if (index >= 0) {\n            this.valueWillMutate();\n            this.peek()[index] = newItem;\n            this.valueHasMutated();\n        }\n    }\n};\n\n// Note that for browsers that don't support proto assignment, the\n// inheritance chain is created manually in the ko.observableArray constructor\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\n}\n\n// Populate ko.observableArray.fn with read/write functions from native arrays\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\nko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\n    ko.observableArray['fn'][methodName] = function () {\n        // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\n        // (for consistency with mutating regular observables)\n        var underlyingArray = this.peek();\n        this.valueWillMutate();\n        this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\n        var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\n        this.valueHasMutated();\n        // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\n        return methodCallResult === underlyingArray ? this : methodCallResult;\n    };\n});\n\n// Populate ko.observableArray.fn with read-only functions from native arrays\nko.utils.arrayForEach([\"slice\"], function (methodName) {\n    ko.observableArray['fn'][methodName] = function () {\n        var underlyingArray = this();\n        return underlyingArray[methodName].apply(underlyingArray, arguments);\n    };\n});\n\nko.exportSymbol('observableArray', ko.observableArray);\nvar arrayChangeEventName = 'arrayChange';\nko.extenders['trackArrayChanges'] = function(target, options) {\n    // Use the provided options--each call to trackArrayChanges overwrites the previously set options\n    target.compareArrayOptions = {};\n    if (options && typeof options == \"object\") {\n        ko.utils.extend(target.compareArrayOptions, options);\n    }\n    target.compareArrayOptions['sparse'] = true;\n\n    // Only modify the target observable once\n    if (target.cacheDiffForKnownOperation) {\n        return;\n    }\n    var trackingChanges = false,\n        cachedDiff = null,\n        arrayChangeSubscription,\n        pendingNotifications = 0,\n        underlyingNotifySubscribersFunction,\n        underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\n        underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\n\n    // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\n    target.beforeSubscriptionAdd = function (event) {\n        if (underlyingBeforeSubscriptionAddFunction)\n            underlyingBeforeSubscriptionAddFunction.call(target, event);\n        if (event === arrayChangeEventName) {\n            trackChanges();\n        }\n    };\n    // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\n    target.afterSubscriptionRemove = function (event) {\n        if (underlyingAfterSubscriptionRemoveFunction)\n            underlyingAfterSubscriptionRemoveFunction.call(target, event);\n        if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\n            if (underlyingNotifySubscribersFunction) {\n                target['notifySubscribers'] = underlyingNotifySubscribersFunction;\n                underlyingNotifySubscribersFunction = undefined;\n            }\n            arrayChangeSubscription.dispose();\n            trackingChanges = false;\n        }\n    };\n\n    function trackChanges() {\n        // Calling 'trackChanges' multiple times is the same as calling it once\n        if (trackingChanges) {\n            return;\n        }\n\n        trackingChanges = true;\n\n        // Intercept \"notifySubscribers\" to track how many times it was called.\n        underlyingNotifySubscribersFunction = target['notifySubscribers'];\n        target['notifySubscribers'] = function(valueToNotify, event) {\n            if (!event || event === defaultEvent) {\n                ++pendingNotifications;\n            }\n            return underlyingNotifySubscribersFunction.apply(this, arguments);\n        };\n\n        // Each time the array changes value, capture a clone so that on the next\n        // change it's possible to produce a diff\n        var previousContents = [].concat(target.peek() || []);\n        cachedDiff = null;\n        arrayChangeSubscription = target.subscribe(function(currentContents) {\n            // Make a copy of the current contents and ensure it's an array\n            currentContents = [].concat(currentContents || []);\n\n            // Compute the diff and issue notifications, but only if someone is listening\n            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\n                var changes = getChanges(previousContents, currentContents);\n            }\n\n            // Eliminate references to the old, removed items, so they can be GCed\n            previousContents = currentContents;\n            cachedDiff = null;\n            pendingNotifications = 0;\n\n            if (changes && changes.length) {\n                target['notifySubscribers'](changes, arrayChangeEventName);\n            }\n        });\n    }\n\n    function getChanges(previousContents, currentContents) {\n        // We try to re-use cached diffs.\n        // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\n        // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\n        // notifications are issued immediately so we wouldn't be queueing up more than one.\n        if (!cachedDiff || pendingNotifications > 1) {\n            cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\n        }\n\n        return cachedDiff;\n    }\n\n    target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\n        // Only run if we're currently tracking changes for this observable array\n        // and there aren't any pending deferred notifications.\n        if (!trackingChanges || pendingNotifications) {\n            return;\n        }\n        var diff = [],\n            arrayLength = rawArray.length,\n            argsLength = args.length,\n            offset = 0;\n\n        function pushDiff(status, value, index) {\n            return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\n        }\n        switch (operationName) {\n            case 'push':\n                offset = arrayLength;\n            case 'unshift':\n                for (var index = 0; index < argsLength; index++) {\n                    pushDiff('added', args[index], offset + index);\n                }\n                break;\n\n            case 'pop':\n                offset = arrayLength - 1;\n            case 'shift':\n                if (arrayLength) {\n                    pushDiff('deleted', rawArray[offset], offset);\n                }\n                break;\n\n            case 'splice':\n                // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\n                var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\n                    endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\n                    endAddIndex = startIndex + argsLength - 2,\n                    endIndex = Math.max(endDeleteIndex, endAddIndex),\n                    additions = [], deletions = [];\n                for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\n                    if (index < endDeleteIndex)\n                        deletions.push(pushDiff('deleted', rawArray[index], index));\n                    if (index < endAddIndex)\n                        additions.push(pushDiff('added', args[argsIndex], index));\n                }\n                ko.utils.findMovesInArrayComparison(deletions, additions);\n                break;\n\n            default:\n                return;\n        }\n        cachedDiff = diff;\n    };\n};\nvar computedState = ko.utils.createSymbolOrString('_state');\n\nko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\n    if (typeof evaluatorFunctionOrOptions === \"object\") {\n        // Single-parameter syntax - everything is on this \"options\" param\n        options = evaluatorFunctionOrOptions;\n    } else {\n        // Multi-parameter syntax - construct the options according to the params passed\n        options = options || {};\n        if (evaluatorFunctionOrOptions) {\n            options[\"read\"] = evaluatorFunctionOrOptions;\n        }\n    }\n    if (typeof options[\"read\"] != \"function\")\n        throw Error(\"Pass a function that returns the value of the ko.computed\");\n\n    var writeFunction = options[\"write\"];\n    var state = {\n        latestValue: undefined,\n        isStale: true,\n        isDirty: true,\n        isBeingEvaluated: false,\n        suppressDisposalUntilDisposeWhenReturnsFalse: false,\n        isDisposed: false,\n        pure: false,\n        isSleeping: false,\n        readFunction: options[\"read\"],\n        evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\n        disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\n        disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\n        domNodeDisposalCallback: null,\n        dependencyTracking: {},\n        dependenciesCount: 0,\n        evaluationTimeoutInstance: null\n    };\n\n    function computedObservable() {\n        if (arguments.length > 0) {\n            if (typeof writeFunction === \"function\") {\n                // Writing a value\n                writeFunction.apply(state.evaluatorFunctionTarget, arguments);\n            } else {\n                throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\n            }\n            return this; // Permits chained assignments\n        } else {\n            // Reading the value\n            ko.dependencyDetection.registerDependency(computedObservable);\n            if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {\n                computedObservable.evaluateImmediate();\n            }\n            return state.latestValue;\n        }\n    }\n\n    computedObservable[computedState] = state;\n    computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\n\n    // Inherit from 'subscribable'\n    if (!ko.utils.canSetPrototype) {\n        // 'subscribable' won't be on the prototype chain unless we put it there directly\n        ko.utils.extend(computedObservable, ko.subscribable['fn']);\n    }\n    ko.subscribable['fn'].init(computedObservable);\n\n    // Inherit from 'computed'\n    ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\n\n    if (options['pure']) {\n        state.pure = true;\n        state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription\n        ko.utils.extend(computedObservable, pureComputedOverrides);\n    } else if (options['deferEvaluation']) {\n        ko.utils.extend(computedObservable, deferEvaluationOverrides);\n    }\n\n    if (ko.options['deferUpdates']) {\n        ko.extenders['deferred'](computedObservable, true);\n    }\n\n    if (DEBUG) {\n        // #1731 - Aid debugging by exposing the computed's options\n        computedObservable[\"_options\"] = options;\n    }\n\n    if (state.disposeWhenNodeIsRemoved) {\n        // Since this computed is associated with a DOM node, and we don't want to dispose the computed\n        // until the DOM node is *removed* from the document (as opposed to never having been in the document),\n        // we'll prevent disposal until \"disposeWhen\" first returns false.\n        state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\n\n        // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\n        // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\n        // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\n        // be documented or used by application code, as it's likely to change in a future version of KO.\n        if (!state.disposeWhenNodeIsRemoved.nodeType) {\n            state.disposeWhenNodeIsRemoved = null;\n        }\n    }\n\n    // Evaluate, unless sleeping or deferEvaluation is true\n    if (!state.isSleeping && !options['deferEvaluation']) {\n        computedObservable.evaluateImmediate();\n    }\n\n    // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\n    // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\n    if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\n        ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\n            computedObservable.dispose();\n        });\n    }\n\n    return computedObservable;\n};\n\n// Utility function that disposes a given dependencyTracking entry\nfunction computedDisposeDependencyCallback(id, entryToDispose) {\n    if (entryToDispose !== null && entryToDispose.dispose) {\n        entryToDispose.dispose();\n    }\n}\n\n// This function gets called each time a dependency is detected while evaluating a computed.\n// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\nfunction computedBeginDependencyDetectionCallback(subscribable, id) {\n    var computedObservable = this.computedObservable,\n        state = computedObservable[computedState];\n    if (!state.isDisposed) {\n        if (this.disposalCount && this.disposalCandidates[id]) {\n            // Don't want to dispose this subscription, as it's still being used\n            computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\n            this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\n            --this.disposalCount;\n        } else if (!state.dependencyTracking[id]) {\n            // Brand new subscription - add it\n            computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\n        }\n        // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)\n        if (subscribable._notificationIsPending) {\n            subscribable._notifyNextChangeIfValueIsDifferent();\n        }\n    }\n}\n\nvar computedFn = {\n    \"equalityComparer\": valuesArePrimitiveAndEqual,\n    getDependenciesCount: function () {\n        return this[computedState].dependenciesCount;\n    },\n    addDependencyTracking: function (id, target, trackingObj) {\n        if (this[computedState].pure && target === this) {\n            throw Error(\"A 'pure' computed must not be called recursively\");\n        }\n\n        this[computedState].dependencyTracking[id] = trackingObj;\n        trackingObj._order = this[computedState].dependenciesCount++;\n        trackingObj._version = target.getVersion();\n    },\n    haveDependenciesChanged: function () {\n        var id, dependency, dependencyTracking = this[computedState].dependencyTracking;\n        for (id in dependencyTracking) {\n            if (dependencyTracking.hasOwnProperty(id)) {\n                dependency = dependencyTracking[id];\n                if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {\n                    return true;\n                }\n            }\n        }\n    },\n    markDirty: function () {\n        // Process \"dirty\" events if we can handle delayed notifications\n        if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\n            this._evalDelayed(false /*isChange*/);\n        }\n    },\n    isActive: function () {\n        var state = this[computedState];\n        return state.isDirty || state.dependenciesCount > 0;\n    },\n    respondToChange: function () {\n        // Ignore \"change\" events if we've already scheduled a delayed notification\n        if (!this._notificationIsPending) {\n            this.evaluatePossiblyAsync();\n        } else if (this[computedState].isDirty) {\n            this[computedState].isStale = true;\n        }\n    },\n    subscribeToDependency: function (target) {\n        if (target._deferUpdates && !this[computedState].disposeWhenNodeIsRemoved) {\n            var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\n                changeSub = target.subscribe(this.respondToChange, this);\n            return {\n                _target: target,\n                dispose: function () {\n                    dirtySub.dispose();\n                    changeSub.dispose();\n                }\n            };\n        } else {\n            return target.subscribe(this.evaluatePossiblyAsync, this);\n        }\n    },\n    evaluatePossiblyAsync: function () {\n        var computedObservable = this,\n            throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\n        if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\n            clearTimeout(this[computedState].evaluationTimeoutInstance);\n            this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\n                computedObservable.evaluateImmediate(true /*notifyChange*/);\n            }, throttleEvaluationTimeout);\n        } else if (computedObservable._evalDelayed) {\n            computedObservable._evalDelayed(true /*isChange*/);\n        } else {\n            computedObservable.evaluateImmediate(true /*notifyChange*/);\n        }\n    },\n    evaluateImmediate: function (notifyChange) {\n        var computedObservable = this,\n            state = computedObservable[computedState],\n            disposeWhen = state.disposeWhen,\n            changed = false;\n\n        if (state.isBeingEvaluated) {\n            // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\n            // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\n            // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\n            // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\n            return;\n        }\n\n        // Do not evaluate (and possibly capture new dependencies) if disposed\n        if (state.isDisposed) {\n            return;\n        }\n\n        if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\n            // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\n            if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\n                computedObservable.dispose();\n                return;\n            }\n        } else {\n            // It just did return false, so we can stop suppressing now\n            state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\n        }\n\n        state.isBeingEvaluated = true;\n        try {\n            changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\n        } finally {\n            state.isBeingEvaluated = false;\n        }\n\n        if (!state.dependenciesCount) {\n            computedObservable.dispose();\n        }\n\n        return changed;\n    },\n    evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {\n        // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\n        // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\n        // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\n\n        var computedObservable = this,\n            state = computedObservable[computedState],\n            changed = false;\n\n        // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\n        // Then, during evaluation, we cross off any that are in fact still being used.\n        var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time\n            dependencyDetectionContext = {\n                computedObservable: computedObservable,\n                disposalCandidates: state.dependencyTracking,\n                disposalCount: state.dependenciesCount\n            };\n\n        ko.dependencyDetection.begin({\n            callbackTarget: dependencyDetectionContext,\n            callback: computedBeginDependencyDetectionCallback,\n            computed: computedObservable,\n            isInitial: isInitial\n        });\n\n        state.dependencyTracking = {};\n        state.dependenciesCount = 0;\n\n        var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\n\n        if (computedObservable.isDifferent(state.latestValue, newValue)) {\n            if (!state.isSleeping) {\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\n            }\n\n            state.latestValue = newValue;\n            if (DEBUG) computedObservable._latestValue = newValue;\n\n            if (state.isSleeping) {\n                computedObservable.updateVersion();\n            } else if (notifyChange) {\n                computedObservable[\"notifySubscribers\"](state.latestValue);\n            }\n\n            changed = true;\n        }\n\n        if (isInitial) {\n            computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\n        }\n\n        return changed;\n    },\n    evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {\n        // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\n        // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\n        // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\n        // overhead of computed evaluation (on V8 at least).\n\n        try {\n            var readFunction = state.readFunction;\n            return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\n        } finally {\n            ko.dependencyDetection.end();\n\n            // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\n            if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\n                ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\n            }\n\n            state.isStale = state.isDirty = false;\n        }\n    },\n    peek: function (evaluate) {\n        // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\n        // Pass in true to evaluate if needed.\n        var state = this[computedState];\n        if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {\n            this.evaluateImmediate();\n        }\n        return state.latestValue;\n    },\n    limit: function (limitFunction) {\n        // Override the limit function with one that delays evaluation as well\n        ko.subscribable['fn'].limit.call(this, limitFunction);\n        this._evalIfChanged = function () {\n            if (this[computedState].isStale) {\n                this.evaluateImmediate();\n            } else {\n                this[computedState].isDirty = false;\n            }\n            return this[computedState].latestValue;\n        };\n        this._evalDelayed = function (isChange) {\n            this._limitBeforeChange(this[computedState].latestValue);\n\n            // Mark as dirty\n            this[computedState].isDirty = true;\n            if (isChange) {\n                this[computedState].isStale = true;\n            }\n\n            // Pass the observable to the \"limit\" code, which will evaluate it when\n            // it's time to do the notification.\n            this._limitChange(this);\n        };\n    },\n    dispose: function () {\n        var state = this[computedState];\n        if (!state.isSleeping && state.dependencyTracking) {\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                if (dependency.dispose)\n                    dependency.dispose();\n            });\n        }\n        if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\n            ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\n        }\n        state.dependencyTracking = null;\n        state.dependenciesCount = 0;\n        state.isDisposed = true;\n        state.isStale = false;\n        state.isDirty = false;\n        state.isSleeping = false;\n        state.disposeWhenNodeIsRemoved = null;\n    }\n};\n\nvar pureComputedOverrides = {\n    beforeSubscriptionAdd: function (event) {\n        // If asleep, wake up the computed by subscribing to any dependencies.\n        var computedObservable = this,\n            state = computedObservable[computedState];\n        if (!state.isDisposed && state.isSleeping && event == 'change') {\n            state.isSleeping = false;\n            if (state.isStale || computedObservable.haveDependenciesChanged()) {\n                state.dependencyTracking = null;\n                state.dependenciesCount = 0;\n                if (computedObservable.evaluateImmediate()) {\n                    computedObservable.updateVersion();\n                }\n            } else {\n                // First put the dependencies in order\n                var dependeciesOrder = [];\n                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                    dependeciesOrder[dependency._order] = id;\n                });\n                // Next, subscribe to each one\n                ko.utils.arrayForEach(dependeciesOrder, function (id, order) {\n                    var dependency = state.dependencyTracking[id],\n                        subscription = computedObservable.subscribeToDependency(dependency._target);\n                    subscription._order = order;\n                    subscription._version = dependency._version;\n                    state.dependencyTracking[id] = subscription;\n                });\n            }\n            if (!state.isDisposed) {     // test since evaluating could trigger disposal\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\n            }\n        }\n    },\n    afterSubscriptionRemove: function (event) {\n        var state = this[computedState];\n        if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\n            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\n                if (dependency.dispose) {\n                    state.dependencyTracking[id] = {\n                        _target: dependency._target,\n                        _order: dependency._order,\n                        _version: dependency._version\n                    };\n                    dependency.dispose();\n                }\n            });\n            state.isSleeping = true;\n            this[\"notifySubscribers\"](undefined, \"asleep\");\n        }\n    },\n    getVersion: function () {\n        // Because a pure computed is not automatically updated while it is sleeping, we can't\n        // simply return the version number. Instead, we check if any of the dependencies have\n        // changed and conditionally re-evaluate the computed observable.\n        var state = this[computedState];\n        if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\n            this.evaluateImmediate();\n        }\n        return ko.subscribable['fn'].getVersion.call(this);\n    }\n};\n\nvar deferEvaluationOverrides = {\n    beforeSubscriptionAdd: function (event) {\n        // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\n        if (event == 'change' || event == 'beforeChange') {\n            this.peek();\n        }\n    }\n};\n\n// Note that for browsers that don't support proto assignment, the\n// inheritance chain is created manually in the ko.computed constructor\nif (ko.utils.canSetPrototype) {\n    ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\n}\n\n// Set the proto chain values for ko.hasPrototype\nvar protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\nko.computed[protoProp] = ko.observable;\ncomputedFn[protoProp] = ko.computed;\n\nko.isComputed = function (instance) {\n    return ko.hasPrototype(instance, ko.computed);\n};\n\nko.isPureComputed = function (instance) {\n    return ko.hasPrototype(instance, ko.computed)\n        && instance[computedState] && instance[computedState].pure;\n};\n\nko.exportSymbol('computed', ko.computed);\nko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)\nko.exportSymbol('isComputed', ko.isComputed);\nko.exportSymbol('isPureComputed', ko.isPureComputed);\nko.exportSymbol('computed.fn', computedFn);\nko.exportProperty(computedFn, 'peek', computedFn.peek);\nko.exportProperty(computedFn, 'dispose', computedFn.dispose);\nko.exportProperty(computedFn, 'isActive', computedFn.isActive);\nko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\n\nko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\n    if (typeof evaluatorFunctionOrOptions === 'function') {\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\n    } else {\n        evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\n        evaluatorFunctionOrOptions['pure'] = true;\n        return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\n    }\n}\nko.exportSymbol('pureComputed', ko.pureComputed);\n\n(function() {\n    var maxNestedObservableDepth = 10; // Escape the (unlikely) pathalogical case where an observable's current value is itself (or similar reference cycle)\n\n    ko.toJS = function(rootObject) {\n        if (arguments.length == 0)\n            throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\n\n        // We just unwrap everything at every level in the object graph\n        return mapJsObjectGraph(rootObject, function(valueToMap) {\n            // Loop because an observable's value might in turn be another observable wrapper\n            for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\n                valueToMap = valueToMap();\n            return valueToMap;\n        });\n    };\n\n    ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\n        var plainJavaScriptObject = ko.toJS(rootObject);\n        return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\n    };\n\n    function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\n        visitedObjects = visitedObjects || new objectLookup();\n\n        rootObject = mapInputCallback(rootObject);\n        var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\n        if (!canHaveProperties)\n            return rootObject;\n\n        var outputProperties = rootObject instanceof Array ? [] : {};\n        visitedObjects.save(rootObject, outputProperties);\n\n        visitPropertiesOrArrayEntries(rootObject, function(indexer) {\n            var propertyValue = mapInputCallback(rootObject[indexer]);\n\n            switch (typeof propertyValue) {\n                case \"boolean\":\n                case \"number\":\n                case \"string\":\n                case \"function\":\n                    outputProperties[indexer] = propertyValue;\n                    break;\n                case \"object\":\n                case \"undefined\":\n                    var previouslyMappedValue = visitedObjects.get(propertyValue);\n                    outputProperties[indexer] = (previouslyMappedValue !== undefined)\n                        ? previouslyMappedValue\n                        : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\n                    break;\n            }\n        });\n\n        return outputProperties;\n    }\n\n    function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\n        if (rootObject instanceof Array) {\n            for (var i = 0; i < rootObject.length; i++)\n                visitorCallback(i);\n\n            // For arrays, also respect toJSON property for custom mappings (fixes #278)\n            if (typeof rootObject['toJSON'] == 'function')\n                visitorCallback('toJSON');\n        } else {\n            for (var propertyName in rootObject) {\n                visitorCallback(propertyName);\n            }\n        }\n    };\n\n    function objectLookup() {\n        this.keys = [];\n        this.values = [];\n    };\n\n    objectLookup.prototype = {\n        constructor: objectLookup,\n        save: function(key, value) {\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\n            if (existingIndex >= 0)\n                this.values[existingIndex] = value;\n            else {\n                this.keys.push(key);\n                this.values.push(value);\n            }\n        },\n        get: function(key) {\n            var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\n            return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\n        }\n    };\n})();\n\nko.exportSymbol('toJS', ko.toJS);\nko.exportSymbol('toJSON', ko.toJSON);\n(function () {\n    var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\n\n    // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\n    // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\n    // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\n    ko.selectExtensions = {\n        readValue : function(element) {\n            switch (ko.utils.tagNameLower(element)) {\n                case 'option':\n                    if (element[hasDomDataExpandoProperty] === true)\n                        return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\n                    return ko.utils.ieVersion <= 7\n                        ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\n                        : element.value;\n                case 'select':\n                    return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\n                default:\n                    return element.value;\n            }\n        },\n\n        writeValue: function(element, value, allowUnset) {\n            switch (ko.utils.tagNameLower(element)) {\n                case 'option':\n                    switch(typeof value) {\n                        case \"string\":\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\n                                delete element[hasDomDataExpandoProperty];\n                            }\n                            element.value = value;\n                            break;\n                        default:\n                            // Store arbitrary object using DomData\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\n                            element[hasDomDataExpandoProperty] = true;\n\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\n                            element.value = typeof value === \"number\" ? value : \"\";\n                            break;\n                    }\n                    break;\n                case 'select':\n                    if (value === \"\" || value === null)       // A blank string or null value will select the caption\n                        value = undefined;\n                    var selection = -1;\n                    for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\n                        optionValue = ko.selectExtensions.readValue(element.options[i]);\n                        // Include special check to handle selecting a caption with a blank string value\n                        if (optionValue == value || (optionValue == \"\" && value === undefined)) {\n                            selection = i;\n                            break;\n                        }\n                    }\n                    if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\n                        element.selectedIndex = selection;\n                    }\n                    break;\n                default:\n                    if ((value === null) || (value === undefined))\n                        value = \"\";\n                    element.value = value;\n                    break;\n            }\n        }\n    };\n})();\n\nko.exportSymbol('selectExtensions', ko.selectExtensions);\nko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\nko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\nko.expressionRewriting = (function () {\n    var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\n\n    // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\n    // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\n    // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\n    var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\n\n    function getWriteableValue(expression) {\n        if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\n            return false;\n        var match = expression.match(javaScriptAssignmentTarget);\n        return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\n    }\n\n    // The following regular expressions will be used to split an object-literal string into tokens\n\n        // These two match strings, either with double quotes or single quotes\n    var stringDouble = '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"',\n        stringSingle = \"'(?:[^'\\\\\\\\]|\\\\\\\\.)*'\",\n        // Matches a regular expression (text enclosed by slashes), but will also match sets of divisions\n        // as a regular expression (this is handled by the parsing loop below).\n        stringRegexp = '/(?:[^/\\\\\\\\]|\\\\\\\\.)*/\\w*',\n        // These characters have special meaning to the parser and must not appear in the middle of a\n        // token, except as part of a string.\n        specials = ',\"\\'{}()/:[\\\\]',\n        // Match text (at least two characters) that does not contain any of the above special characters,\n        // although some of the special characters are allowed to start it (all but the colon and comma).\n        // The text can contain spaces, but leading or trailing spaces are skipped.\n        everyThingElse = '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\n        // Match any non-space character not matched already. This will match colons and commas, since they're\n        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\n        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\n        oneNotSpace = '[^\\\\s]',\n\n        // Create the actual regular expression by or-ing the above strings. The order is important.\n        bindingToken = RegExp(stringDouble + '|' + stringSingle + '|' + stringRegexp + '|' + everyThingElse + '|' + oneNotSpace, 'g'),\n\n        // Match end of previous token to determine whether a slash is a division or regex.\n        divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\n        keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\n\n    function parseObjectLiteral(objectLiteralString) {\n        // Trim leading and trailing spaces from the string\n        var str = ko.utils.stringTrim(objectLiteralString);\n\n        // Trim braces '{' surrounding the whole object literal\n        if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\n\n        // Split into tokens\n        var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\n\n        if (toks) {\n            // Append a comma so that we don't need a separate code block to deal with the last item\n            toks.push(',');\n\n            for (var i = 0, tok; tok = toks[i]; ++i) {\n                var c = tok.charCodeAt(0);\n                // A comma signals the end of a key/value pair if depth is zero\n                if (c === 44) { // \",\"\n                    if (depth <= 0) {\n                        result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\n                        key = depth = 0;\n                        values = [];\n                        continue;\n                    }\n                // Simply skip the colon that separates the name and value\n                } else if (c === 58) { // \":\"\n                    if (!depth && !key && values.length === 1) {\n                        key = values.pop();\n                        continue;\n                    }\n                // A set of slashes is initially matched as a regular expression, but could be division\n                } else if (c === 47 && i && tok.length > 1) {  // \"/\"\n                    // Look at the end of the previous token to determine if the slash is actually division\n                    var match = toks[i-1].match(divisionLookBehind);\n                    if (match && !keywordRegexLookBehind[match[0]]) {\n                        // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\n                        str = str.substr(str.indexOf(tok) + 1);\n                        toks = str.match(bindingToken);\n                        toks.push(',');\n                        i = -1;\n                        // Continue with just the slash\n                        tok = '/';\n                    }\n                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\n                } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\n                    ++depth;\n                } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\n                    --depth;\n                // The key will be the first token; if it's a string, trim the quotes\n                } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\n                    tok = tok.slice(1, -1);\n                }\n                values.push(tok);\n            }\n        }\n        return result;\n    }\n\n    // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\n    var twoWayBindings = {};\n\n    function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\n        bindingOptions = bindingOptions || {};\n\n        function processKeyValue(key, val) {\n            var writableVal;\n            function callPreprocessHook(obj) {\n                return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\n            }\n            if (!bindingParams) {\n                if (!callPreprocessHook(ko['getBindingHandler'](key)))\n                    return;\n\n                if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\n                    // For two-way bindings, provide a write method in case the value\n                    // isn't a writable observable.\n                    propertyAccessorResultStrings.push(\"'\" + key + \"':function(_z){\" + writableVal + \"=_z}\");\n                }\n            }\n            // Values are wrapped in a function so that each value can be accessed independently\n            if (makeValueAccessors) {\n                val = 'function(){return ' + val + ' }';\n            }\n            resultStrings.push(\"'\" + key + \"':\" + val);\n        }\n\n        var resultStrings = [],\n            propertyAccessorResultStrings = [],\n            makeValueAccessors = bindingOptions['valueAccessors'],\n            bindingParams = bindingOptions['bindingParams'],\n            keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\n                parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\n\n        ko.utils.arrayForEach(keyValueArray, function(keyValue) {\n            processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\n        });\n\n        if (propertyAccessorResultStrings.length)\n            processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\n\n        return resultStrings.join(\",\");\n    }\n\n    return {\n        bindingRewriteValidators: [],\n\n        twoWayBindings: twoWayBindings,\n\n        parseObjectLiteral: parseObjectLiteral,\n\n        preProcessBindings: preProcessBindings,\n\n        keyValueArrayContainsKey: function(keyValueArray, key) {\n            for (var i = 0; i < keyValueArray.length; i++)\n                if (keyValueArray[i]['key'] == key)\n                    return true;\n            return false;\n        },\n\n        // Internal, private KO utility for updating model properties from within bindings\n        // property:            If the property being updated is (or might be) an observable, pass it here\n        //                      If it turns out to be a writable observable, it will be written to directly\n        // allBindings:         An object with a get method to retrieve bindings in the current execution context.\n        //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\n        // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\n        // value:               The value to be written\n        // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\n        //                      it is !== existing value on that writable observable\n        writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\n            if (!property || !ko.isObservable(property)) {\n                var propWriters = allBindings.get('_ko_property_writers');\n                if (propWriters && propWriters[key])\n                    propWriters[key](value);\n            } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\n                property(value);\n            }\n        }\n    };\n})();\n\nko.exportSymbol('expressionRewriting', ko.expressionRewriting);\nko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\nko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\nko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\n\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\n// as an internal implementation detail in the short term.\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\nko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\n\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\nko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\nko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\n(function() {\n    // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\n    // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\n    // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\n    // of that virtual hierarchy\n    //\n    // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\n    // without having to scatter special cases all over the binding and templating code.\n\n    // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\n    // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\n    // So, use node.text where available, and node.nodeValue elsewhere\n    var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\n\n    var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\n    var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\n    var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\n\n    function isStartComment(node) {\n        return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n    }\n\n    function isEndComment(node) {\n        return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\n    }\n\n    function getVirtualChildren(startComment, allowUnbalanced) {\n        var currentNode = startComment;\n        var depth = 1;\n        var children = [];\n        while (currentNode = currentNode.nextSibling) {\n            if (isEndComment(currentNode)) {\n                depth--;\n                if (depth === 0)\n                    return children;\n            }\n\n            children.push(currentNode);\n\n            if (isStartComment(currentNode))\n                depth++;\n        }\n        if (!allowUnbalanced)\n            throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\n        return null;\n    }\n\n    function getMatchingEndComment(startComment, allowUnbalanced) {\n        var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\n        if (allVirtualChildren) {\n            if (allVirtualChildren.length > 0)\n                return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\n            return startComment.nextSibling;\n        } else\n            return null; // Must have no matching end comment, and allowUnbalanced is true\n    }\n\n    function getUnbalancedChildTags(node) {\n        // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\n        //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\n        var childNode = node.firstChild, captureRemaining = null;\n        if (childNode) {\n            do {\n                if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\n                    captureRemaining.push(childNode);\n                else if (isStartComment(childNode)) {\n                    var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\n                    if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\n                        childNode = matchingEndComment;\n                    else\n                        captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\n                } else if (isEndComment(childNode)) {\n                    captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\n                }\n            } while (childNode = childNode.nextSibling);\n        }\n        return captureRemaining;\n    }\n\n    ko.virtualElements = {\n        allowedBindings: {},\n\n        childNodes: function(node) {\n            return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\n        },\n\n        emptyNode: function(node) {\n            if (!isStartComment(node))\n                ko.utils.emptyDomNode(node);\n            else {\n                var virtualChildren = ko.virtualElements.childNodes(node);\n                for (var i = 0, j = virtualChildren.length; i < j; i++)\n                    ko.removeNode(virtualChildren[i]);\n            }\n        },\n\n        setDomNodeChildren: function(node, childNodes) {\n            if (!isStartComment(node))\n                ko.utils.setDomNodeChildren(node, childNodes);\n            else {\n                ko.virtualElements.emptyNode(node);\n                var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\n                for (var i = 0, j = childNodes.length; i < j; i++)\n                    endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\n            }\n        },\n\n        prepend: function(containerNode, nodeToPrepend) {\n            if (!isStartComment(containerNode)) {\n                if (containerNode.firstChild)\n                    containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\n                else\n                    containerNode.appendChild(nodeToPrepend);\n            } else {\n                // Start comments must always have a parent and at least one following sibling (the end comment)\n                containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\n            }\n        },\n\n        insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\n            if (!insertAfterNode) {\n                ko.virtualElements.prepend(containerNode, nodeToInsert);\n            } else if (!isStartComment(containerNode)) {\n                // Insert after insertion point\n                if (insertAfterNode.nextSibling)\n                    containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\n                else\n                    containerNode.appendChild(nodeToInsert);\n            } else {\n                // Children of start comments must always have a parent and at least one following sibling (the end comment)\n                containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\n            }\n        },\n\n        firstChild: function(node) {\n            if (!isStartComment(node))\n                return node.firstChild;\n            if (!node.nextSibling || isEndComment(node.nextSibling))\n                return null;\n            return node.nextSibling;\n        },\n\n        nextSibling: function(node) {\n            if (isStartComment(node))\n                node = getMatchingEndComment(node);\n            if (node.nextSibling && isEndComment(node.nextSibling))\n                return null;\n            return node.nextSibling;\n        },\n\n        hasBindingValue: isStartComment,\n\n        virtualNodeBindingValue: function(node) {\n            var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\n            return regexMatch ? regexMatch[1] : null;\n        },\n\n        normaliseVirtualElementDomStructure: function(elementVerified) {\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/155\n            // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\n            // that are direct descendants of <ul> into the preceding <li>)\n            if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\n                return;\n\n            // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\n            // must be intended to appear *after* that child, so move them there.\n            var childNode = elementVerified.firstChild;\n            if (childNode) {\n                do {\n                    if (childNode.nodeType === 1) {\n                        var unbalancedTags = getUnbalancedChildTags(childNode);\n                        if (unbalancedTags) {\n                            // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\n                            var nodeToInsertBefore = childNode.nextSibling;\n                            for (var i = 0; i < unbalancedTags.length; i++) {\n                                if (nodeToInsertBefore)\n                                    elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\n                                else\n                                    elementVerified.appendChild(unbalancedTags[i]);\n                            }\n                        }\n                    }\n                } while (childNode = childNode.nextSibling);\n            }\n        }\n    };\n})();\nko.exportSymbol('virtualElements', ko.virtualElements);\nko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\nko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\nko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\nko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\nko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\n(function() {\n    var defaultBindingAttributeName = \"data-bind\";\n\n    ko.bindingProvider = function() {\n        this.bindingCache = {};\n    };\n\n    ko.utils.extend(ko.bindingProvider.prototype, {\n        'nodeHasBindings': function(node) {\n            switch (node.nodeType) {\n                case 1: // Element\n                    return node.getAttribute(defaultBindingAttributeName) != null\n                        || ko.components['getComponentNameForNode'](node);\n                case 8: // Comment node\n                    return ko.virtualElements.hasBindingValue(node);\n                default: return false;\n            }\n        },\n\n        'getBindings': function(node, bindingContext) {\n            var bindingsString = this['getBindingsString'](node, bindingContext),\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\n        },\n\n        'getBindingAccessors': function(node, bindingContext) {\n            var bindingsString = this['getBindingsString'](node, bindingContext),\n                parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\n            return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\n        },\n\n        // The following function is only used internally by this default provider.\n        // It's not part of the interface definition for a general binding provider.\n        'getBindingsString': function(node, bindingContext) {\n            switch (node.nodeType) {\n                case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\n                case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\n                default: return null;\n            }\n        },\n\n        // The following function is only used internally by this default provider.\n        // It's not part of the interface definition for a general binding provider.\n        'parseBindingsString': function(bindingsString, bindingContext, node, options) {\n            try {\n                var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\n                return bindingFunction(bindingContext, node);\n            } catch (ex) {\n                ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\n                throw ex;\n            }\n        }\n    });\n\n    ko.bindingProvider['instance'] = new ko.bindingProvider();\n\n    function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\n        var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\n        return cache[cacheKey]\n            || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\n    }\n\n    function createBindingsStringEvaluator(bindingsString, options) {\n        // Build the source for a function that evaluates \"expression\"\n        // For each scope variable, add an extra level of \"with\" nesting\n        // Example result: with(sc1) { with(sc0) { return (expression) } }\n        var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\n            functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\n        return new Function(\"$context\", \"$element\", functionBody);\n    }\n})();\n\nko.exportSymbol('bindingProvider', ko.bindingProvider);\n(function () {\n    ko.bindingHandlers = {};\n\n    // The following element types will not be recursed into during binding.\n    var bindingDoesNotRecurseIntoElementTypes = {\n        // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\n        // because it's unexpected and a potential XSS issue.\n        // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\n        // and because such elements' contents are always intended to be bound in a different context\n        // from where they appear in the document.\n        'script': true,\n        'textarea': true,\n        'template': true\n    };\n\n    // Use an overridable method for retrieving binding handlers so that a plugins may support dynamically created handlers\n    ko['getBindingHandler'] = function(bindingKey) {\n        return ko.bindingHandlers[bindingKey];\n    };\n\n    // The ko.bindingContext constructor is only called directly to create the root context. For child\n    // contexts, use bindingContext.createChildContext or bindingContext.extend.\n    ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {\n\n        // The binding context object includes static properties for the current, parent, and root view models.\n        // If a view model is actually stored in an observable, the corresponding binding context object, and\n        // any child contexts, must be updated when the view model is changed.\n        function updateContext() {\n            // Most of the time, the context will directly get a view model object, but if a function is given,\n            // we call the function to retrieve the view model. If the function accesses any observables or returns\n            // an observable, the dependency is tracked, and those observables can later cause the binding\n            // context to be updated.\n            var dataItemOrObservable = isFunc ? dataItemOrAccessor() : dataItemOrAccessor,\n                dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\n\n            if (parentContext) {\n                // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\n                // parent context is updated, this context will also be updated.\n                if (parentContext._subscribable)\n                    parentContext._subscribable();\n\n                // Copy $root and any custom properties from the parent context\n                ko.utils.extend(self, parentContext);\n\n                // Because the above copy overwrites our own properties, we need to reset them.\n                self._subscribable = subscribable;\n            } else {\n                self['$parents'] = [];\n                self['$root'] = dataItem;\n\n                // Export 'ko' in the binding context so it will be available in bindings and templates\n                // even if 'ko' isn't exported as a global, such as when using an AMD loader.\n                // See https://github.com/SteveSanderson/knockout/issues/490\n                self['ko'] = ko;\n            }\n            self['$rawData'] = dataItemOrObservable;\n            self['$data'] = dataItem;\n            if (dataItemAlias)\n                self[dataItemAlias] = dataItem;\n\n            // The extendCallback function is provided when creating a child context or extending a context.\n            // It handles the specific actions needed to finish setting up the binding context. Actions in this\n            // function could also add dependencies to this binding context.\n            if (extendCallback)\n                extendCallback(self, parentContext, dataItem);\n\n            return self['$data'];\n        }\n        function disposeWhen() {\n            return nodes && !ko.utils.anyDomNodeIsAttachedToDocument(nodes);\n        }\n\n        var self = this,\n            isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor),\n            nodes,\n            subscribable;\n\n        if (options && options['exportDependencies']) {\n            // The \"exportDependencies\" option means that the calling code will track any dependencies and re-create\n            // the binding context when they change.\n            updateContext();\n        } else {\n            subscribable = ko.dependentObservable(updateContext, null, { disposeWhen: disposeWhen, disposeWhenNodeIsRemoved: true });\n\n            // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\n            // subscribed to any observables that were accessed in the process. If there is nothing to track, the\n            // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\n            // the context object.\n            if (subscribable.isActive()) {\n                self._subscribable = subscribable;\n\n                // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\n                subscribable['equalityComparer'] = null;\n\n                // We need to be able to dispose of this computed observable when it's no longer needed. This would be\n                // easy if we had a single node to watch, but binding contexts can be used by many different nodes, and\n                // we cannot assume that those nodes have any relation to each other. So instead we track any node that\n                // the context is attached to, and dispose the computed when all of those nodes have been cleaned.\n\n                // Add properties to *subscribable* instead of *self* because any properties added to *self* may be overwritten on updates\n                nodes = [];\n                subscribable._addNode = function(node) {\n                    nodes.push(node);\n                    ko.utils.domNodeDisposal.addDisposeCallback(node, function(node) {\n                        ko.utils.arrayRemoveItem(nodes, node);\n                        if (!nodes.length) {\n                            subscribable.dispose();\n                            self._subscribable = subscribable = undefined;\n                        }\n                    });\n                };\n            }\n        }\n    }\n\n    // Extend the binding context hierarchy with a new view model object. If the parent context is watching\n    // any observables, the new child context will automatically get a dependency on the parent context.\n    // But this does not mean that the $data value of the child context will also get updated. If the child\n    // view model also depends on the parent view model, you must provide a function that returns the correct\n    // view model on each update.\n    ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {\n        return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function(self, parentContext) {\n            // Extend the context hierarchy by setting the appropriate pointers\n            self['$parentContext'] = parentContext;\n            self['$parent'] = parentContext['$data'];\n            self['$parents'] = (parentContext['$parents'] || []).slice(0);\n            self['$parents'].unshift(self['$parent']);\n            if (extendCallback)\n                extendCallback(self);\n        }, options);\n    };\n\n    // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\n    // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\n    // when an observable view model is updated.\n    ko.bindingContext.prototype['extend'] = function(properties) {\n        // If the parent context references an observable view model, \"_subscribable\" will always be the\n        // latest view model object. If not, \"_subscribable\" isn't set, and we can use the static \"$data\" value.\n        return new ko.bindingContext(this._subscribable || this['$data'], this, null, function(self, parentContext) {\n            // This \"child\" context doesn't directly track a parent observable view model,\n            // so we need to manually set the $rawData value to match the parent.\n            self['$rawData'] = parentContext['$rawData'];\n            ko.utils.extend(self, typeof(properties) == \"function\" ? properties() : properties);\n        });\n    };\n\n    ko.bindingContext.prototype.createStaticChildContext = function (dataItemOrAccessor, dataItemAlias) {\n        return this['createChildContext'](dataItemOrAccessor, dataItemAlias, null, { \"exportDependencies\": true });\n    };\n\n    // Returns the valueAccesor function for a binding value\n    function makeValueAccessor(value) {\n        return function() {\n            return value;\n        };\n    }\n\n    // Returns the value of a valueAccessor function\n    function evaluateValueAccessor(valueAccessor) {\n        return valueAccessor();\n    }\n\n    // Given a function that returns bindings, create and return a new object that contains\n    // binding value-accessors functions. Each accessor function calls the original function\n    // so that it always gets the latest value and all dependencies are captured. This is used\n    // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\n    function makeAccessorsFromFunction(callback) {\n        return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\n            return function() {\n                return callback()[key];\n            };\n        });\n    }\n\n    // Given a bindings function or object, create and return a new object that contains\n    // binding value-accessors functions. This is used by ko.applyBindingsToNode.\n    function makeBindingAccessors(bindings, context, node) {\n        if (typeof bindings === 'function') {\n            return makeAccessorsFromFunction(bindings.bind(null, context, node));\n        } else {\n            return ko.utils.objectMap(bindings, makeValueAccessor);\n        }\n    }\n\n    // This function is used if the binding provider doesn't include a getBindingAccessors function.\n    // It must be called with 'this' set to the provider instance.\n    function getBindingsAndMakeAccessors(node, context) {\n        return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\n    }\n\n    function validateThatBindingIsAllowedForVirtualElements(bindingName) {\n        var validator = ko.virtualElements.allowedBindings[bindingName];\n        if (!validator)\n            throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\n    }\n\n    function applyBindingsToDescendantsInternal (bindingContext, elementOrVirtualElement, bindingContextsMayDifferFromDomParentElement) {\n        var currentChild,\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement),\n            provider = ko.bindingProvider['instance'],\n            preprocessNode = provider['preprocessNode'];\n\n        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\n        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\n        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\n        // trigger insertion of <template> contents at that point in the document.\n        if (preprocessNode) {\n            while (currentChild = nextInQueue) {\n                nextInQueue = ko.virtualElements.nextSibling(currentChild);\n                preprocessNode.call(provider, currentChild);\n            }\n            // Reset nextInQueue for the next loop\n            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\n        }\n\n        while (currentChild = nextInQueue) {\n            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\n            nextInQueue = ko.virtualElements.nextSibling(currentChild);\n            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild, bindingContextsMayDifferFromDomParentElement);\n        }\n    }\n\n    function applyBindingsToNodeAndDescendantsInternal (bindingContext, nodeVerified, bindingContextMayDifferFromDomParentElement) {\n        var shouldBindDescendants = true;\n\n        // Perf optimisation: Apply bindings only if...\n        // (1) We need to store the binding context on this node (because it may differ from the DOM parent node's binding context)\n        //     Note that we can't store binding contexts on non-elements (e.g., text nodes), as IE doesn't allow expando properties for those\n        // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\n        var isElement = (nodeVerified.nodeType === 1);\n        if (isElement) // Workaround IE <= 8 HTML parsing weirdness\n            ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\n\n        var shouldApplyBindings = (isElement && bindingContextMayDifferFromDomParentElement)             // Case (1)\n                               || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);       // Case (2)\n        if (shouldApplyBindings)\n            shouldBindDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext, bindingContextMayDifferFromDomParentElement)['shouldBindDescendants'];\n\n        if (shouldBindDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\n            // We're recursing automatically into (real or virtual) child nodes without changing binding contexts. So,\n            //  * For children of a *real* element, the binding context is certainly the same as on their DOM .parentNode,\n            //    hence bindingContextsMayDifferFromDomParentElement is false\n            //  * For children of a *virtual* element, we can't be sure. Evaluating .parentNode on those children may\n            //    skip over any number of intermediate virtual elements, any of which might define a custom binding context,\n            //    hence bindingContextsMayDifferFromDomParentElement is true\n            applyBindingsToDescendantsInternal(bindingContext, nodeVerified, /* bindingContextsMayDifferFromDomParentElement: */ !isElement);\n        }\n    }\n\n    var boundElementDomDataKey = ko.utils.domData.nextKey();\n\n\n    function topologicalSortBindings(bindings) {\n        // Depth-first sort\n        var result = [],                // The list of key/handler pairs that we will return\n            bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\n            cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\n        ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\n            if (!bindingsConsidered[bindingKey]) {\n                var binding = ko['getBindingHandler'](bindingKey);\n                if (binding) {\n                    // First add dependencies (if any) of the current binding\n                    if (binding['after']) {\n                        cyclicDependencyStack.push(bindingKey);\n                        ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\n                            if (bindings[bindingDependencyKey]) {\n                                if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\n                                    throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\n                                } else {\n                                    pushBinding(bindingDependencyKey);\n                                }\n                            }\n                        });\n                        cyclicDependencyStack.length--;\n                    }\n                    // Next add the current binding\n                    result.push({ key: bindingKey, handler: binding });\n                }\n                bindingsConsidered[bindingKey] = true;\n            }\n        });\n\n        return result;\n    }\n\n    function applyBindingsToNodeInternal(node, sourceBindings, bindingContext, bindingContextMayDifferFromDomParentElement) {\n        // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\n        var alreadyBound = ko.utils.domData.get(node, boundElementDomDataKey);\n        if (!sourceBindings) {\n            if (alreadyBound) {\n                throw Error(\"You cannot apply bindings multiple times to the same element.\");\n            }\n            ko.utils.domData.set(node, boundElementDomDataKey, true);\n        }\n\n        // Optimization: Don't store the binding context on this node if it's definitely the same as on node.parentNode, because\n        // we can easily recover it just by scanning up the node's ancestors in the DOM\n        // (note: here, parent node means \"real DOM parent\" not \"virtual parent\", as there's no O(1) way to find the virtual parent)\n        if (!alreadyBound && bindingContextMayDifferFromDomParentElement)\n            ko.storedBindingContextForNode(node, bindingContext);\n\n        // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\n        var bindings;\n        if (sourceBindings && typeof sourceBindings !== 'function') {\n            bindings = sourceBindings;\n        } else {\n            var provider = ko.bindingProvider['instance'],\n                getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\n\n            // Get the binding from the provider within a computed observable so that we can update the bindings whenever\n            // the binding context is updated or if the binding provider accesses observables.\n            var bindingsUpdater = ko.dependentObservable(\n                function() {\n                    bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\n                    // Register a dependency on the binding context to support observable view models.\n                    if (bindings && bindingContext._subscribable)\n                        bindingContext._subscribable();\n                    return bindings;\n                },\n                null, { disposeWhenNodeIsRemoved: node }\n            );\n\n            if (!bindings || !bindingsUpdater.isActive())\n                bindingsUpdater = null;\n        }\n\n        var bindingHandlerThatControlsDescendantBindings;\n        if (bindings) {\n            // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\n            // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\n            // the latest binding value and registers a dependency on the binding updater.\n            var getValueAccessor = bindingsUpdater\n                ? function(bindingKey) {\n                    return function() {\n                        return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\n                    };\n                } : function(bindingKey) {\n                    return bindings[bindingKey];\n                };\n\n            // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\n            function allBindings() {\n                return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\n            }\n            // The following is the 3.x allBindings API\n            allBindings['get'] = function(key) {\n                return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\n            };\n            allBindings['has'] = function(key) {\n                return key in bindings;\n            };\n\n            // First put the bindings into the right order\n            var orderedBindings = topologicalSortBindings(bindings);\n\n            // Go through the sorted bindings, calling init and update for each\n            ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\n                // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\n                // so bindingKeyAndHandler.handler will always be nonnull.\n                var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\n                    handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\n                    bindingKey = bindingKeyAndHandler.key;\n\n                if (node.nodeType === 8) {\n                    validateThatBindingIsAllowedForVirtualElements(bindingKey);\n                }\n\n                try {\n                    // Run init, ignoring any dependencies\n                    if (typeof handlerInitFn == \"function\") {\n                        ko.dependencyDetection.ignore(function() {\n                            var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\n\n                            // If this binding handler claims to control descendant bindings, make a note of this\n                            if (initResult && initResult['controlsDescendantBindings']) {\n                                if (bindingHandlerThatControlsDescendantBindings !== undefined)\n                                    throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\n                                bindingHandlerThatControlsDescendantBindings = bindingKey;\n                            }\n                        });\n                    }\n\n                    // Run update in its own computed wrapper\n                    if (typeof handlerUpdateFn == \"function\") {\n                        ko.dependentObservable(\n                            function() {\n                                handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, bindingContext['$data'], bindingContext);\n                            },\n                            null,\n                            { disposeWhenNodeIsRemoved: node }\n                        );\n                    }\n                } catch (ex) {\n                    ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\n                    throw ex;\n                }\n            });\n        }\n\n        return {\n            'shouldBindDescendants': bindingHandlerThatControlsDescendantBindings === undefined\n        };\n    };\n\n    var storedBindingContextDomDataKey = ko.utils.domData.nextKey();\n    ko.storedBindingContextForNode = function (node, bindingContext) {\n        if (arguments.length == 2) {\n            ko.utils.domData.set(node, storedBindingContextDomDataKey, bindingContext);\n            if (bindingContext._subscribable)\n                bindingContext._subscribable._addNode(node);\n        } else {\n            return ko.utils.domData.get(node, storedBindingContextDomDataKey);\n        }\n    }\n\n    function getBindingContext(viewModelOrBindingContext) {\n        return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\n            ? viewModelOrBindingContext\n            : new ko.bindingContext(viewModelOrBindingContext);\n    }\n\n    ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\n        if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\n            ko.virtualElements.normaliseVirtualElementDomStructure(node);\n        return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext), true);\n    };\n\n    ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\n        var context = getBindingContext(viewModelOrBindingContext);\n        return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\n    };\n\n    ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\n        if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\n            applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\n    };\n\n    ko.applyBindings = function (viewModelOrBindingContext, rootNode) {\n        // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\n        if (!jQueryInstance && window['jQuery']) {\n            jQueryInstance = window['jQuery'];\n        }\n\n        if (rootNode && (rootNode.nodeType !== 1) && (rootNode.nodeType !== 8))\n            throw new Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\n        rootNode = rootNode || window.document.body; // Make \"rootNode\" parameter optional\n\n        applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode, true);\n    };\n\n    // Retrieving binding context from arbitrary nodes\n    ko.contextFor = function(node) {\n        // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\n        switch (node.nodeType) {\n            case 1:\n            case 8:\n                var context = ko.storedBindingContextForNode(node);\n                if (context) return context;\n                if (node.parentNode) return ko.contextFor(node.parentNode);\n                break;\n        }\n        return undefined;\n    };\n    ko.dataFor = function(node) {\n        var context = ko.contextFor(node);\n        return context ? context['$data'] : undefined;\n    };\n\n    ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\n    ko.exportSymbol('applyBindings', ko.applyBindings);\n    ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\n    ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\n    ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\n    ko.exportSymbol('contextFor', ko.contextFor);\n    ko.exportSymbol('dataFor', ko.dataFor);\n})();\n(function(undefined) {\n    var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\n        loadedDefinitionsCache = {};    // Tracks component loads that have already completed\n\n    ko.components = {\n        get: function(componentName, callback) {\n            var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\n            if (cachedDefinition) {\n                // It's already loaded and cached. Reuse the same definition object.\n                // Note that for API consistency, even cache hits complete asynchronously by default.\n                // You can bypass this by putting synchronous:true on your component config.\n                if (cachedDefinition.isSynchronousComponent) {\n                    ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\n                        callback(cachedDefinition.definition);\n                    });\n                } else {\n                    ko.tasks.schedule(function() { callback(cachedDefinition.definition); });\n                }\n            } else {\n                // Join the loading process that is already underway, or start a new one.\n                loadComponentAndNotify(componentName, callback);\n            }\n        },\n\n        clearCachedDefinition: function(componentName) {\n            delete loadedDefinitionsCache[componentName];\n        },\n\n        _getFirstResultFromLoaders: getFirstResultFromLoaders\n    };\n\n    function getObjectOwnProperty(obj, propName) {\n        return obj.hasOwnProperty(propName) ? obj[propName] : undefined;\n    }\n\n    function loadComponentAndNotify(componentName, callback) {\n        var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\n            completedAsync;\n        if (!subscribable) {\n            // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\n            subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\n            subscribable.subscribe(callback);\n\n            beginLoadingComponent(componentName, function(definition, config) {\n                var isSynchronousComponent = !!(config && config['synchronous']);\n                loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\n                delete loadingSubscribablesCache[componentName];\n\n                // For API consistency, all loads complete asynchronously. However we want to avoid\n                // adding an extra task schedule if it's unnecessary (i.e., the completion is already\n                // async).\n                //\n                // You can bypass the 'always asynchronous' feature by putting the synchronous:true\n                // flag on your component configuration when you register it.\n                if (completedAsync || isSynchronousComponent) {\n                    // Note that notifySubscribers ignores any dependencies read within the callback.\n                    // See comment in loaderRegistryBehaviors.js for reasoning\n                    subscribable['notifySubscribers'](definition);\n                } else {\n                    ko.tasks.schedule(function() {\n                        subscribable['notifySubscribers'](definition);\n                    });\n                }\n            });\n            completedAsync = true;\n        } else {\n            subscribable.subscribe(callback);\n        }\n    }\n\n    function beginLoadingComponent(componentName, callback) {\n        getFirstResultFromLoaders('getConfig', [componentName], function(config) {\n            if (config) {\n                // We have a config, so now load its definition\n                getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\n                    callback(definition, config);\n                });\n            } else {\n                // The component has no config - it's unknown to all the loaders.\n                // Note that this is not an error (e.g., a module loading error) - that would abort the\n                // process and this callback would not run. For this callback to run, all loaders must\n                // have confirmed they don't know about this component.\n                callback(null, null);\n            }\n        });\n    }\n\n    function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\n        // On the first call in the stack, start with the full set of loaders\n        if (!candidateLoaders) {\n            candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\n        }\n\n        // Try the next candidate\n        var currentCandidateLoader = candidateLoaders.shift();\n        if (currentCandidateLoader) {\n            var methodInstance = currentCandidateLoader[methodName];\n            if (methodInstance) {\n                var wasAborted = false,\n                    synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\n                        if (wasAborted) {\n                            callback(null);\n                        } else if (result !== null) {\n                            // This candidate returned a value. Use it.\n                            callback(result);\n                        } else {\n                            // Try the next candidate\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\n                        }\n                    }));\n\n                // Currently, loaders may not return anything synchronously. This leaves open the possibility\n                // that we'll extend the API to support synchronous return values in the future. It won't be\n                // a breaking change, because currently no loader is allowed to return anything except undefined.\n                if (synchronousReturnValue !== undefined) {\n                    wasAborted = true;\n\n                    // Method to suppress exceptions will remain undocumented. This is only to keep\n                    // KO's specs running tidily, since we can observe the loading got aborted without\n                    // having exceptions cluttering up the console too.\n                    if (!currentCandidateLoader['suppressLoaderExceptions']) {\n                        throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\n                    }\n                }\n            } else {\n                // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\n                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\n            }\n        } else {\n            // No candidates returned a value\n            callback(null);\n        }\n    }\n\n    // Reference the loaders via string name so it's possible for developers\n    // to replace the whole array by assigning to ko.components.loaders\n    ko.components['loaders'] = [];\n\n    ko.exportSymbol('components', ko.components);\n    ko.exportSymbol('components.get', ko.components.get);\n    ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\n})();\n(function(undefined) {\n\n    // The default loader is responsible for two things:\n    // 1. Maintaining the default in-memory registry of component configuration objects\n    //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\n    // 2. Answering requests for components by fetching configuration objects\n    //    from that default in-memory registry and resolving them into standard\n    //    component definition objects (of the form { createViewModel: ..., template: ... })\n    // Custom loaders may override either of these facilities, i.e.,\n    // 1. To supply configuration objects from some other source (e.g., conventions)\n    // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\n\n    var defaultConfigRegistry = {};\n\n    ko.components.register = function(componentName, config) {\n        if (!config) {\n            throw new Error('Invalid configuration for ' + componentName);\n        }\n\n        if (ko.components.isRegistered(componentName)) {\n            throw new Error('Component ' + componentName + ' is already registered');\n        }\n\n        defaultConfigRegistry[componentName] = config;\n    };\n\n    ko.components.isRegistered = function(componentName) {\n        return defaultConfigRegistry.hasOwnProperty(componentName);\n    };\n\n    ko.components.unregister = function(componentName) {\n        delete defaultConfigRegistry[componentName];\n        ko.components.clearCachedDefinition(componentName);\n    };\n\n    ko.components.defaultLoader = {\n        'getConfig': function(componentName, callback) {\n            var result = defaultConfigRegistry.hasOwnProperty(componentName)\n                ? defaultConfigRegistry[componentName]\n                : null;\n            callback(result);\n        },\n\n        'loadComponent': function(componentName, config, callback) {\n            var errorCallback = makeErrorCallback(componentName);\n            possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\n                resolveConfig(componentName, errorCallback, loadedConfig, callback);\n            });\n        },\n\n        'loadTemplate': function(componentName, templateConfig, callback) {\n            resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\n        },\n\n        'loadViewModel': function(componentName, viewModelConfig, callback) {\n            resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\n        }\n    };\n\n    var createViewModelKey = 'createViewModel';\n\n    // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\n    // into the standard component definition format:\n    //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\n    // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\n    // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\n    // so this is implemented manually below.\n    function resolveConfig(componentName, errorCallback, config, callback) {\n        var result = {},\n            makeCallBackWhenZero = 2,\n            tryIssueCallback = function() {\n                if (--makeCallBackWhenZero === 0) {\n                    callback(result);\n                }\n            },\n            templateConfig = config['template'],\n            viewModelConfig = config['viewModel'];\n\n        if (templateConfig) {\n            possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\n                ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\n                    result['template'] = resolvedTemplate;\n                    tryIssueCallback();\n                });\n            });\n        } else {\n            tryIssueCallback();\n        }\n\n        if (viewModelConfig) {\n            possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\n                ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\n                    result[createViewModelKey] = resolvedViewModel;\n                    tryIssueCallback();\n                });\n            });\n        } else {\n            tryIssueCallback();\n        }\n    }\n\n    function resolveTemplate(errorCallback, templateConfig, callback) {\n        if (typeof templateConfig === 'string') {\n            // Markup - parse it\n            callback(ko.utils.parseHtmlFragment(templateConfig));\n        } else if (templateConfig instanceof Array) {\n            // Assume already an array of DOM nodes - pass through unchanged\n            callback(templateConfig);\n        } else if (isDocumentFragment(templateConfig)) {\n            // Document fragment - use its child nodes\n            callback(ko.utils.makeArray(templateConfig.childNodes));\n        } else if (templateConfig['element']) {\n            var element = templateConfig['element'];\n            if (isDomElement(element)) {\n                // Element instance - copy its child nodes\n                callback(cloneNodesFromTemplateSourceElement(element));\n            } else if (typeof element === 'string') {\n                // Element ID - find it, then copy its child nodes\n                var elemInstance = document.getElementById(element);\n                if (elemInstance) {\n                    callback(cloneNodesFromTemplateSourceElement(elemInstance));\n                } else {\n                    errorCallback('Cannot find element with ID ' + element);\n                }\n            } else {\n                errorCallback('Unknown element type: ' + element);\n            }\n        } else {\n            errorCallback('Unknown template value: ' + templateConfig);\n        }\n    }\n\n    function resolveViewModel(errorCallback, viewModelConfig, callback) {\n        if (typeof viewModelConfig === 'function') {\n            // Constructor - convert to standard factory function format\n            // By design, this does *not* supply componentInfo to the constructor, as the intent is that\n            // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\n            // be used in factory functions, not viewmodel constructors.\n            callback(function (params /*, componentInfo */) {\n                return new viewModelConfig(params);\n            });\n        } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\n            // Already a factory function - use it as-is\n            callback(viewModelConfig[createViewModelKey]);\n        } else if ('instance' in viewModelConfig) {\n            // Fixed object instance - promote to createViewModel format for API consistency\n            var fixedInstance = viewModelConfig['instance'];\n            callback(function (params, componentInfo) {\n                return fixedInstance;\n            });\n        } else if ('viewModel' in viewModelConfig) {\n            // Resolved AMD module whose value is of the form { viewModel: ... }\n            resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\n        } else {\n            errorCallback('Unknown viewModel value: ' + viewModelConfig);\n        }\n    }\n\n    function cloneNodesFromTemplateSourceElement(elemInstance) {\n        switch (ko.utils.tagNameLower(elemInstance)) {\n            case 'script':\n                return ko.utils.parseHtmlFragment(elemInstance.text);\n            case 'textarea':\n                return ko.utils.parseHtmlFragment(elemInstance.value);\n            case 'template':\n                // For browsers with proper <template> element support (i.e., where the .content property\n                // gives a document fragment), use that document fragment.\n                if (isDocumentFragment(elemInstance.content)) {\n                    return ko.utils.cloneNodes(elemInstance.content.childNodes);\n                }\n        }\n\n        // Regular elements such as <div>, and <template> elements on old browsers that don't really\n        // understand <template> and just treat it as a regular container\n        return ko.utils.cloneNodes(elemInstance.childNodes);\n    }\n\n    function isDomElement(obj) {\n        if (window['HTMLElement']) {\n            return obj instanceof HTMLElement;\n        } else {\n            return obj && obj.tagName && obj.nodeType === 1;\n        }\n    }\n\n    function isDocumentFragment(obj) {\n        if (window['DocumentFragment']) {\n            return obj instanceof DocumentFragment;\n        } else {\n            return obj && obj.nodeType === 11;\n        }\n    }\n\n    function possiblyGetConfigFromAmd(errorCallback, config, callback) {\n        if (typeof config['require'] === 'string') {\n            // The config is the value of an AMD module\n            if (amdRequire || window['require']) {\n                (amdRequire || window['require'])([config['require']], callback);\n            } else {\n                errorCallback('Uses require, but no AMD loader is present');\n            }\n        } else {\n            callback(config);\n        }\n    }\n\n    function makeErrorCallback(componentName) {\n        return function (message) {\n            throw new Error('Component \\'' + componentName + '\\': ' + message);\n        };\n    }\n\n    ko.exportSymbol('components.register', ko.components.register);\n    ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\n    ko.exportSymbol('components.unregister', ko.components.unregister);\n\n    // Expose the default loader so that developers can directly ask it for configuration\n    // or to resolve configuration\n    ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\n\n    // By default, the default loader is the only registered component loader\n    ko.components['loaders'].push(ko.components.defaultLoader);\n\n    // Privately expose the underlying config registry for use in old-IE shim\n    ko.components._allRegisteredComponents = defaultConfigRegistry;\n})();\n(function (undefined) {\n    // Overridable API for determining which component name applies to a given node. By overriding this,\n    // you can for example map specific tagNames to components that are not preregistered.\n    ko.components['getComponentNameForNode'] = function(node) {\n        var tagNameLower = ko.utils.tagNameLower(node);\n        if (ko.components.isRegistered(tagNameLower)) {\n            // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\n            if (tagNameLower.indexOf('-') != -1 || ('' + node) == \"[object HTMLUnknownElement]\" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {\n                return tagNameLower;\n            }\n        }\n    };\n\n    ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\n        // Determine if it's really a custom element matching a component\n        if (node.nodeType === 1) {\n            var componentName = ko.components['getComponentNameForNode'](node);\n            if (componentName) {\n                // It does represent a component, so add a component binding for it\n                allBindings = allBindings || {};\n\n                if (allBindings['component']) {\n                    // Avoid silently overwriting some other 'component' binding that may already be on the element\n                    throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\n                }\n\n                var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\n\n                allBindings['component'] = valueAccessors\n                    ? function() { return componentBindingValue; }\n                    : componentBindingValue;\n            }\n        }\n\n        return allBindings;\n    }\n\n    var nativeBindingProviderInstance = new ko.bindingProvider();\n\n    function getComponentParamsFromCustomElement(elem, bindingContext) {\n        var paramsAttribute = elem.getAttribute('params');\n\n        if (paramsAttribute) {\n            var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\n                rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\n                    return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\n                }),\n                result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\n                    var paramValue = paramValueComputed.peek();\n                    // Does the evaluation of the parameter value unwrap any observables?\n                    if (!paramValueComputed.isActive()) {\n                        // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\n                        // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\n                        return paramValue;\n                    } else {\n                        // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\n                        // level of observability, and any inner (resulting model value) level of observability.\n                        // This means the component doesn't have to worry about multiple unwrapping. If the value is a\n                        // writable observable, the computed will also be writable and pass the value on to the observable.\n                        return ko.computed({\n                            'read': function() {\n                                return ko.utils.unwrapObservable(paramValueComputed());\n                            },\n                            'write': ko.isWriteableObservable(paramValue) && function(value) {\n                                paramValueComputed()(value);\n                            },\n                            disposeWhenNodeIsRemoved: elem\n                        });\n                    }\n                });\n\n            // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\n            // This is in case the developer wants to react to outer (binding) observability separately from inner\n            // (model value) observability, or in case the model value observable has subobservables.\n            if (!result.hasOwnProperty('$raw')) {\n                result['$raw'] = rawParamComputedValues;\n            }\n\n            return result;\n        } else {\n            // For consistency, absence of a \"params\" attribute is treated the same as the presence of\n            // any empty one. Otherwise component viewmodels need special code to check whether or not\n            // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\n            return { '$raw': {} };\n        }\n    }\n\n    // --------------------------------------------------------------------------------\n    // Compatibility code for older (pre-HTML5) IE browsers\n\n    if (ko.utils.ieVersion < 9) {\n        // Whenever you preregister a component, enable it as a custom element in the current document\n        ko.components['register'] = (function(originalFunction) {\n            return function(componentName) {\n                document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\n                return originalFunction.apply(this, arguments);\n            }\n        })(ko.components['register']);\n\n        // Whenever you create a document fragment, enable all preregistered component names as custom elements\n        // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\n        document.createDocumentFragment = (function(originalFunction) {\n            return function() {\n                var newDocFrag = originalFunction(),\n                    allComponents = ko.components._allRegisteredComponents;\n                for (var componentName in allComponents) {\n                    if (allComponents.hasOwnProperty(componentName)) {\n                        newDocFrag.createElement(componentName);\n                    }\n                }\n                return newDocFrag;\n            };\n        })(document.createDocumentFragment);\n    }\n})();(function(undefined) {\n\n    var componentLoadingOperationUniqueId = 0;\n\n    ko.bindingHandlers['component'] = {\n        'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\n            var currentViewModel,\n                currentLoadingOperationId,\n                disposeAssociatedComponentViewModel = function () {\n                    var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\n                    if (typeof currentViewModelDispose === 'function') {\n                        currentViewModelDispose.call(currentViewModel);\n                    }\n                    currentViewModel = null;\n                    // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\n                    currentLoadingOperationId = null;\n                },\n                originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\n\n            ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\n\n            ko.computed(function () {\n                var value = ko.utils.unwrapObservable(valueAccessor()),\n                    componentName, componentParams;\n\n                if (typeof value === 'string') {\n                    componentName = value;\n                } else {\n                    componentName = ko.utils.unwrapObservable(value['name']);\n                    componentParams = ko.utils.unwrapObservable(value['params']);\n                }\n\n                if (!componentName) {\n                    throw new Error('No component name specified');\n                }\n\n                var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\n                ko.components.get(componentName, function(componentDefinition) {\n                    // If this is not the current load operation for this element, ignore it.\n                    if (currentLoadingOperationId !== loadingOperationId) {\n                        return;\n                    }\n\n                    // Clean up previous state\n                    disposeAssociatedComponentViewModel();\n\n                    // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\n                    if (!componentDefinition) {\n                        throw new Error('Unknown component \\'' + componentName + '\\'');\n                    }\n                    cloneTemplateIntoElement(componentName, componentDefinition, element);\n                    var componentViewModel = createViewModel(componentDefinition, element, originalChildNodes, componentParams),\n                        childBindingContext = bindingContext['createChildContext'](componentViewModel, /* dataItemAlias */ undefined, function(ctx) {\n                            ctx['$component'] = componentViewModel;\n                            ctx['$componentTemplateNodes'] = originalChildNodes;\n                        });\n                    currentViewModel = componentViewModel;\n                    ko.applyBindingsToDescendants(childBindingContext, element);\n                });\n            }, null, { disposeWhenNodeIsRemoved: element });\n\n            return { 'controlsDescendantBindings': true };\n        }\n    };\n\n    ko.virtualElements.allowedBindings['component'] = true;\n\n    function cloneTemplateIntoElement(componentName, componentDefinition, element) {\n        var template = componentDefinition['template'];\n        if (!template) {\n            throw new Error('Component \\'' + componentName + '\\' has no template');\n        }\n\n        var clonedNodesArray = ko.utils.cloneNodes(template);\n        ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\n    }\n\n    function createViewModel(componentDefinition, element, originalChildNodes, componentParams) {\n        var componentViewModelFactory = componentDefinition['createViewModel'];\n        return componentViewModelFactory\n            ? componentViewModelFactory.call(componentDefinition, componentParams, { 'element': element, 'templateNodes': originalChildNodes })\n            : componentParams; // Template-only component\n    }\n\n})();\nvar attrHtmlToJavascriptMap = { 'class': 'className', 'for': 'htmlFor' };\nko.bindingHandlers['attr'] = {\n    'update': function(element, valueAccessor, allBindings) {\n        var value = ko.utils.unwrapObservable(valueAccessor()) || {};\n        ko.utils.objectForEach(value, function(attrName, attrValue) {\n            attrValue = ko.utils.unwrapObservable(attrValue);\n\n            // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\n            // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\n            // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\n            var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\n            if (toRemove)\n                element.removeAttribute(attrName);\n\n            // In IE <= 7 and IE8 Quirks Mode, you have to use the Javascript property name instead of the\n            // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\n            // but instead of figuring out the mode, we'll just set the attribute through the Javascript\n            // property for IE <= 8.\n            if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavascriptMap) {\n                attrName = attrHtmlToJavascriptMap[attrName];\n                if (toRemove)\n                    element.removeAttribute(attrName);\n                else\n                    element[attrName] = attrValue;\n            } else if (!toRemove) {\n                element.setAttribute(attrName, attrValue.toString());\n            }\n\n            // Treat \"name\" specially - although you can think of it as an attribute, it also needs\n            // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\n            // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\n            // entirely, and there's no strong reason to allow for such casing in HTML.\n            if (attrName === \"name\") {\n                ko.utils.setElementName(element, toRemove ? \"\" : attrValue.toString());\n            }\n        });\n    }\n};\n(function() {\n\nko.bindingHandlers['checked'] = {\n    'after': ['value', 'attr'],\n    'init': function (element, valueAccessor, allBindings) {\n        var checkedValue = ko.pureComputed(function() {\n            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\n            if (allBindings['has']('checkedValue')) {\n                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\n            } else if (allBindings['has']('value')) {\n                return ko.utils.unwrapObservable(allBindings.get('value'));\n            }\n\n            return element.value;\n        });\n\n        function updateModel() {\n            // This updates the model value from the view value.\n            // It runs in response to DOM events (click) and changes in checkedValue.\n            var isChecked = element.checked,\n                elemValue = useCheckedValue ? checkedValue() : isChecked;\n\n            // When we're first setting up this computed, don't change any model state.\n            if (ko.computedContext.isInitial()) {\n                return;\n            }\n\n            // We can ignore unchecked radio buttons, because some other radio\n            // button will be getting checked, and that one can take care of updating state.\n            if (isRadio && !isChecked) {\n                return;\n            }\n\n            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\n            if (valueIsArray) {\n                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue;\n                if (oldElemValue !== elemValue) {\n                    // When we're responding to the checkedValue changing, and the element is\n                    // currently checked, replace the old elem value with the new elem value\n                    // in the model array.\n                    if (isChecked) {\n                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\n                        ko.utils.addOrRemoveItem(writableValue, oldElemValue, false);\n                    }\n\n                    oldElemValue = elemValue;\n                } else {\n                    // When we're responding to the user having checked/unchecked a checkbox,\n                    // add/remove the element value to the model array.\n                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\n                }\n                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\n                    modelValue(writableValue);\n                }\n            } else {\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\n            }\n        };\n\n        function updateView() {\n            // This updates the view value from the model value.\n            // It runs in response to changes in the bound (checked) value.\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n            if (valueIsArray) {\n                // When a checkbox is bound to an array, being checked represents its value being present in that array\n                element.checked = ko.utils.arrayIndexOf(modelValue, checkedValue()) >= 0;\n            } else if (isCheckbox) {\n                // When a checkbox is bound to any other value (not an array), being checked represents the value being trueish\n                element.checked = modelValue;\n            } else {\n                // For radio buttons, being checked means that the radio button's value corresponds to the model value\n                element.checked = (checkedValue() === modelValue);\n            }\n        };\n\n        var isCheckbox = element.type == \"checkbox\",\n            isRadio = element.type == \"radio\";\n\n        // Only bind to check boxes and radio buttons\n        if (!isCheckbox && !isRadio) {\n            return;\n        }\n\n        var rawValue = valueAccessor(),\n            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\n            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\n            oldElemValue = valueIsArray ? checkedValue() : undefined,\n            useCheckedValue = isRadio || valueIsArray;\n\n        // IE 6 won't allow radio buttons to be selected unless they have a name\n        if (isRadio && !element.name)\n            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\n\n        // Set up two computeds to update the binding:\n\n        // The first responds to changes in the checkedValue value and to element clicks\n        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\n        ko.utils.registerEventHandler(element, \"click\", updateModel);\n\n        // The second responds to changes in the model value (the one associated with the checked binding)\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n\n        rawValue = undefined;\n    }\n};\nko.expressionRewriting.twoWayBindings['checked'] = true;\n\nko.bindingHandlers['checkedValue'] = {\n    'update': function (element, valueAccessor) {\n        element.value = ko.utils.unwrapObservable(valueAccessor());\n    }\n};\n\n})();var classesWrittenByBindingKey = '__ko__cssValue';\nko.bindingHandlers['css'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor());\n        if (value !== null && typeof value == \"object\") {\n            ko.utils.objectForEach(value, function(className, shouldHaveClass) {\n                shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\n                ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\n            });\n        } else {\n            value = ko.utils.stringTrim(String(value || '')); // Make sure we don't try to store or set a non-string value\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\n            element[classesWrittenByBindingKey] = value;\n            ko.utils.toggleDomNodeCssClass(element, value, true);\n        }\n    }\n};\nko.bindingHandlers['enable'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor());\n        if (value && element.disabled)\n            element.removeAttribute(\"disabled\");\n        else if ((!value) && (!element.disabled))\n            element.disabled = true;\n    }\n};\n\nko.bindingHandlers['disable'] = {\n    'update': function (element, valueAccessor) {\n        ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\n    }\n};\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\n// e.g. click:handler instead of the usual full-length event:{click:handler}\nfunction makeEventHandlerShortcut(eventName) {\n    ko.bindingHandlers[eventName] = {\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n            var newValueAccessor = function () {\n                var result = {};\n                result[eventName] = valueAccessor();\n                return result;\n            };\n            return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\n        }\n    }\n}\n\nko.bindingHandlers['event'] = {\n    'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n        var eventsToHandle = valueAccessor() || {};\n        ko.utils.objectForEach(eventsToHandle, function(eventName) {\n            if (typeof eventName == \"string\") {\n                ko.utils.registerEventHandler(element, eventName, function (event) {\n                    var handlerReturnValue;\n                    var handlerFunction = valueAccessor()[eventName];\n                    if (!handlerFunction)\n                        return;\n\n                    try {\n                        // Take all the event args, and prefix with the viewmodel\n                        var argsForHandler = ko.utils.makeArray(arguments);\n                        viewModel = bindingContext['$data'];\n                        argsForHandler.unshift(viewModel);\n                        handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\n                    } finally {\n                        if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\n                            if (event.preventDefault)\n                                event.preventDefault();\n                            else\n                                event.returnValue = false;\n                        }\n                    }\n\n                    var bubble = allBindings.get(eventName + 'Bubble') !== false;\n                    if (!bubble) {\n                        event.cancelBubble = true;\n                        if (event.stopPropagation)\n                            event.stopPropagation();\n                    }\n                });\n            }\n        });\n    }\n};\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\nko.bindingHandlers['foreach'] = {\n    makeTemplateValueAccessor: function(valueAccessor) {\n        return function() {\n            var modelValue = valueAccessor(),\n                unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\n\n            // If unwrappedValue is the array, pass in the wrapped value on its own\n            // The value will be unwrapped and tracked within the template binding\n            // (See https://github.com/SteveSanderson/knockout/issues/523)\n            if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\n                return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\n\n            // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\n            ko.utils.unwrapObservable(modelValue);\n            return {\n                'foreach': unwrappedValue['data'],\n                'as': unwrappedValue['as'],\n                'includeDestroyed': unwrappedValue['includeDestroyed'],\n                'afterAdd': unwrappedValue['afterAdd'],\n                'beforeRemove': unwrappedValue['beforeRemove'],\n                'afterRender': unwrappedValue['afterRender'],\n                'beforeMove': unwrappedValue['beforeMove'],\n                'afterMove': unwrappedValue['afterMove'],\n                'templateEngine': ko.nativeTemplateEngine.instance\n            };\n        };\n    },\n    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\n    },\n    'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n        return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\n    }\n};\nko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\nko.virtualElements.allowedBindings['foreach'] = true;\nvar hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\nvar hasfocusLastValue = '__ko_hasfocusLastValue';\nko.bindingHandlers['hasfocus'] = {\n    'init': function(element, valueAccessor, allBindings) {\n        var handleElementFocusChange = function(isFocused) {\n            // Where possible, ignore which event was raised and determine focus state using activeElement,\n            // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\n            // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\n            // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\n            // from calling 'blur()' on the element when it loses focus.\n            // Discussion at https://github.com/SteveSanderson/knockout/pull/352\n            element[hasfocusUpdatingProperty] = true;\n            var ownerDoc = element.ownerDocument;\n            if (\"activeElement\" in ownerDoc) {\n                var active;\n                try {\n                    active = ownerDoc.activeElement;\n                } catch(e) {\n                    // IE9 throws if you access activeElement during page load (see issue #703)\n                    active = ownerDoc.body;\n                }\n                isFocused = (active === element);\n            }\n            var modelValue = valueAccessor();\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\n\n            //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\n            element[hasfocusLastValue] = isFocused;\n            element[hasfocusUpdatingProperty] = false;\n        };\n        var handleElementFocusIn = handleElementFocusChange.bind(null, true);\n        var handleElementFocusOut = handleElementFocusChange.bind(null, false);\n\n        ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\n        ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\n        ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\n        ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\n    },\n    'update': function(element, valueAccessor) {\n        var value = !!ko.utils.unwrapObservable(valueAccessor());\n\n        if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\n            value ? element.focus() : element.blur();\n\n            // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\n            // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\n            // element was focused already.\n            if (!value && element[hasfocusLastValue]) {\n                element.ownerDocument.body.focus();\n            }\n\n            // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\n            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\n        }\n    }\n};\nko.expressionRewriting.twoWayBindings['hasfocus'] = true;\n\nko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\nko.expressionRewriting.twoWayBindings['hasFocus'] = true;\nko.bindingHandlers['html'] = {\n    'init': function() {\n        // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor) {\n        // setHtml will unwrap the value if needed\n        ko.utils.setHtml(element, valueAccessor());\n    }\n};\n// Makes a binding like with or if\nfunction makeWithIfBinding(bindingKey, isWith, isNot, makeContextCallback) {\n    ko.bindingHandlers[bindingKey] = {\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n            var didDisplayOnLastUpdate,\n                savedNodes;\n            ko.computed(function() {\n                var rawValue = valueAccessor(),\n                    dataValue = ko.utils.unwrapObservable(rawValue),\n                    shouldDisplay = !isNot !== !dataValue, // equivalent to isNot ? !dataValue : !!dataValue\n                    isFirstRender = !savedNodes,\n                    needsRefresh = isFirstRender || isWith || (shouldDisplay !== didDisplayOnLastUpdate);\n\n                if (needsRefresh) {\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\n                    }\n\n                    if (shouldDisplay) {\n                        if (!isFirstRender) {\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\n                        }\n                        ko.applyBindingsToDescendants(makeContextCallback ? makeContextCallback(bindingContext, rawValue) : bindingContext, element);\n                    } else {\n                        ko.virtualElements.emptyNode(element);\n                    }\n\n                    didDisplayOnLastUpdate = shouldDisplay;\n                }\n            }, null, { disposeWhenNodeIsRemoved: element });\n            return { 'controlsDescendantBindings': true };\n        }\n    };\n    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\n    ko.virtualElements.allowedBindings[bindingKey] = true;\n}\n\n// Construct the actual binding handlers\nmakeWithIfBinding('if');\nmakeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\nmakeWithIfBinding('with', true /* isWith */, false /* isNot */,\n    function(bindingContext, dataValue) {\n        return bindingContext.createStaticChildContext(dataValue);\n    }\n);\nvar captionPlaceholder = {};\nko.bindingHandlers['options'] = {\n    'init': function(element) {\n        if (ko.utils.tagNameLower(element) !== \"select\")\n            throw new Error(\"options binding applies only to SELECT elements\");\n\n        // Remove all existing <option>s.\n        while (element.length > 0) {\n            element.remove(0);\n        }\n\n        // Ensures that the binding processor doesn't try to bind the options\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor, allBindings) {\n        function selectedOptions() {\n            return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\n        }\n\n        var selectWasPreviouslyEmpty = element.length == 0,\n            multiple = element.multiple,\n            previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\n            unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\n            valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\n            includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\n            arrayToDomNodeChildrenOptions = {},\n            captionValue,\n            filteredArray,\n            previousSelectedValues = [];\n\n        if (!valueAllowUnset) {\n            if (multiple) {\n                previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\n            } else if (element.selectedIndex >= 0) {\n                previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\n            }\n        }\n\n        if (unwrappedArray) {\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                unwrappedArray = [unwrappedArray];\n\n            // Filter out any entries marked as destroyed\n            filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\n                return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n            });\n\n            // If caption is included, add it to the array\n            if (allBindings['has']('optionsCaption')) {\n                captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\n                // If caption value is null or undefined, don't show a caption\n                if (captionValue !== null && captionValue !== undefined) {\n                    filteredArray.unshift(captionPlaceholder);\n                }\n            }\n        } else {\n            // If a falsy value is provided (e.g. null), we'll simply empty the select element\n        }\n\n        function applyToObject(object, predicate, defaultValue) {\n            var predicateType = typeof predicate;\n            if (predicateType == \"function\")    // Given a function; run it against the data value\n                return predicate(object);\n            else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\n                return object[predicate];\n            else                                // Given no optionsText arg; use the data value itself\n                return defaultValue;\n        }\n\n        // The following functions can run at two different times:\n        // The first is when the whole array is being updated directly from this binding handler.\n        // The second is when an observable value for a specific array entry is updated.\n        // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\n        var itemUpdate = false;\n        function optionForArrayItem(arrayEntry, index, oldOptions) {\n            if (oldOptions.length) {\n                previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\n                itemUpdate = true;\n            }\n            var option = element.ownerDocument.createElement(\"option\");\n            if (arrayEntry === captionPlaceholder) {\n                ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\n                ko.selectExtensions.writeValue(option, undefined);\n            } else {\n                // Apply a value to the option element\n                var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\n                ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\n\n                // Apply some text to the option element\n                var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\n                ko.utils.setTextContent(option, optionText);\n            }\n            return [option];\n        }\n\n        // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\n        // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\n        arrayToDomNodeChildrenOptions['beforeRemove'] =\n            function (option) {\n                element.removeChild(option);\n            };\n\n        function setSelectionCallback(arrayEntry, newOptions) {\n            if (itemUpdate && valueAllowUnset) {\n                // The model value is authoritative, so make sure its value is the one selected\n                // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n            } else if (previousSelectedValues.length) {\n                // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\n                // That's why we first added them without selection. Now it's time to set the selection.\n                var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\n                ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\n\n                // If this option was changed from being selected during a single-item update, notify the change\n                if (itemUpdate && !isSelected) {\n                    ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                }\n            }\n        }\n\n        var callback = setSelectionCallback;\n        if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\n            callback = function(arrayEntry, newOptions) {\n                setSelectionCallback(arrayEntry, newOptions);\n                ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\n            }\n        }\n\n        ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\n\n        ko.dependencyDetection.ignore(function () {\n            if (valueAllowUnset) {\n                // The model value is authoritative, so make sure its value is the one selected\n                ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\n            } else {\n                // Determine if the selection has changed as a result of updating the options list\n                var selectionChanged;\n                if (multiple) {\n                    // For a multiple-select box, compare the new selection count to the previous one\n                    // But if nothing was selected before, the selection can't have changed\n                    selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\n                } else {\n                    // For a single-select box, compare the current value to the previous value\n                    // But if nothing was selected before or nothing is selected now, just look for a change in selection\n                    selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\n                        ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\n                        : (previousSelectedValues.length || element.selectedIndex >= 0);\n                }\n\n                // Ensure consistency between model value and selected option.\n                // If the dropdown was changed so that selection is no longer the same,\n                // notify the value or selectedOptions binding.\n                if (selectionChanged) {\n                    ko.utils.triggerEvent(element, \"change\");\n                }\n            }\n        });\n\n        // Workaround for IE bug\n        ko.utils.ensureSelectElementIsRenderedCorrectly(element);\n\n        if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\n            element.scrollTop = previousScrollTop;\n    }\n};\nko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\nko.bindingHandlers['selectedOptions'] = {\n    'after': ['options', 'foreach'],\n    'init': function (element, valueAccessor, allBindings) {\n        ko.utils.registerEventHandler(element, \"change\", function () {\n            var value = valueAccessor(), valueToWrite = [];\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\n                if (node.selected)\n                    valueToWrite.push(ko.selectExtensions.readValue(node));\n            });\n            ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\n        });\n    },\n    'update': function (element, valueAccessor) {\n        if (ko.utils.tagNameLower(element) != \"select\")\n            throw new Error(\"values binding applies only to SELECT elements\");\n\n        var newValue = ko.utils.unwrapObservable(valueAccessor()),\n            previousScrollTop = element.scrollTop;\n\n        if (newValue && typeof newValue.length == \"number\") {\n            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\n                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\n                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE\n                    ko.utils.setOptionNodeSelectionState(node, isSelected);\n                }\n            });\n        }\n\n        element.scrollTop = previousScrollTop;\n    }\n};\nko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\nko.bindingHandlers['style'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor() || {});\n        ko.utils.objectForEach(value, function(styleName, styleValue) {\n            styleValue = ko.utils.unwrapObservable(styleValue);\n\n            if (styleValue === null || styleValue === undefined || styleValue === false) {\n                // Empty string removes the value, whereas null/undefined have no effect\n                styleValue = \"\";\n            }\n\n            element.style[styleName] = styleValue;\n        });\n    }\n};\nko.bindingHandlers['submit'] = {\n    'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n        if (typeof valueAccessor() != \"function\")\n            throw new Error(\"The value for a submit binding must be a function\");\n        ko.utils.registerEventHandler(element, \"submit\", function (event) {\n            var handlerReturnValue;\n            var value = valueAccessor();\n            try { handlerReturnValue = value.call(bindingContext['$data'], element); }\n            finally {\n                if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\n                    if (event.preventDefault)\n                        event.preventDefault();\n                    else\n                        event.returnValue = false;\n                }\n            }\n        });\n    }\n};\nko.bindingHandlers['text'] = {\n    'init': function() {\n        // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\n        // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\n        return { 'controlsDescendantBindings': true };\n    },\n    'update': function (element, valueAccessor) {\n        ko.utils.setTextContent(element, valueAccessor());\n    }\n};\nko.virtualElements.allowedBindings['text'] = true;\n(function () {\n\nif (window && window.navigator) {\n    var parseVersion = function (matches) {\n        if (matches) {\n            return parseFloat(matches[1]);\n        }\n    };\n\n    // Detect various browser versions because some old versions don't fully support the 'input' event\n    var operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()),\n        userAgent = window.navigator.userAgent,\n        safariVersion = parseVersion(userAgent.match(/^(?:(?!chrome).)*version\\/([^ ]*) safari/i)),\n        firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]*)/));\n}\n\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\n// But it does fire the 'selectionchange' event on many of those, presumably because the\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\n// fired at the document level only and doesn't directly indicate which element changed. We\n// set up just one event handler for the document and use 'activeElement' to determine which\n// element was changed.\nif (ko.utils.ieVersion < 10) {\n    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\n        selectionChangeHandlerName = ko.utils.domData.nextKey();\n    var selectionChangeHandler = function(event) {\n        var target = this.activeElement,\n            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\n        if (handler) {\n            handler(event);\n        }\n    };\n    var registerForSelectionChangeEvent = function (element, handler) {\n        var ownerDoc = element.ownerDocument;\n        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\n            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\n            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\n        }\n        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\n    };\n}\n\nko.bindingHandlers['textInput'] = {\n    'init': function (element, valueAccessor, allBindings) {\n\n        var previousElementValue = element.value,\n            timeoutHandle,\n            elementValueBeforeEvent;\n\n        var updateModel = function (event) {\n            clearTimeout(timeoutHandle);\n            elementValueBeforeEvent = timeoutHandle = undefined;\n\n            var elementValue = element.value;\n            if (previousElementValue !== elementValue) {\n                // Provide a way for tests to know exactly which event was processed\n                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\n                previousElementValue = elementValue;\n                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\n            }\n        };\n\n        var deferUpdateModel = function (event) {\n            if (!timeoutHandle) {\n                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\n                // event firing and the updateModel function running. This allows us to ignore model\n                // updates that are from the previous state of the element, usually due to techniques\n                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\n                elementValueBeforeEvent = element.value;\n                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\n                timeoutHandle = ko.utils.setTimeout(handler, 4);\n            }\n        };\n\n        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\n        // so we'll make sure all updates are asynchronous\n        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel;\n\n        var updateView = function () {\n            var modelValue = ko.utils.unwrapObservable(valueAccessor());\n\n            if (modelValue === null || modelValue === undefined) {\n                modelValue = '';\n            }\n\n            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\n                ko.utils.setTimeout(updateView, 4);\n                return;\n            }\n\n            // Update the element only if the element and model are different. On some browsers, updating the value\n            // will move the cursor to the end of the input, which would be bad while the user is typing.\n            if (element.value !== modelValue) {\n                previousElementValue = modelValue;  // Make sure we ignore events (propertychange) that result from updating the value\n                element.value = modelValue;\n            }\n        };\n\n        var onEvent = function (event, handler) {\n            ko.utils.registerEventHandler(element, event, handler);\n        };\n\n        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\n            // Provide a way for tests to specify exactly which events are bound\n            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\n                if (eventName.slice(0,5) == 'after') {\n                    onEvent(eventName.slice(5), deferUpdateModel);\n                } else {\n                    onEvent(eventName, updateModel);\n                }\n            });\n        } else {\n            if (ko.utils.ieVersion < 10) {\n                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\n                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\n                // but that's an acceptable compromise for this binding. IE 9 does support 'input', but since it doesn't fire it\n                // when using autocomplete, we'll use 'propertychange' for it also.\n                onEvent('propertychange', function(event) {\n                    if (event.propertyName === 'value') {\n                        ieUpdateModel(event);\n                    }\n                });\n\n                if (ko.utils.ieVersion == 8) {\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\n                    // events too.\n                    onEvent('keyup', updateModel);      // A single keystoke\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\n                }\n                if (ko.utils.ieVersion >= 8) {\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\n                    // These are also needed in IE8 because of the bug described above.\n                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\n                    onEvent('dragend', deferUpdateModel);\n                }\n            } else {\n                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\n                // through the user interface.\n                onEvent('input', updateModel);\n\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\n                    onEvent('keydown', deferUpdateModel);\n                    onEvent('paste', deferUpdateModel);\n                    onEvent('cut', deferUpdateModel);\n                } else if (operaVersion < 11) {\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\n                    // We can try to catch some of those using 'keydown'.\n                    onEvent('keydown', deferUpdateModel);\n                } else if (firefoxVersion < 4.0) {\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\n                    onEvent('DOMAutoComplete', updateModel);\n\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\n                    onEvent('dragdrop', updateModel);       // <3.5\n                    onEvent('drop', updateModel);           // 3.5\n                }\n            }\n        }\n\n        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\n        onEvent('change', updateModel);\n\n        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\n    }\n};\nko.expressionRewriting.twoWayBindings['textInput'] = true;\n\n// textinput is an alias for textInput\nko.bindingHandlers['textinput'] = {\n    // preprocess is the only way to set up a full alias\n    'preprocess': function (value, name, addBinding) {\n        addBinding('textInput', value);\n    }\n};\n\n})();ko.bindingHandlers['uniqueName'] = {\n    'init': function (element, valueAccessor) {\n        if (valueAccessor()) {\n            var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\n            ko.utils.setElementName(element, name);\n        }\n    }\n};\nko.bindingHandlers['uniqueName'].currentIndex = 0;\nko.bindingHandlers['value'] = {\n    'after': ['options', 'foreach'],\n    'init': function (element, valueAccessor, allBindings) {\n        // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\n        if (element.tagName.toLowerCase() == \"input\" && (element.type == \"checkbox\" || element.type == \"radio\")) {\n            ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\n            return;\n        }\n\n        // Always catch \"change\" event; possibly other events too if asked\n        var eventsToCatch = [\"change\"];\n        var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\n        var propertyChangedFired = false;\n        var elementValueBeforeEvent = null;\n\n        if (requestedEventsToCatch) {\n            if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\n                requestedEventsToCatch = [requestedEventsToCatch];\n            ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\n            eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\n        }\n\n        var valueUpdateHandler = function() {\n            elementValueBeforeEvent = null;\n            propertyChangedFired = false;\n            var modelValue = valueAccessor();\n            var elementValue = ko.selectExtensions.readValue(element);\n            ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\n        }\n\n        // Workaround for https://github.com/SteveSanderson/knockout/issues/122\n        // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\n        var ieAutoCompleteHackNeeded = ko.utils.ieVersion && element.tagName.toLowerCase() == \"input\" && element.type == \"text\"\n                                       && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\n        if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\n            ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\n            ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\n            ko.utils.registerEventHandler(element, \"blur\", function() {\n                if (propertyChangedFired) {\n                    valueUpdateHandler();\n                }\n            });\n        }\n\n        ko.utils.arrayForEach(eventsToCatch, function(eventName) {\n            // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\n            // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\n            // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\n            var handler = valueUpdateHandler;\n            if (ko.utils.stringStartsWith(eventName, \"after\")) {\n                handler = function() {\n                    // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\n                    // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\n                    // at the earliest asynchronous opportunity. We store this temporary information so that\n                    // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\n                    // we can overwrite that model value change with the value the user just typed. Otherwise,\n                    // techniques like rateLimit can trigger model changes at critical moments that will\n                    // override the user's inputs, causing keystrokes to be lost.\n                    elementValueBeforeEvent = ko.selectExtensions.readValue(element);\n                    ko.utils.setTimeout(valueUpdateHandler, 0);\n                };\n                eventName = eventName.substring(\"after\".length);\n            }\n            ko.utils.registerEventHandler(element, eventName, handler);\n        });\n\n        var updateFromModel = function () {\n            var newValue = ko.utils.unwrapObservable(valueAccessor());\n            var elementValue = ko.selectExtensions.readValue(element);\n\n            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\n                ko.utils.setTimeout(updateFromModel, 0);\n                return;\n            }\n\n            var valueHasChanged = (newValue !== elementValue);\n\n            if (valueHasChanged) {\n                if (ko.utils.tagNameLower(element) === \"select\") {\n                    var allowUnset = allBindings.get('valueAllowUnset');\n                    var applyValueAction = function () {\n                        ko.selectExtensions.writeValue(element, newValue, allowUnset);\n                    };\n                    applyValueAction();\n\n                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\n                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\n                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\n                    } else {\n                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\n                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\n                        // to apply the value as well.\n                        ko.utils.setTimeout(applyValueAction, 0);\n                    }\n                } else {\n                    ko.selectExtensions.writeValue(element, newValue);\n                }\n            }\n        };\n\n        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\n    },\n    'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\n};\nko.expressionRewriting.twoWayBindings['value'] = true;\nko.bindingHandlers['visible'] = {\n    'update': function (element, valueAccessor) {\n        var value = ko.utils.unwrapObservable(valueAccessor());\n        var isCurrentlyVisible = !(element.style.display == \"none\");\n        if (value && !isCurrentlyVisible)\n            element.style.display = \"\";\n        else if ((!value) && isCurrentlyVisible)\n            element.style.display = \"none\";\n    }\n};\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\nmakeEventHandlerShortcut('click');\n// If you want to make a custom template engine,\n//\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\n//\n//        function (templateSource, bindingContext, options) {\n//            // - templateSource.text() is the text of the template you should render\n//            // - bindingContext.$data is the data you should pass into the template\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\n//            //     and bindingContext.$root available in the template too\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\n//            // - templateDocument is the document object of the template\n//            //\n//            // Return value: an array of DOM nodes\n//        }\n//\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\n//\n//        function (script) {\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\n//        }\n//\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\n\nko.templateEngine = function () { };\n\nko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n    throw new Error(\"Override renderTemplateSource\");\n};\n\nko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\n    throw new Error(\"Override createJavaScriptEvaluatorBlock\");\n};\n\nko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\n    // Named template\n    if (typeof template == \"string\") {\n        templateDocument = templateDocument || document;\n        var elem = templateDocument.getElementById(template);\n        if (!elem)\n            throw new Error(\"Cannot find template with ID \" + template);\n        return new ko.templateSources.domElement(elem);\n    } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\n        // Anonymous template\n        return new ko.templateSources.anonymousTemplate(template);\n    } else\n        throw new Error(\"Unknown template type: \" + template);\n};\n\nko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\n    return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\n};\n\nko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\n    // Skip rewriting if requested\n    if (this['allowTemplateRewriting'] === false)\n        return true;\n    return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\n};\n\nko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\n    var templateSource = this['makeTemplateSource'](template, templateDocument);\n    var rewritten = rewriterCallback(templateSource['text']());\n    templateSource['text'](rewritten);\n    templateSource['data'](\"isRewritten\", true);\n};\n\nko.exportSymbol('templateEngine', ko.templateEngine);\n\nko.templateRewriting = (function () {\n    var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\n    var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\n\n    function validateDataBindValuesForRewriting(keyValueArray) {\n        var allValidators = ko.expressionRewriting.bindingRewriteValidators;\n        for (var i = 0; i < keyValueArray.length; i++) {\n            var key = keyValueArray[i]['key'];\n            if (allValidators.hasOwnProperty(key)) {\n                var validator = allValidators[key];\n\n                if (typeof validator === \"function\") {\n                    var possibleErrorMessage = validator(keyValueArray[i]['value']);\n                    if (possibleErrorMessage)\n                        throw new Error(possibleErrorMessage);\n                } else if (!validator) {\n                    throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\n                }\n            }\n        }\n    }\n\n    function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\n        var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\n        validateDataBindValuesForRewriting(dataBindKeyValueArray);\n        var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\n\n        // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\n        // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\n        // extra indirection.\n        var applyBindingsToNextSiblingScript =\n            \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\n        return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\n    }\n\n    return {\n        ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\n            if (!templateEngine['isTemplateRewritten'](template, templateDocument))\n                templateEngine['rewriteTemplate'](template, function (htmlString) {\n                    return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\n                }, templateDocument);\n        },\n\n        memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\n            return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\n            }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\n                return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\n            });\n        },\n\n        applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\n            return ko.memoization.memoize(function (domNode, bindingContext) {\n                var nodeToBind = domNode.nextSibling;\n                if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\n                    ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\n                }\n            });\n        }\n    }\n})();\n\n\n// Exported only because it has to be referenced by string lookup from within rewritten template\nko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\n(function() {\n    // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\n    // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\n    //\n    // Two are provided by default:\n    //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\n    //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\n    //                                           without reading/writing the actual element text content, since it will be overwritten\n    //                                           with the rendered template output.\n    // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\n    // Template sources need to have the following functions:\n    //   text() \t\t\t- returns the template text from your storage location\n    //   text(value)\t\t- writes the supplied template text to your storage location\n    //   data(key)\t\t\t- reads values stored using data(key, value) - see below\n    //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\n    //\n    // Optionally, template sources can also have the following functions:\n    //   nodes()            - returns a DOM element containing the nodes of this template, where available\n    //   nodes(value)       - writes the given DOM element to your storage location\n    // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\n    // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\n    //\n    // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\n    // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\n\n    ko.templateSources = {};\n\n    // ---- ko.templateSources.domElement -----\n\n    // template types\n    var templateScript = 1,\n        templateTextArea = 2,\n        templateTemplate = 3,\n        templateElement = 4;\n\n    ko.templateSources.domElement = function(element) {\n        this.domElement = element;\n\n        if (element) {\n            var tagNameLower = ko.utils.tagNameLower(element);\n            this.templateType =\n                tagNameLower === \"script\" ? templateScript :\n                tagNameLower === \"textarea\" ? templateTextArea :\n                    // For browsers with proper <template> element support, where the .content property gives a document fragment\n                tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\n                templateElement;\n        }\n    }\n\n    ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\n        var elemContentsProperty = this.templateType === templateScript ? \"text\"\n                                 : this.templateType === templateTextArea ? \"value\"\n                                 : \"innerHTML\";\n\n        if (arguments.length == 0) {\n            return this.domElement[elemContentsProperty];\n        } else {\n            var valueToWrite = arguments[0];\n            if (elemContentsProperty === \"innerHTML\")\n                ko.utils.setHtml(this.domElement, valueToWrite);\n            else\n                this.domElement[elemContentsProperty] = valueToWrite;\n        }\n    };\n\n    var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\n    ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\n        if (arguments.length === 1) {\n            return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\n        } else {\n            ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\n        }\n    };\n\n    var templatesDomDataKey = ko.utils.domData.nextKey();\n    function getTemplateDomData(element) {\n        return ko.utils.domData.get(element, templatesDomDataKey) || {};\n    }\n    function setTemplateDomData(element, data) {\n        ko.utils.domData.set(element, templatesDomDataKey, data);\n    }\n\n    ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\n        var element = this.domElement;\n        if (arguments.length == 0) {\n            var templateData = getTemplateDomData(element),\n                containerData = templateData.containerData;\n            return containerData || (\n                this.templateType === templateTemplate ? element.content :\n                this.templateType === templateElement ? element :\n                undefined);\n        } else {\n            var valueToWrite = arguments[0];\n            setTemplateDomData(element, {containerData: valueToWrite});\n        }\n    };\n\n    // ---- ko.templateSources.anonymousTemplate -----\n    // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\n    // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\n    // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\n\n    ko.templateSources.anonymousTemplate = function(element) {\n        this.domElement = element;\n    }\n    ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\n    ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\n    ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\n        if (arguments.length == 0) {\n            var templateData = getTemplateDomData(this.domElement);\n            if (templateData.textData === undefined && templateData.containerData)\n                templateData.textData = templateData.containerData.innerHTML;\n            return templateData.textData;\n        } else {\n            var valueToWrite = arguments[0];\n            setTemplateDomData(this.domElement, {textData: valueToWrite});\n        }\n    };\n\n    ko.exportSymbol('templateSources', ko.templateSources);\n    ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\n    ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\n})();\n(function () {\n    var _templateEngine;\n    ko.setTemplateEngine = function (templateEngine) {\n        if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\n            throw new Error(\"templateEngine must inherit from ko.templateEngine\");\n        _templateEngine = templateEngine;\n    }\n\n    function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\n        var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\n        while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\n            nextInQueue = ko.virtualElements.nextSibling(node);\n            action(node, nextInQueue);\n        }\n    }\n\n    function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\n        // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\n        // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\n        // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\n        // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\n        // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\n\n        if (continuousNodeArray.length) {\n            var firstNode = continuousNodeArray[0],\n                lastNode = continuousNodeArray[continuousNodeArray.length - 1],\n                parentNode = firstNode.parentNode,\n                provider = ko.bindingProvider['instance'],\n                preprocessNode = provider['preprocessNode'];\n\n            if (preprocessNode) {\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\n                    var nodePreviousSibling = node.previousSibling;\n                    var newNodes = preprocessNode.call(provider, node);\n                    if (newNodes) {\n                        if (node === firstNode)\n                            firstNode = newNodes[0] || nextNodeInRange;\n                        if (node === lastNode)\n                            lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\n                    }\n                });\n\n                // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\n                // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\n                // first node needs to be in the array).\n                continuousNodeArray.length = 0;\n                if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\n                    return;\n                }\n                if (firstNode === lastNode) {\n                    continuousNodeArray.push(firstNode);\n                } else {\n                    continuousNodeArray.push(firstNode, lastNode);\n                    ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\n                }\n            }\n\n            // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\n            // whereas a regular applyBindings won't introduce new memoized nodes\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\n                if (node.nodeType === 1 || node.nodeType === 8)\n                    ko.applyBindings(bindingContext, node);\n            });\n            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\n                if (node.nodeType === 1 || node.nodeType === 8)\n                    ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\n            });\n\n            // Make sure any changes done by applyBindings or unmemoize are reflected in the array\n            ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\n        }\n    }\n\n    function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\n        return nodeOrNodeArray.nodeType ? nodeOrNodeArray\n                                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\n                                        : null;\n    }\n\n    function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\n        options = options || {};\n        var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n        var templateDocument = (firstTargetNode || template || {}).ownerDocument;\n        var templateEngineToUse = (options['templateEngine'] || _templateEngine);\n        ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\n        var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\n\n        // Loosely check result is an array of DOM nodes\n        if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\n            throw new Error(\"Template engine must return an array of DOM nodes\");\n\n        var haveAddedNodesToParent = false;\n        switch (renderMode) {\n            case \"replaceChildren\":\n                ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\n                haveAddedNodesToParent = true;\n                break;\n            case \"replaceNode\":\n                ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\n                haveAddedNodesToParent = true;\n                break;\n            case \"ignoreTargetNode\": break;\n            default:\n                throw new Error(\"Unknown renderMode: \" + renderMode);\n        }\n\n        if (haveAddedNodesToParent) {\n            activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\n            if (options['afterRender'])\n                ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext['$data']]);\n        }\n\n        return renderedNodesArray;\n    }\n\n    function resolveTemplateName(template, data, context) {\n        // The template can be specified as:\n        if (ko.isObservable(template)) {\n            // 1. An observable, with string value\n            return template();\n        } else if (typeof template === 'function') {\n            // 2. A function of (data, context) returning a string\n            return template(data, context);\n        } else {\n            // 3. A string\n            return template;\n        }\n    }\n\n    ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\n        options = options || {};\n        if ((options['templateEngine'] || _templateEngine) == undefined)\n            throw new Error(\"Set a template engine before calling renderTemplate\");\n        renderMode = renderMode || \"replaceChildren\";\n\n        if (targetNodeOrNodeArray) {\n            var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n\n            var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\n            var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\n\n            return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\n                function () {\n                    // Ensure we've got a proper binding context to work with\n                    var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\n                        ? dataOrBindingContext\n                        : new ko.bindingContext(dataOrBindingContext, null, null, null, { \"exportDependencies\": true });\n\n                    var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\n                        renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\n\n                    if (renderMode == \"replaceNode\") {\n                        targetNodeOrNodeArray = renderedNodesArray;\n                        firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\n                    }\n                },\n                null,\n                { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\n            );\n        } else {\n            // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\n            return ko.memoization.memoize(function (domNode) {\n                ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\n            });\n        }\n    };\n\n    ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\n        // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\n        // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\n        var arrayItemContext;\n\n        // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\n        var executeTemplateForArrayItem = function (arrayValue, index) {\n            // Support selecting template as a function of the data being rendered\n            arrayItemContext = parentBindingContext['createChildContext'](arrayValue, options['as'], function(context) {\n                context['$index'] = index;\n            });\n\n            var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\n            return executeTemplate(null, \"ignoreTargetNode\", templateName, arrayItemContext, options);\n        }\n\n        // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\n        var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\n            activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\n            if (options['afterRender'])\n                options['afterRender'](addedNodesArray, arrayValue);\n\n            // release the \"cache\" variable, so that it can be collected by\n            // the GC when its value isn't used from within the bindings anymore.\n            arrayItemContext = null;\n        };\n\n        return ko.dependentObservable(function () {\n            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\n            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\n                unwrappedArray = [unwrappedArray];\n\n            // Filter out any entries marked as destroyed\n            var filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\n                return options['includeDestroyed'] || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\n            });\n\n            // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\n            // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\n            ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, filteredArray, executeTemplateForArrayItem, options, activateBindingsCallback]);\n\n        }, null, { disposeWhenNodeIsRemoved: targetNode });\n    };\n\n    var templateComputedDomDataKey = ko.utils.domData.nextKey();\n    function disposeOldComputedAndStoreNewOne(element, newComputed) {\n        var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\n        if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\n            oldComputed.dispose();\n        ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && newComputed.isActive()) ? newComputed : undefined);\n    }\n\n    ko.bindingHandlers['template'] = {\n        'init': function(element, valueAccessor) {\n            // Support anonymous templates\n            var bindingValue = ko.utils.unwrapObservable(valueAccessor());\n            if (typeof bindingValue == \"string\" || bindingValue['name']) {\n                // It's a named template - clear the element\n                ko.virtualElements.emptyNode(element);\n            } else if ('nodes' in bindingValue) {\n                // We've been given an array of DOM nodes. Save them as the template source.\n                // There is no known use case for the node array being an observable array (if the output\n                // varies, put that behavior *into* your template - that's what templates are for), and\n                // the implementation would be a mess, so assert that it's not observable.\n                var nodes = bindingValue['nodes'] || [];\n                if (ko.isObservable(nodes)) {\n                    throw new Error('The \"nodes\" option must be a plain, non-observable array.');\n                }\n                var container = ko.utils.moveCleanedNodesToContainerElement(nodes); // This also removes the nodes from their current parent\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\n            } else {\n                // It's an anonymous template - store the element contents, then clear the element\n                var templateNodes = ko.virtualElements.childNodes(element),\n                    container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\n                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\n            }\n            return { 'controlsDescendantBindings': true };\n        },\n        'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\n            var value = valueAccessor(),\n                options = ko.utils.unwrapObservable(value),\n                shouldDisplay = true,\n                templateComputed = null,\n                templateName;\n\n            if (typeof options == \"string\") {\n                templateName = value;\n                options = {};\n            } else {\n                templateName = options['name'];\n\n                // Support \"if\"/\"ifnot\" conditions\n                if ('if' in options)\n                    shouldDisplay = ko.utils.unwrapObservable(options['if']);\n                if (shouldDisplay && 'ifnot' in options)\n                    shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\n            }\n\n            if ('foreach' in options) {\n                // Render once for each data point (treating data set as empty if shouldDisplay==false)\n                var dataArray = (shouldDisplay && options['foreach']) || [];\n                templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\n            } else if (!shouldDisplay) {\n                ko.virtualElements.emptyNode(element);\n            } else {\n                // Render once for this single data point (or use the viewModel if no data was provided)\n                var innerBindingContext = ('data' in options) ?\n                    bindingContext.createStaticChildContext(options['data'], options['as']) :  // Given an explitit 'data' value, we create a child binding context for it\n                    bindingContext;                                                        // Given no explicit 'data' value, we retain the same binding context\n                templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\n            }\n\n            // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\n            disposeOldComputedAndStoreNewOne(element, templateComputed);\n        }\n    };\n\n    // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\n    ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\n        var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\n\n        if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\n            return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\n\n        if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\n            return null; // Named templates can be rewritten, so return \"no error\"\n        return \"This template engine does not support anonymous templates nested within its templates\";\n    };\n\n    ko.virtualElements.allowedBindings['template'] = true;\n})();\n\nko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\nko.exportSymbol('renderTemplate', ko.renderTemplate);\n// Go through the items that have been added and deleted and try to find matches between them.\nko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\n    if (left.length && right.length) {\n        var failedCompares, l, r, leftItem, rightItem;\n        for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\n            for (r = 0; rightItem = right[r]; ++r) {\n                if (leftItem['value'] === rightItem['value']) {\n                    leftItem['moved'] = rightItem['index'];\n                    rightItem['moved'] = leftItem['index'];\n                    right.splice(r, 1);         // This item is marked as moved; so remove it from right list\n                    failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\n                    break;\n                }\n            }\n            failedCompares += r;\n        }\n    }\n};\n\nko.utils.compareArrays = (function () {\n    var statusNotInOld = 'added', statusNotInNew = 'deleted';\n\n    // Simple calculation based on Levenshtein distance.\n    function compareArrays(oldArray, newArray, options) {\n        // For backward compatibility, if the third arg is actually a bool, interpret\n        // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\n        options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\n        oldArray = oldArray || [];\n        newArray = newArray || [];\n\n        if (oldArray.length < newArray.length)\n            return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\n        else\n            return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\n    }\n\n    function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\n        var myMin = Math.min,\n            myMax = Math.max,\n            editDistanceMatrix = [],\n            smlIndex, smlIndexMax = smlArray.length,\n            bigIndex, bigIndexMax = bigArray.length,\n            compareRange = (bigIndexMax - smlIndexMax) || 1,\n            maxDistance = smlIndexMax + bigIndexMax + 1,\n            thisRow, lastRow,\n            bigIndexMaxForRow, bigIndexMinForRow;\n\n        for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\n            lastRow = thisRow;\n            editDistanceMatrix.push(thisRow = []);\n            bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\n            bigIndexMinForRow = myMax(0, smlIndex - 1);\n            for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\n                if (!bigIndex)\n                    thisRow[bigIndex] = smlIndex + 1;\n                else if (!smlIndex)  // Top row - transform empty array into new array via additions\n                    thisRow[bigIndex] = bigIndex + 1;\n                else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\n                    thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\n                else {\n                    var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\n                    var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\n                    thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\n                }\n            }\n        }\n\n        var editScript = [], meMinusOne, notInSml = [], notInBig = [];\n        for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\n            meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\n            if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\n                notInSml.push(editScript[editScript.length] = {     // added\n                    'status': statusNotInSml,\n                    'value': bigArray[--bigIndex],\n                    'index': bigIndex });\n            } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\n                notInBig.push(editScript[editScript.length] = {     // deleted\n                    'status': statusNotInBig,\n                    'value': smlArray[--smlIndex],\n                    'index': smlIndex });\n            } else {\n                --bigIndex;\n                --smlIndex;\n                if (!options['sparse']) {\n                    editScript.push({\n                        'status': \"retained\",\n                        'value': bigArray[bigIndex] });\n                }\n            }\n        }\n\n        // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\n        // smlIndexMax keeps the time complexity of this algorithm linear.\n        ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\n\n        return editScript.reverse();\n    }\n\n    return compareArrays;\n})();\n\nko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\n(function () {\n    // Objective:\n    // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\n    //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\n    // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\n    //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\n    //   previously mapped - retain those nodes, and just insert/delete other ones\n\n    // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\n    // You can use this, for example, to activate bindings on those nodes.\n\n    function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\n        // Map this array value inside a dependentObservable so we re-map when any dependency changes\n        var mappedNodes = [];\n        var dependentObservable = ko.dependentObservable(function() {\n            var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\n\n            // On subsequent evaluations, just replace the previously-inserted DOM nodes\n            if (mappedNodes.length > 0) {\n                ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\n                if (callbackAfterAddingNodes)\n                    ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\n            }\n\n            // Replace the contents of the mappedNodes array, thereby updating the record\n            // of which nodes would be deleted if valueToMap was itself later removed\n            mappedNodes.length = 0;\n            ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\n        }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\n        return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\n    }\n\n    var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\n        deletedItemDummyValue = ko.utils.domData.nextKey();\n\n    ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes) {\n        // Compare the provided array against the previous one\n        array = array || [];\n        options = options || {};\n        var isFirstExecution = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) === undefined;\n        var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey) || [];\n        var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; });\n        var editScript = ko.utils.compareArrays(lastArray, array, options['dontLimitMoves']);\n\n        // Build the new mapping result\n        var newMappingResult = [];\n        var lastMappingResultIndex = 0;\n        var newMappingResultIndex = 0;\n\n        var nodesToDelete = [];\n        var itemsToProcess = [];\n        var itemsForBeforeRemoveCallbacks = [];\n        var itemsForMoveCallbacks = [];\n        var itemsForAfterAddCallbacks = [];\n        var mapData;\n\n        function itemMovedOrRetained(editScriptIndex, oldPosition) {\n            mapData = lastMappingResult[oldPosition];\n            if (newMappingResultIndex !== oldPosition)\n                itemsForMoveCallbacks[editScriptIndex] = mapData;\n            // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\n            mapData.indexObservable(newMappingResultIndex++);\n            ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\n            newMappingResult.push(mapData);\n            itemsToProcess.push(mapData);\n        }\n\n        function callCallback(callback, items) {\n            if (callback) {\n                for (var i = 0, n = items.length; i < n; i++) {\n                    if (items[i]) {\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\n                            callback(node, i, items[i].arrayEntry);\n                        });\n                    }\n                }\n            }\n        }\n\n        for (var i = 0, editScriptItem, movedIndex; editScriptItem = editScript[i]; i++) {\n            movedIndex = editScriptItem['moved'];\n            switch (editScriptItem['status']) {\n                case \"deleted\":\n                    if (movedIndex === undefined) {\n                        mapData = lastMappingResult[lastMappingResultIndex];\n\n                        // Stop tracking changes to the mapping for these nodes\n                        if (mapData.dependentObservable) {\n                            mapData.dependentObservable.dispose();\n                            mapData.dependentObservable = undefined;\n                        }\n\n                        // Queue these nodes for later removal\n                        if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\n                            if (options['beforeRemove']) {\n                                newMappingResult.push(mapData);\n                                itemsToProcess.push(mapData);\n                                if (mapData.arrayEntry === deletedItemDummyValue) {\n                                    mapData = null;\n                                } else {\n                                    itemsForBeforeRemoveCallbacks[i] = mapData;\n                                }\n                            }\n                            if (mapData) {\n                                nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\n                            }\n                        }\n                    }\n                    lastMappingResultIndex++;\n                    break;\n\n                case \"retained\":\n                    itemMovedOrRetained(i, lastMappingResultIndex++);\n                    break;\n\n                case \"added\":\n                    if (movedIndex !== undefined) {\n                        itemMovedOrRetained(i, movedIndex);\n                    } else {\n                        mapData = { arrayEntry: editScriptItem['value'], indexObservable: ko.observable(newMappingResultIndex++) };\n                        newMappingResult.push(mapData);\n                        itemsToProcess.push(mapData);\n                        if (!isFirstExecution)\n                            itemsForAfterAddCallbacks[i] = mapData;\n                    }\n                    break;\n            }\n        }\n\n        // Store a copy of the array items we just considered so we can difference it next time\n        ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\n\n        // Call beforeMove first before any changes have been made to the DOM\n        callCallback(options['beforeMove'], itemsForMoveCallbacks);\n\n        // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\n        ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\n\n        // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\n        for (var i = 0, nextNode = ko.virtualElements.firstChild(domNode), lastNode, node; mapData = itemsToProcess[i]; i++) {\n            // Get nodes for newly added items\n            if (!mapData.mappedNodes)\n                ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\n\n            // Put nodes in the right place if they aren't there already\n            for (var j = 0; node = mapData.mappedNodes[j]; nextNode = node.nextSibling, lastNode = node, j++) {\n                if (node !== nextNode)\n                    ko.virtualElements.insertAfter(domNode, node, lastNode);\n            }\n\n            // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\n            if (!mapData.initialized && callbackAfterAddingNodes) {\n                callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\n                mapData.initialized = true;\n            }\n        }\n\n        // If there's a beforeRemove callback, call it after reordering.\n        // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\n        // some sort of animation, which is why we first reorder the nodes that will be removed. If the\n        // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\n        // Perhaps we'll make that change in the future if this scenario becomes more common.\n        callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\n\n        // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\n        // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\n        // with an actual item in the array and appear as \"retained\" or \"moved\".\n        for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\n            if (itemsForBeforeRemoveCallbacks[i]) {\n                itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\n            }\n        }\n\n        // Finally call afterMove and afterAdd callbacks\n        callCallback(options['afterMove'], itemsForMoveCallbacks);\n        callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\n    }\n})();\n\nko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\nko.nativeTemplateEngine = function () {\n    this['allowTemplateRewriting'] = false;\n}\n\nko.nativeTemplateEngine.prototype = new ko.templateEngine();\nko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\nko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\n    var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\n        templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\n        templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\n\n    if (templateNodes) {\n        return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\n    } else {\n        var templateText = templateSource['text']();\n        return ko.utils.parseHtmlFragment(templateText, templateDocument);\n    }\n};\n\nko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\nko.setTemplateEngine(ko.nativeTemplateEngine.instance);\n\nko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\n(function() {\n    ko.jqueryTmplTemplateEngine = function () {\n        // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\n        // doesn't expose a version number, so we have to infer it.\n        // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\n        // which KO internally refers to as version \"2\", so older versions are no longer detected.\n        var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\n            if (!jQueryInstance || !(jQueryInstance['tmpl']))\n                return 0;\n            // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\n            try {\n                if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\n                    // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\n                    return 2; // Final version of jquery.tmpl\n                }\n            } catch(ex) { /* Apparently not the version we were looking for */ }\n\n            return 1; // Any older version that we don't support\n        })();\n\n        function ensureHasReferencedJQueryTemplates() {\n            if (jQueryTmplVersion < 2)\n                throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\n        }\n\n        function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\n            return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\n        }\n\n        this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\n            templateDocument = templateDocument || document;\n            options = options || {};\n            ensureHasReferencedJQueryTemplates();\n\n            // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\n            var precompiled = templateSource['data']('precompiled');\n            if (!precompiled) {\n                var templateText = templateSource['text']() || \"\";\n                // Wrap in \"with($whatever.koBindingContext) { ... }\"\n                templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\n\n                precompiled = jQueryInstance['template'](null, templateText);\n                templateSource['data']('precompiled', precompiled);\n            }\n\n            var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\n            var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\n\n            var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\n            resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\n\n            jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\n            return resultNodes;\n        };\n\n        this['createJavaScriptEvaluatorBlock'] = function(script) {\n            return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\n        };\n\n        this['addTemplate'] = function(templateName, templateMarkup) {\n            document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\n        };\n\n        if (jQueryTmplVersion > 0) {\n            jQueryInstance['tmpl']['tag']['ko_code'] = {\n                open: \"__.push($1 || '');\"\n            };\n            jQueryInstance['tmpl']['tag']['ko_with'] = {\n                open: \"with($1) {\",\n                close: \"} \"\n            };\n        }\n    };\n\n    ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\n    ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\n\n    // Use this one by default *only if jquery.tmpl is referenced*\n    var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\n    if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\n        ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\n\n    ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\n})();\n}));\n}());\n})();\n","knockoutjs/knockout-repeat.js":"// REPEAT binding for Knockout http://knockoutjs.com/\n// (c) Michael Best\n// License: MIT (http://www.opensource.org/licenses/mit-license.php)\n// Version 2.1.0\n\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        // [1] AMD anonymous module\n        define(['knockout'], factory);\n    } else if (typeof exports === 'object') {\n        // [2] commonJS\n        factory(require('knockout'));\n    } else {\n        // [3] No module loader (plain <script> tag) - put directly in global namespace\n        factory(window.ko);\n    }\n})(function(ko) {\n\nif (!ko.virtualElements)\n    throw Error('Repeat requires at least Knockout 2.1');\n\nvar ko_bindingFlags = ko.bindingFlags || {};\nvar ko_unwrap = ko.utils.unwrapObservable;\n\nvar koProtoName = '__ko_proto__';\n\nif (ko.version >= \"3.0.0\") {\n    // In Knockout 3.0.0, use the node preprocessor to replace a node with a repeat binding with a virtual element\n    var provider = ko.bindingProvider.instance, previousPreprocessFn = provider.preprocessNode;\n    provider.preprocessNode = function(node) {\n        var newNodes, nodeBinding;\n        if (!previousPreprocessFn || !(newNodes = previousPreprocessFn.call(this, node))) {\n            if (node.nodeType === 1 && (nodeBinding = node.getAttribute('data-bind'))) {\n                if (/^\\s*repeat\\s*:/.test(nodeBinding)) {\n                    var leadingComment = node.ownerDocument.createComment('ko ' + nodeBinding),\n                        trailingComment = node.ownerDocument.createComment('/ko');\n                    node.parentNode.insertBefore(leadingComment, node);\n                    node.parentNode.insertBefore(trailingComment, node.nextSibling);\n                    node.removeAttribute('data-bind');\n                    newNodes = [leadingComment, node, trailingComment];\n                }\n            }\n        }\n        return newNodes;\n    };\n}\n\nko.virtualElements.allowedBindings.repeat = true;\nko.bindingHandlers.repeat = {\n    flags: ko_bindingFlags.contentBind | ko_bindingFlags.canUseVirtual,\n    init: function(element, valueAccessor, allBindingsAccessor, xxx, bindingContext) {\n\n        // Read and set fixed options--these options cannot be changed\n        var repeatParam = ko_unwrap(valueAccessor());\n        if (repeatParam && typeof repeatParam == 'object' && !('length' in repeatParam)) {\n            var repeatIndex = repeatParam.index,\n                repeatData = repeatParam.item,\n                repeatStep = repeatParam.step,\n                repeatReversed = repeatParam.reverse,\n                repeatBind = repeatParam.bind,\n                repeatInit = repeatParam.init,\n                repeatUpdate = repeatParam.update;\n        }\n        // Set default values for options that need it\n        repeatIndex = repeatIndex || '$index';\n        repeatData = repeatData || ko.bindingHandlers.repeat.itemName || '$item';\n        repeatStep = repeatStep || 1;\n        repeatReversed = repeatReversed || false;\n\n        var parent = element.parentNode, placeholder;\n        if (element.nodeType == 8) {    // virtual element\n            // Extract the \"children\" and find the single element node\n            var childNodes = ko.utils.arrayFilter(ko.virtualElements.childNodes(element), function(node) { return node.nodeType == 1;});\n            if (childNodes.length !== 1) {\n                throw Error(\"Repeat binding requires a single element to repeat\");\n            }\n            ko.virtualElements.emptyNode(element);\n\n            // The placeholder is the closing comment normally, or the opening comment if reversed\n            placeholder = repeatReversed ? element : element.nextSibling;\n            // The element to repeat is the contained element\n            element = childNodes[0];\n        } else {    // regular element\n            // First clean the element node and remove node's binding\n            var origBindString = element.getAttribute('data-bind');\n            ko.cleanNode(element);\n            element.removeAttribute('data-bind');\n\n            // Original element is no longer needed: delete it and create a placeholder comment\n            placeholder = element.ownerDocument.createComment('ko_repeatplaceholder ' + origBindString);\n            parent.replaceChild(placeholder, element);\n        }\n\n        // extract and remove a data-repeat-bind attribute, if present\n        if (!repeatBind) {\n            repeatBind = element.getAttribute('data-repeat-bind');\n            if (repeatBind) {\n                element.removeAttribute('data-repeat-bind');\n            }\n        }\n\n        // Make a copy of the element node to be copied for each repetition\n        var cleanNode = element.cloneNode(true);\n        if (typeof repeatBind == \"string\") {\n            cleanNode.setAttribute('data-bind', repeatBind);\n            repeatBind = null;\n        }\n\n        // Set up persistent data\n        var lastRepeatCount = 0,\n            notificationObservable = ko.observable(),\n            repeatArray, arrayObservable;\n\n        if (repeatInit) {\n            repeatInit(parent);\n        }\n\n        var subscribable = ko.computed(function() {\n            function makeArrayItemAccessor(index) {\n                var f = function(newValue) {\n                    var item = repeatArray[index];\n                    // Reading the value of the item\n                    if (!arguments.length) {\n                        notificationObservable();   // for dependency tracking\n                        return ko_unwrap(item);\n                    }\n                    // Writing a value to the item\n                    if (ko.isObservable(item)) {\n                        item(newValue);\n                    } else if (arrayObservable && arrayObservable.splice) {\n                        arrayObservable.splice(index, 1, newValue);\n                    } else {\n                        repeatArray[index] = newValue;\n                    }\n                    return this;\n                };\n                // Pretend that our accessor function is an observable\n                f[koProtoName] = ko.observable;\n                return f;\n            }\n\n            function makeBinding(item, index, context) {\n                return repeatArray\n                    ? function() { return repeatBind.call(bindingContext.$data, item, index, context); }\n                    : function() { return repeatBind.call(bindingContext.$data, index, context); }\n            }\n\n            // Read and set up variable options--these options can change and will update the binding\n            var paramObservable = valueAccessor(), repeatParam = ko_unwrap(paramObservable), repeatCount = 0;\n            if (repeatParam && typeof repeatParam == 'object') {\n                if ('length' in repeatParam) {\n                    repeatArray = repeatParam;\n                    repeatCount = repeatArray.length;\n                } else {\n                    if ('foreach' in repeatParam) {\n                        repeatArray = ko_unwrap(paramObservable = repeatParam.foreach);\n                        if (repeatArray && typeof repeatArray == 'object' && 'length' in repeatArray) {\n                            repeatCount = repeatArray.length || 0;\n                        } else {\n                            repeatCount = repeatArray || 0;\n                            repeatArray = null;\n                        }\n                    }\n                    // If a count value is provided (>0), always output that number of items\n                    if ('count' in repeatParam)\n                        repeatCount = ko_unwrap(repeatParam.count) || repeatCount;\n                    // If a limit is provided, don't output more than the limit\n                    if ('limit' in repeatParam)\n                        repeatCount = Math.min(repeatCount, ko_unwrap(repeatParam.limit)) || repeatCount;\n                }\n                arrayObservable = repeatArray && ko.isObservable(paramObservable) ? paramObservable : null;\n            } else {\n                repeatCount = repeatParam || 0;\n            }\n\n            // Remove nodes from end if array is shorter\n            for (; lastRepeatCount > repeatCount; lastRepeatCount-=repeatStep) {\n                ko.removeNode(repeatReversed ? placeholder.nextSibling : placeholder.previousSibling);\n            }\n\n            // Notify existing nodes of change\n            notificationObservable.notifySubscribers();\n\n            // Add nodes to end if array is longer (also initially populates nodes)\n            for (; lastRepeatCount < repeatCount; lastRepeatCount+=repeatStep) {\n                // Clone node and add to document\n                var newNode = cleanNode.cloneNode(true);\n                parent.insertBefore(newNode, repeatReversed ? placeholder.nextSibling : placeholder);\n                newNode.setAttribute('data-repeat-index', lastRepeatCount);\n\n                // Apply bindings to inserted node\n                if (repeatArray && repeatData == '$data') {\n                    var newContext = bindingContext.createChildContext(makeArrayItemAccessor(lastRepeatCount));\n                } else {\n                    var newContext = bindingContext.extend();\n                    if (repeatArray)\n                        newContext[repeatData] = makeArrayItemAccessor(lastRepeatCount);\n                }\n                newContext[repeatIndex] = lastRepeatCount;\n                if (repeatBind) {\n                    var result = ko.applyBindingsToNode(newNode, makeBinding(newContext[repeatData], lastRepeatCount, newContext), newContext, true),\n                        shouldBindDescendants = result && result.shouldBindDescendants;\n                }\n                if (!repeatBind || (result && shouldBindDescendants !== false)) {\n                    ko.applyBindings(newContext, newNode);\n                }\n            }\n            if (repeatUpdate) {\n                repeatUpdate(parent);\n            }\n        }, null, {disposeWhenNodeIsRemoved: placeholder});\n\n        return { controlsDescendantBindings: true, subscribable: subscribable };\n    }\n};\n});","knockoutjs/knockout-es5.js":"/*!\n * Knockout ES5 plugin - https://github.com/SteveSanderson/knockout-es5\n * Copyright (c) Steve Sanderson\n * MIT license\n */\n\n(function(global, undefined) {\n  'use strict';\n\n  var ko;\n\n  // Model tracking\n  // --------------\n  //\n  // This is the central feature of Knockout-ES5. We augment model objects by converting properties\n  // into ES5 getter/setter pairs that read/write an underlying Knockout observable. This means you can\n  // use plain JavaScript syntax to read/write the property while still getting the full benefits of\n  // Knockout's automatic dependency detection and notification triggering.\n  //\n  // For comparison, here's Knockout ES3-compatible syntax:\n  //\n  //     var firstNameLength = myModel.user().firstName().length; // Read\n  //     myModel.user().firstName('Bert'); // Write\n  //\n  // ... versus Knockout-ES5 syntax:\n  //\n  //     var firstNameLength = myModel.user.firstName.length; // Read\n  //     myModel.user.firstName = 'Bert'; // Write\n\n  // `ko.track(model)` converts each property on the given model object into a getter/setter pair that\n  // wraps a Knockout observable. Optionally specify an array of property names to wrap; otherwise we\n  // wrap all properties. If any of the properties are already observables, we replace them with\n  // ES5 getter/setter pairs that wrap your original observable instances. In the case of readonly\n  // ko.computed properties, we simply do not define a setter (so attempted writes will be ignored,\n  // which is how ES5 readonly properties normally behave).\n  //\n  // By design, this does *not* recursively walk child object properties, because making literally\n  // everything everywhere independently observable is usually unhelpful. When you do want to track\n  // child object properties independently, define your own class for those child objects and put\n  // a separate ko.track call into its constructor --- this gives you far more control.\n  /**\n   * @param {object} obj\n   * @param {object|array.<string>} propertyNamesOrSettings\n   * @param {boolean} propertyNamesOrSettings.deep Use deep track.\n   * @param {array.<string>} propertyNamesOrSettings.fields Array of property names to wrap.\n   * todo: @param {array.<string>} propertyNamesOrSettings.exclude Array of exclude property names to wrap.\n   * todo: @param {function(string, *):boolean} propertyNamesOrSettings.filter Function to filter property \n   *   names to wrap. A function that takes ... params\n   * @return {object}\n   */\n  function track(obj, propertyNamesOrSettings) {\n    if (!obj || typeof obj !== 'object') {\n      throw new Error('When calling ko.track, you must pass an object as the first parameter.');\n    }\n\n    var propertyNames;\n\n    if ( isPlainObject(propertyNamesOrSettings) ) {\n      // defaults\n      propertyNamesOrSettings.deep = propertyNamesOrSettings.deep || false;\n      propertyNamesOrSettings.fields = propertyNamesOrSettings.fields || Object.getOwnPropertyNames(obj);\n      propertyNamesOrSettings.lazy = propertyNamesOrSettings.lazy || false;\n\n      wrap(obj, propertyNamesOrSettings.fields, propertyNamesOrSettings);\n    } else {\n      propertyNames = propertyNamesOrSettings || Object.getOwnPropertyNames(obj);\n      wrap(obj, propertyNames, {});\n    }\n\n    return obj;\n  }\n\n  // fix for ie\n  var rFunctionName = /^function\\s*([^\\s(]+)/;\n  function getFunctionName( ctor ){\n    if (ctor.name) {\n      return ctor.name;\n    }\n    return (ctor.toString().trim().match( rFunctionName ) || [])[1];\n  }\n\n  function canTrack(obj) {\n    return obj && typeof obj === 'object' && getFunctionName(obj.constructor) === 'Object';\n  }\n\n  function createPropertyDescriptor(originalValue, prop, map) {\n    var isObservable = ko.isObservable(originalValue);\n    var isArray = !isObservable && Array.isArray(originalValue);\n    var observable = isObservable ? originalValue\n        : isArray ? ko.observableArray(originalValue)\n        : ko.observable(originalValue);\n\n    map[prop] = function () { return observable; };\n\n    // add check in case the object is already an observable array\n    if (isArray || (isObservable && 'push' in observable)) {\n      notifyWhenPresentOrFutureArrayValuesMutate(ko, observable);\n    }\n\n    return {\n      configurable: true,\n      enumerable: true,\n      get: observable,\n      set: ko.isWriteableObservable(observable) ? observable : undefined\n    };\n  }\n\n  function createLazyPropertyDescriptor(originalValue, prop, map) {\n    if (ko.isObservable(originalValue)) {\n      // no need to be lazy if we already have an observable\n      return createPropertyDescriptor(originalValue, prop, map);\n    }\n\n    var observable;\n\n    function getOrCreateObservable(value, writing) {\n      if (observable) {\n        return writing ? observable(value) : observable;\n      }\n\n      if (Array.isArray(value)) {\n        observable = ko.observableArray(value);\n        notifyWhenPresentOrFutureArrayValuesMutate(ko, observable);\n        return observable;\n      }\n\n      return (observable = ko.observable(value));\n    }\n\n    map[prop] = function () { return getOrCreateObservable(originalValue); };\n    return {\n      configurable: true,\n      enumerable: true,\n      get: function () { return getOrCreateObservable(originalValue)(); },\n      set: function (value) { getOrCreateObservable(value, true); }\n    };\n  }\n\n  function wrap(obj, props, options) {\n    if (!props.length) {\n      return;\n    }\n\n    var allObservablesForObject = getAllObservablesForObject(obj, true);\n    var descriptors = {};\n\n    props.forEach(function (prop) {\n      // Skip properties that are already tracked\n      if (prop in allObservablesForObject) {\n        return;\n      }\n\n      // Skip properties where descriptor can't be redefined\n      if (Object.getOwnPropertyDescriptor(obj, prop).configurable === false){\n        return;\n      }\n\n      var originalValue = obj[prop];\n      descriptors[prop] = (options.lazy ? createLazyPropertyDescriptor : createPropertyDescriptor)\n        (originalValue, prop, allObservablesForObject);\n\n      if (options.deep && canTrack(originalValue)) {\n        wrap(originalValue, Object.keys(originalValue), options);\n      }\n    });\n\n    Object.defineProperties(obj, descriptors);\n  }\n\n  function isPlainObject( obj ){\n    return !!obj && typeof obj === 'object' && obj.constructor === Object;\n  }\n\n  // Lazily created by `getAllObservablesForObject` below. Has to be created lazily because the\n  // WeakMap factory isn't available until the module has finished loading (may be async).\n  var objectToObservableMap;\n\n  // Gets or creates the hidden internal key-value collection of observables corresponding to\n  // properties on the model object.\n  function getAllObservablesForObject(obj, createIfNotDefined) {\n    if (!objectToObservableMap) {\n      objectToObservableMap = weakMapFactory();\n    }\n\n    var result = objectToObservableMap.get(obj);\n    if (!result && createIfNotDefined) {\n      result = {};\n      objectToObservableMap.set(obj, result);\n    }\n    return result;\n  }\n\n  // Removes the internal references to observables mapped to the specified properties\n  // or the entire object reference if no properties are passed in. This allows the\n  // observables to be replaced and tracked again.\n  function untrack(obj, propertyNames) {\n    if (!objectToObservableMap) {\n      return;\n    }\n\n    if (arguments.length === 1) {\n      objectToObservableMap['delete'](obj);\n    } else {\n      var allObservablesForObject = getAllObservablesForObject(obj, false);\n      if (allObservablesForObject) {\n        propertyNames.forEach(function(propertyName) {\n          delete allObservablesForObject[propertyName];\n        });\n      }\n    }\n  }\n\n  // Computed properties\n  // -------------------\n  //\n  // The preceding code is already sufficient to upgrade ko.computed model properties to ES5\n  // getter/setter pairs (or in the case of readonly ko.computed properties, just a getter).\n  // These then behave like a regular property with a getter function, except they are smarter:\n  // your evaluator is only invoked when one of its dependencies changes. The result is cached\n  // and used for all evaluations until the next time a dependency changes).\n  //\n  // However, instead of forcing developers to declare a ko.computed property explicitly, it's\n  // nice to offer a utility function that declares a computed getter directly.\n\n  // Implements `ko.defineProperty`\n  function defineComputedProperty(obj, propertyName, evaluatorOrOptions) {\n    var ko = this,\n      computedOptions = { owner: obj, deferEvaluation: true };\n\n    if (typeof evaluatorOrOptions === 'function') {\n      computedOptions.read = evaluatorOrOptions;\n    } else {\n      if ('value' in evaluatorOrOptions) {\n        throw new Error('For ko.defineProperty, you must not specify a \"value\" for the property. ' +\n                        'You must provide a \"get\" function.');\n      }\n\n      if (typeof evaluatorOrOptions.get !== 'function') {\n        throw new Error('For ko.defineProperty, the third parameter must be either an evaluator function, ' +\n                        'or an options object containing a function called \"get\".');\n      }\n\n      computedOptions.read = evaluatorOrOptions.get;\n      computedOptions.write = evaluatorOrOptions.set;\n    }\n\n    obj[propertyName] = ko.computed(computedOptions);\n    track.call(ko, obj, [propertyName]);\n    return obj;\n  }\n\n  // Array handling\n  // --------------\n  //\n  // Arrays are special, because unlike other property types, they have standard mutator functions\n  // (`push`/`pop`/`splice`/etc.) and it's desirable to trigger a change notification whenever one of\n  // those mutator functions is invoked.\n  //\n  // Traditionally, Knockout handles this by putting special versions of `push`/`pop`/etc. on observable\n  // arrays that mutate the underlying array and then trigger a notification. That approach doesn't\n  // work for Knockout-ES5 because properties now return the underlying arrays, so the mutator runs\n  // in the context of the underlying array, not any particular observable:\n  //\n  //     // Operates on the underlying array value\n  //     myModel.someCollection.push('New value');\n  //\n  // To solve this, Knockout-ES5 detects array values, and modifies them as follows:\n  //  1. Associates a hidden subscribable with each array instance that it encounters\n  //  2. Intercepts standard mutators (`push`/`pop`/etc.) and makes them trigger the subscribable\n  // Then, for model properties whose values are arrays, the property's underlying observable\n  // subscribes to the array subscribable, so it can trigger a change notification after mutation.\n\n  // Given an observable that underlies a model property, watch for any array value that might\n  // be assigned as the property value, and hook into its change events\n  function notifyWhenPresentOrFutureArrayValuesMutate(ko, observable) {\n    var watchingArraySubscription = null;\n    ko.computed(function () {\n      // Unsubscribe to any earlier array instance\n      if (watchingArraySubscription) {\n        watchingArraySubscription.dispose();\n        watchingArraySubscription = null;\n      }\n\n      // Subscribe to the new array instance\n      var newArrayInstance = observable();\n      if (newArrayInstance instanceof Array) {\n        watchingArraySubscription = startWatchingArrayInstance(ko, observable, newArrayInstance);\n      }\n    });\n  }\n\n  // Listens for array mutations, and when they happen, cause the observable to fire notifications.\n  // This is used to make model properties of type array fire notifications when the array changes.\n  // Returns a subscribable that can later be disposed.\n  function startWatchingArrayInstance(ko, observable, arrayInstance) {\n    var subscribable = getSubscribableForArray(ko, arrayInstance);\n    return subscribable.subscribe(observable);\n  }\n\n  // Lazily created by `getSubscribableForArray` below. Has to be created lazily because the\n  // WeakMap factory isn't available until the module has finished loading (may be async).\n  var arraySubscribablesMap;\n\n  // Gets or creates a subscribable that fires after each array mutation\n  function getSubscribableForArray(ko, arrayInstance) {\n    if (!arraySubscribablesMap) {\n      arraySubscribablesMap = weakMapFactory();\n    }\n\n    var subscribable = arraySubscribablesMap.get(arrayInstance);\n    if (!subscribable) {\n      subscribable = new ko.subscribable();\n      arraySubscribablesMap.set(arrayInstance, subscribable);\n\n      var notificationPauseSignal = {};\n      wrapStandardArrayMutators(arrayInstance, subscribable, notificationPauseSignal);\n      addKnockoutArrayMutators(ko, arrayInstance, subscribable, notificationPauseSignal);\n    }\n\n    return subscribable;\n  }\n\n  // After each array mutation, fires a notification on the given subscribable\n  function wrapStandardArrayMutators(arrayInstance, subscribable, notificationPauseSignal) {\n    ['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'].forEach(function(fnName) {\n      var origMutator = arrayInstance[fnName];\n      arrayInstance[fnName] = function() {\n        var result = origMutator.apply(this, arguments);\n        if (notificationPauseSignal.pause !== true) {\n          subscribable.notifySubscribers(this);\n        }\n        return result;\n      };\n    });\n  }\n\n  // Adds Knockout's additional array mutation functions to the array\n  function addKnockoutArrayMutators(ko, arrayInstance, subscribable, notificationPauseSignal) {\n    ['remove', 'removeAll', 'destroy', 'destroyAll', 'replace'].forEach(function(fnName) {\n      // Make it a non-enumerable property for consistency with standard Array functions\n      Object.defineProperty(arrayInstance, fnName, {\n        enumerable: false,\n        value: function() {\n          var result;\n\n          // These additional array mutators are built using the underlying push/pop/etc.\n          // mutators, which are wrapped to trigger notifications. But we don't want to\n          // trigger multiple notifications, so pause the push/pop/etc. wrappers and\n          // delivery only one notification at the end of the process.\n          notificationPauseSignal.pause = true;\n          try {\n            // Creates a temporary observableArray that can perform the operation.\n            result = ko.observableArray.fn[fnName].apply(ko.observableArray(arrayInstance), arguments);\n          }\n          finally {\n            notificationPauseSignal.pause = false;\n          }\n          subscribable.notifySubscribers(arrayInstance);\n          return result;\n        }\n      });\n    });\n  }\n\n  // Static utility functions\n  // ------------------------\n  //\n  // Since Knockout-ES5 sets up properties that return values, not observables, you can't\n  // trivially subscribe to the underlying observables (e.g., `someProperty.subscribe(...)`),\n  // or tell them that object values have mutated, etc. To handle this, we set up some\n  // extra utility functions that can return or work with the underlying observables.\n\n  // Returns the underlying observable associated with a model property (or `null` if the\n  // model or property doesn't exist, or isn't associated with an observable). This means\n  // you can subscribe to the property, e.g.:\n  //\n  //     ko.getObservable(model, 'propertyName')\n  //       .subscribe(function(newValue) { ... });\n  function getObservable(obj, propertyName) {\n    if (!obj || typeof obj !== 'object') {\n      return null;\n    }\n\n    var allObservablesForObject = getAllObservablesForObject(obj, false);\n    if (allObservablesForObject && propertyName in allObservablesForObject) {\n      return allObservablesForObject[propertyName]();\n    }\n\n    return null;\n  }\n  \n  // Returns a boolean indicating whether the property on the object has an underlying\n  // observables. This does the check in a way not to create an observable if the\n  // object was created with lazily created observables\n  function isTracked(obj, propertyName) {\n    if (!obj || typeof obj !== 'object') {\n      return false;\n    }\n    \n    var allObservablesForObject = getAllObservablesForObject(obj, false);\n    return !!allObservablesForObject && propertyName in allObservablesForObject;\n  }\n\n  // Causes a property's associated observable to fire a change notification. Useful when\n  // the property value is a complex object and you've modified a child property.\n  function valueHasMutated(obj, propertyName) {\n    var observable = getObservable(obj, propertyName);\n\n    if (observable) {\n      observable.valueHasMutated();\n    }\n  }\n\n  // Module initialisation\n  // ---------------------\n  //\n  // When this script is first evaluated, it works out what kind of module loading scenario\n  // it is in (Node.js or a browser `<script>` tag), stashes a reference to its dependencies\n  // (currently that's just the WeakMap shim), and then finally attaches itself to whichever\n  // instance of Knockout.js it can find.\n\n  // A function that returns a new ES6-compatible WeakMap instance (using ES5 shim if needed).\n  // Instantiated by prepareExports, accounting for which module loader is being used.\n  var weakMapFactory;\n\n  // Extends a Knockout instance with Knockout-ES5 functionality\n  function attachToKo(ko) {\n    ko.track = track;\n    ko.untrack = untrack;\n    ko.getObservable = getObservable;\n    ko.valueHasMutated = valueHasMutated;\n    ko.defineProperty = defineComputedProperty;\n\n    // todo: test it, maybe added it to ko. directly\n    ko.es5 = {\n      getAllObservablesForObject: getAllObservablesForObject,\n      notifyWhenPresentOrFutureArrayValuesMutate: notifyWhenPresentOrFutureArrayValuesMutate,\n      isTracked: isTracked\n    };\n  }\n\n  // Determines which module loading scenario we're in, grabs dependencies, and attaches to KO\n  function prepareExports() {\n    if (typeof exports === 'object' && typeof module === 'object') {\n      // Node.js case - load KO and WeakMap modules synchronously\n      ko = require('knockout');\n      var WM = require('../lib/weakmap');\n      attachToKo(ko);\n      weakMapFactory = function() { return new WM(); };\n      module.exports = ko;\n    } else if (typeof define === 'function' && define.amd) {\n      define(['knockout'], function(koModule) {\n        ko = koModule;\n        attachToKo(koModule);\n        weakMapFactory = function() { return new global.WeakMap(); };\n        return koModule;\n      });\n    } else if ('ko' in global) {\n      // Non-module case - attach to the global instance, and assume a global WeakMap constructor\n      ko = global.ko;\n      attachToKo(global.ko);\n      weakMapFactory = function() { return new global.WeakMap(); };\n    }\n  }\n\n  prepareExports();\n\n})(this);","Magento_Persistent/js/view/customer-data-mixin.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine([\n    'jquery',\n    'mage/utils/wrapper'\n], function ($, wrapper) {\n    'use strict';\n\n    var mixin = {\n\n        /**\n         * Check if persistent section is expired due to lifetime.\n         *\n         * @param {Function} originFn - Original method.\n         * @return {Array}\n         */\n        getExpiredSectionNames: function (originFn) {\n            var expiredSections = originFn(),\n                storage = $.initNamespaceStorage('mage-cache-storage').localStorage,\n                currentTimestamp = Math.floor(Date.now() / 1000),\n                persistentIndex = expiredSections.indexOf('persistent'),\n                persistentLifeTime = 0,\n                sectionData;\n\n            if (window.persistent !== undefined && window.persistent.expirationLifetime !== undefined) {\n                persistentLifeTime = window.persistent.expirationLifetime;\n            }\n\n            if (persistentIndex !== -1) {\n                sectionData = storage.get('persistent');\n\n                if (typeof sectionData === 'object' &&\n                    sectionData['data_id'] + persistentLifeTime >= currentTimestamp\n                ) {\n                    expiredSections.splice(persistentIndex, 1);\n                }\n            }\n\n            return expiredSections;\n        }\n    };\n\n    /**\n     * Override default customer-data.getExpiredSectionNames().\n     */\n    return function (target) {\n        return wrapper.extend(target, mixin);\n    };\n});\n","Magento_Persistent/js/view/remember-me.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\n/**\n * @deprecated since version 2.2.0\n */\ndefine([\n    'ko',\n    'uiComponent'\n], function (ko, Component) {\n    'use strict';\n\n    var persistenceConfig = window.checkoutConfig.persistenceConfig;\n\n    return Component.extend({\n        defaults: {\n            template: 'Magento_Persistent/remember-me'\n        },\n        dataScope: 'global',\n        isRememberMeCheckboxVisible: ko.observable(persistenceConfig.isRememberMeCheckboxVisible),\n        isRememberMeCheckboxChecked: ko.observable(persistenceConfig.isRememberMeCheckboxChecked)\n    });\n});\n","Magento_Persistent/js/view/additional-welcome.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([\n    'jquery',\n    'mage/translate',\n    'Magento_Customer/js/customer-data'\n], function ($, $t, customerData) {\n    'use strict';\n\n    return {\n        /**\n         * Init.\n         */\n        init: function () {\n            var persistent = customerData.get('persistent');\n\n            if (persistent().fullname === undefined) {\n                customerData.get('persistent').subscribe(this.replacePersistentWelcome);\n            } else {\n                this.replacePersistentWelcome();\n            }\n        },\n\n        /**\n         * Replace welcome message for customer with persistent cookie.\n         */\n        replacePersistentWelcome: function () {\n            var persistent = customerData.get('persistent'),\n                welcomeElems;\n\n            if (persistent().fullname !== undefined) {\n                welcomeElems = $('li.greet.welcome > span.not-logged-in');\n\n                if (welcomeElems.length) {\n                    $(welcomeElems).each(function () {\n                        var html = $t('Welcome, %1!').replace('%1', persistent().fullname);\n\n                        $(this).attr('data-bind', html);\n                        $(this).html(html);\n                    });\n                }\n            }\n        },\n\n        /**\n         * @constructor\n         */\n        'Magento_Persistent/js/view/additional-welcome': function () {\n            this.init();\n        }\n    };\n});\n","Magento_OfflineShipping/js/model/shipping-rates-validation-rules/flatrate.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    return {\n        /**\n         * @return {Object}\n         */\n        getRules: function () {\n            return {\n                'country_id': {\n                    'required': true\n                }\n            };\n        }\n    };\n});\n","Magento_OfflineShipping/js/model/shipping-rates-validation-rules/tablerate.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    return {\n        /**\n         * @return {Object}\n         */\n        getRules: function () {\n            return {\n                'postcode': {\n                    'required': true\n                },\n                'country_id': {\n                    'required': true\n                },\n                'region_id': {\n                    'required': true\n                },\n                'region_id_input': {\n                    'required': true\n                }\n            };\n        }\n    };\n});\n","Magento_OfflineShipping/js/model/shipping-rates-validation-rules/freeshipping.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\ndefine([], function () {\n    'use strict';\n\n    return {\n        /**\n         * @return {Object}\n         */\n        getRules: function () {\n            return {\n                'country_id': {\n                    'required': true\n                }\n            };\n        }\n    };\n});\n"}
}});
